{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "title": "Tink API",
        "version": "1.0.0"
    },
    "host": "api.us.tink.com",
    "paths": {
        "/api/v1/account-verification-reports/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Fetch report JSON data based on a report identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Account Verification",
                    "REGION.US"
                ],
                "summary": "Get Account Verification Report",
                "operationId": "getReport",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "6e68cc6287704273984567b3300c5822",
                        "description": "The id of the report to retrieve.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Data%20v1.Account%20Verification"
                        }
                    },
                    "400": {
                        "description": "Incorrect request parameters."
                    },
                    "404": {
                        "description": "Could not find the report. Possible reasons, report was not successfully created, report has expired"
                    }
                }
            }
        },
        "/api/v1/account-verification-reports/{id}/pdf": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "account-verification-reports:read"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "account-verification-reports:read"
                        ]
                    }
                ],
                "description": "Fetch a PDF report based on the data returned in the Account Verification report API.",
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "Data v1.Account Verification"
                ],
                "summary": "Get Account Verification PDF Report",
                "operationId": "getAsPdf",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "6e68cc6287704273984567b3300c5822",
                        "description": "The id of the report to retrieve a PDF document for.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "standard-1.0",
                        "description": "The template name to use for the report generation. Available templates: standard-1.0",
                        "name": "template",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Incorrect request parameters."
                    },
                    "404": {
                        "description": "Could not find the report (e.g. expired)."
                    }
                }
            }
        },
        "/api/v1/accounts/list": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "accounts:read"
                        ]
                    }
                ],
                "description": "Returns an object with a list of the authenticated user's accounts.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Account"
                ],
                "summary": "List accounts",
                "operationId": "listAccounts",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AccountListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/accounts/{id}": {
            "put": {
                "security": [
                    {
                        "OAuth2User": [
                            "accounts:write"
                        ]
                    }
                ],
                "description": "Updates mutable properties of an account. The following properties are possible to update: accountExclusion, accountNumber, excluded, favored, name, type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Account",
                    "ENTERPRISE"
                ],
                "summary": "Update an Account",
                "operationId": "update",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The updated account object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Data%20v1.Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Data%20v1.Account"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation."
                    },
                    "404": {
                        "description": "The account does not exist."
                    }
                }
            }
        },
        "/api/v1/accounts/{id}/balances": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "balances:read"
                        ]
                    }
                ],
                "description": "Returns an object with the account’s balances.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Account",
                    "ENTERPRISE",
                    "BETA"
                ],
                "summary": "Get balances for account",
                "operationId": "getBalances",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Balances"
                        }
                    },
                    "404": {
                        "description": "The account does not exist, or no balances available."
                    }
                }
            }
        },
        "/api/v1/authorization/hooks": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "user:web_hooks"
                        ]
                    }
                ],
                "description": "(DEPRECATED) List the registered webhooks for the given user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events v1.Webhook",
                    "ENTERPRISE"
                ],
                "summary": "List Webhooks",
                "operationId": "listHooks",
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OAuth2WebHookResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "user:web_hooks"
                        ]
                    }
                ],
                "description": "(DEPRECATED) Create a new webhook for the authenticated user, giving the possibility to get pushed updates for certain events. Creating a new webhook will remove the existing one.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events v1.Webhook",
                    "ENTERPRISE"
                ],
                "summary": "Create Webhook",
                "operationId": "createHook",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "The specifics of the webhook to create",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OAuth2WebHook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Events%20v1.Webhook"
                        }
                    }
                }
            }
        },
        "/api/v1/authorization/hooks/{id}": {
            "delete": {
                "security": [
                    {
                        "OAuth2": [
                            "user:web_hooks"
                        ]
                    }
                ],
                "description": "(DEPRECATED) Delete the webhook of the given ID.",
                "tags": [
                    "Events v1.Webhook",
                    "ENTERPRISE"
                ],
                "summary": "Delete Webhook",
                "operationId": "deleteHook",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the webhook",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/v1/balance-refresh": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "balance-refresh"
                        ]
                    }
                ],
                "description": "Request a balance refresh for an account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v1.Balance Refresh",
                    "BETA",
                    "REGION.US"
                ],
                "summary": "Request Balance Refresh",
                "operationId": "triggerBalanceRefresh_1",
                "parameters": [
                    {
                        "x-examples": null,
                        "name": "BalanceRefreshRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BalanceRefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BalanceRefreshResponse"
                        },
                        "examples": {
                            "application/json": {
                                "balanceRefreshId": "f45dbb0a61124104a1ac517908812e87",
                                "credentialId": "6e68cc6287704273984567b3300c5822"
                            }
                        }
                    },
                    "400": {
                        "description": "empty or invalid mandatory parameter (accountId)",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "6e68cc6287704273984567b3300c5822",
                                "invalidParams": [
                                    {
                                        "name": "accountId",
                                        "reason": "The accountId provided is either invalid or empty, please add a valid accountId"
                                    }
                                ],
                                "title": "Invalid request params",
                                "type": "urn:errors:invalid-argument"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/balance-refresh/{refreshId}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "balance-refresh:readonly"
                        ]
                    }
                ],
                "description": "Get the status of a balance refresh.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v1.Balance Refresh",
                    "BETA",
                    "REGION.US"
                ],
                "summary": "Get Balance Refresh Status",
                "operationId": "fetchBalanceRefreshStatus",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "f45dbb0a61124104a1ac517908812e87",
                        "description": "Balance refresh ID.",
                        "name": "refreshId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/BalanceRefreshStatusResponse"
                        },
                        "examples": {
                            "application/json": {
                                "status": "FINISHED"
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid credentials.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Please create a valid credential by going through the account check flow again.",
                                "instance": "6e68cc6287704273984567b3300c5822",
                                "title": "Invalid credential",
                                "type": "urn:errors:invalid-credentials"
                            }
                        }
                    },
                    "429": {
                        "description": "quota exceeded",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "You have reached the quota of 5 balance refreshes per 2 hours.",
                                "instance": "6e68cc6287704273984567b3300c5822",
                                "title": "Too Many Requests",
                                "type": "about:errors:too-many-requests"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/budgets": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:read"
                        ]
                    }
                ],
                "description": "List all budgets for the user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "List budgets",
                "operationId": "listBudgets",
                "parameters": [
                    {
                        "type": "boolean",
                        "x-example": true,
                        "description": "Whether to include archived budgets or not in the response.",
                        "name": "includeArchived",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Successful response",
                        "schema": {
                            "$ref": "#/definitions/ListBudgetSpecificationsResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            }
        },
        "/api/v1/budgets/one-off": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:write"
                        ]
                    }
                ],
                "description": "Creates a budget for a specific date interval.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "Create one-off budget",
                "operationId": "createOneOffBudget",
                "parameters": [
                    {
                        "x-examples": null,
                        "description": "The one off budget to be created.",
                        "name": "CreateOneOffBudgetRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOneOffBudgetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Successful response",
                        "schema": {
                            "$ref": "#/definitions/CreateBudgetResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            }
        },
        "/api/v1/budgets/recommended": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:read"
                        ]
                    }
                ],
                "description": "List budget recommendations based on spending patterns.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "List recommended budgets",
                "operationId": "recommendedBudget",
                "responses": {
                    "200": {
                        "description": "A Successful response",
                        "schema": {
                            "$ref": "#/definitions/ListRecommendedBudgetResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            }
        },
        "/api/v1/budgets/recurring": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:write"
                        ]
                    }
                ],
                "description": "Creates a recurring budget with a set periodicity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "Create recurring budget",
                "operationId": "createRecurringBudget",
                "parameters": [
                    {
                        "x-examples": null,
                        "description": "Create budget with the requested fields.",
                        "name": "CreateRecurringBudgetRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateRecurringBudgetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Successful response",
                        "schema": {
                            "$ref": "#/definitions/CreateBudgetResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            }
        },
        "/api/v1/budgets/summaries": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:read"
                        ]
                    }
                ],
                "description": "List all budgets for the user including current period for each budget.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "List budgets with summaries",
                "operationId": "listBudgetWithSummaries",
                "parameters": [
                    {
                        "type": "boolean",
                        "x-example": true,
                        "description": "Whether to include archived budgets or not in the response.",
                        "name": "includeArchived",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Successful response",
                        "schema": {
                            "$ref": "#/definitions/ListBudgetWithSummariesResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            }
        },
        "/api/v1/budgets/{id}": {
            "put": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:write"
                        ]
                    }
                ],
                "description": "Updates the specified budget.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "Update budget",
                "operationId": "updateBudget",
                "parameters": [
                    {
                        "x-examples": null,
                        "description": "Update the budget with the requested fields.",
                        "name": "UpdateBudgetRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateBudgetRequest"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "e2b746ed27c542ce846a8d693474df21",
                        "description": "Budget id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Successful response",
                        "schema": {
                            "$ref": "#/definitions/UpdateBudgetResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "If any of the request parameters is incorrect or missing",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "404": {
                        "description": "Budget not found",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:write"
                        ]
                    }
                ],
                "description": "Deletes the specified budget.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "Delete budget",
                "operationId": "deleteBudget",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "e2b746ed27c542ce846a8d693474df21",
                        "description": "Budget id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Budget deleted",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "*/*": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "*/*": null
                        }
                    },
                    "404": {
                        "description": "Budget not found",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "*/*": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "*/*": null
                        }
                    }
                }
            }
        },
        "/api/v1/budgets/{id}/archive": {
            "put": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:write"
                        ]
                    }
                ],
                "description": "Archives the specified budget.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "Archive budget",
                "operationId": "archiveBudget",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "e2b746ed27c542ce846a8d693474df21",
                        "description": "Budget id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Budget was archived successfully",
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.Budgets"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "If any of the request parameters is incorrect or missing",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "404": {
                        "description": "Budget not found",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            }
        },
        "/api/v1/budgets/{id}/details": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:read"
                        ]
                    }
                ],
                "description": "Get the specified budget and its periods within the start and end\ndates. The date parameters are inclusive, thus specifying a date in\nthe middle of a period will include the complete period amounts.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "Get budget details",
                "operationId": "getBudgetDetails",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "e2b746ed27c542ce846a8d693474df21",
                        "description": "Budget id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "x-example": 1549976786000,
                        "description": "Date within the first period expressed as UTC epoch timestamp in milliseconds.",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "x-example": 1549976786000,
                        "description": "Date within the last period expressed as UTC epoch timestamp in milliseconds.",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Successful response",
                        "schema": {
                            "$ref": "#/definitions/GetBudgetDetailsResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "404": {
                        "description": "Budget not found",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            }
        },
        "/api/v1/budgets/{id}/transactions": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "budgets:read"
                        ]
                    }
                ],
                "description": "List all transactions for the specified budget within the start and end date.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Budgets",
                    "ENTERPRISE"
                ],
                "summary": "Get budget transactions",
                "operationId": "getBudgetTransactions",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "e2b746ed27c542ce846a8d693474df21",
                        "description": "Budget id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "x-example": 1549976787000,
                        "description": "Query start date expressed as UTC epoch timestamp in milliseconds.",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "x-example": 1549976787000,
                        "description": "Query end date expressed as UTC epoch timestamp in milliseconds.",
                        "name": "end",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Successful response",
                        "schema": {
                            "$ref": "#/definitions/ListBudgetTransactionsResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "404": {
                        "description": "Budget not found",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "500": {
                        "description": "For any unspecified error",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "application/json": null
                        }
                    }
                }
            }
        },
        "/api/v1/calendar/periods": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "calendar:read"
                        ]
                    }
                ],
                "description": "Get a list of detailed periods from a given start period to an end period. Will always return one of the monthly resolutions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General.Calendar",
                    "ENTERPRISE"
                ],
                "summary": "Query Period details",
                "operationId": "listPeriods",
                "parameters": [
                    {
                        "enum": [
                            "YYYY-MM-DD"
                        ],
                        "type": "string",
                        "description": "Date inside the start period. No greater than 10 years.",
                        "name": "period_gte",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "YYYY-MM-DD"
                        ],
                        "type": "string",
                        "description": "Date inside the end period. No later than 10 years.",
                        "name": "period_lte",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The periods were successfully returned.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/General.Calendar"
                            }
                        }
                    },
                    "400": {
                        "description": "A period query parameter format is invalid or period_gte is after period_lte or it is out of range.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/calendar/periods/{period}": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "calendar:read"
                        ]
                    }
                ],
                "description": "Get details for the supplied period. Will always return one of the monthly resolutions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General.Calendar",
                    "ENTERPRISE"
                ],
                "summary": "Get period details",
                "operationId": "getPeriod",
                "parameters": [
                    {
                        "enum": [
                            "YYYY",
                            "YYYY-MM",
                            "YYYY-MM-DD"
                        ],
                        "type": "string",
                        "description": "Period to get details for",
                        "name": "period",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The periods were successfully returned.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/General.Calendar"
                            }
                        }
                    },
                    "400": {
                        "description": "The period format is invalid.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/categories": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "user:read"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "user:read"
                        ]
                    }
                ],
                "description": "\u003cb\u003eThe \u003ci\u003euser:read\u003c/i\u003e scope is necessary for authenticated requests.\u003c/b\u003e\n\nReturns all categories corresponding to a specified locale. The locale is determined based on the authenticated user. If there's no authenticated user, the locale will be based on the query parameter. In the absence of both an authenticated user and a query parameter, a default locale will be used. Please note that the category IDs are returned as UUIDs without any dashes.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General.Category"
                ],
                "summary": "List categories",
                "operationId": "listCategories",
                "parameters": [
                    {
                        "type": "string",
                        "default": "en_US",
                        "x-example": "sv_SE",
                        "description": "The locale for which to fetch categories.",
                        "name": "locale",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The categories were successfully returned.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/General.Category",
                                "allowEmptyValue": null,
                                "position": null
                            }
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "*/*": null
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object",
                            "allowEmptyValue": null
                        },
                        "examples": {
                            "*/*": null
                        }
                    }
                }
            }
        },
        "/api/v1/credentials": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:write"
                        ]
                    }
                ],
                "description": "Creates the Credentials for the user. The create request will trigger a refresh towards the provider.",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Connectivity v1.Credentials",
                    "ENTERPRISE"
                ],
                "summary": "Create credentials",
                "operationId": "create",
                "parameters": [
                    {
                        "description": "The credentials to create. Only providerName and fields are required.",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CreateCredentialsRequest"
                        }
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "CHECKING_ACCOUNTS",
                                "CHECKING_TRANSACTIONS",
                                "SAVING_ACCOUNTS",
                                "SAVING_TRANSACTIONS",
                                "CREDITCARD_ACCOUNTS",
                                "CREDITCARD_TRANSACTIONS",
                                "LOAN_ACCOUNTS",
                                "LOAN_TRANSACTIONS",
                                "INVESTMENT_ACCOUNTS",
                                "INVESTMENT_TRANSACTIONS",
                                "EINVOICES (DEPRECATED)",
                                "TRANSFER_DESTINATIONS",
                                "IDENTITY_DATA",
                                "LIST_BENEFICIARIES (DEPRECATED)"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": "CHECKING_ACCOUNTS,CHECKING_TRANSACTIONS,SAVING_ACCOUNTS,SAVING_TRANSACTIONS,CREDITCARD_ACCOUNTS,CREDITCARD_TRANSACTIONS,LOAN_ACCOUNTS,LOAN_TRANSACTIONS,INVESTMENT_ACCOUNTS,INVESTMENT_TRANSACTIONS,EINVOICES (DEPRECATED),TRANSFER_DESTINATIONS,IDENTITY_DATA,LIST_BENEFICIARIES (DEPRECATED)",
                        "description": "The data types to aggregate from the provider. Multiple items are allowed and are passed as: items=item1\u0026items=item2. If omitted, all data types are aggregated.",
                        "name": "items",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The credentials was successfully created.",
                        "schema": {
                            "$ref": "#/definitions/Connectivity%20v1.Credentials"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation or the user could not be authenticated."
                    },
                    "404": {
                        "description": "The provider could not be found."
                    },
                    "409": {
                        "description": "There is already a credentials with the same provider name and same values of the fields."
                    }
                }
            }
        },
        "/api/v1/credentials/list": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:read"
                        ]
                    }
                ],
                "description": "List all credentials for the user.",
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Connectivity v1.Credentials"
                ],
                "summary": "List credentials",
                "operationId": "getCredentialsList",
                "responses": {
                    "200": {
                        "description": "The list of credentials was successfully returned.",
                        "schema": {
                            "$ref": "#/definitions/CredentialsListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/credentials/third-party/callback/relayed": {
            "post": {
                "description": "Send url-decoded callback information from an ASPSP. This endpoint will return the registered redirect uri as response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v1.Credentials",
                    "ENTERPRISE"
                ],
                "summary": "Third-party callback with redirect",
                "operationId": "thirdPartyCallbackRelayedPost",
                "parameters": [
                    {
                        "description": "The callback response from the ASPSP with JSON format.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CallbackRelayedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The callback request was successful.",
                        "schema": {
                            "$ref": "#/definitions/CallbackRelayedResponse"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation."
                    }
                }
            }
        },
        "/api/v1/credentials/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:read"
                        ]
                    }
                ],
                "description": "Gets credentials by ID.",
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Connectivity v1.Credentials"
                ],
                "summary": "Get credentials",
                "operationId": "get",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of the credentials to get",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The credentials was successfully returned.",
                        "schema": {
                            "$ref": "#/definitions/Connectivity%20v1.Credentials"
                        }
                    },
                    "404": {
                        "description": "The credentials could not be found."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:write"
                        ]
                    }
                ],
                "description": "Modify the specified credentials. The request will trigger a refresh towards the provider.",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Connectivity v1.Credentials",
                    "ENTERPRISE"
                ],
                "summary": "Modify credentials",
                "operationId": "update",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of the credentials to change",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The new credentials object.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateCredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The credentials was successfully modified.",
                        "schema": {
                            "$ref": "#/definitions/Connectivity%20v1.Credentials"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation."
                    },
                    "409": {
                        "description": "Another ongoing request is in progress."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:write"
                        ]
                    }
                ],
                "description": "Deletes the given credentials. The deletion is partly done asynchronously.",
                "tags": [
                    "Connectivity v1.Credentials",
                    "ENTERPRISE"
                ],
                "summary": "Delete credentials",
                "operationId": "delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of the credentials to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The credentials has been successfully sent for deletion."
                    },
                    "404": {
                        "description": "The credentials could not be found."
                    }
                }
            }
        },
        "/api/v1/credentials/{id}/accounts-selection": {},
        "/api/v1/credentials/{id}/authenticate": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:refresh"
                        ]
                    }
                ],
                "description": "Triggers a full authentication flow to renew refresh tokens with ASPSPs. This endpoint only triggers authentication, thus a full credentials refresh will not be executed.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v1.Credentials",
                    "ENTERPRISE"
                ],
                "summary": "Manual authenticate of credentials",
                "operationId": "manualAuthentication",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "2d3bd65493b549e1927d97a2d0683ab9",
                        "description": "The internal identifier of the `Credentials` object to authenticate.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Manual authentication object.",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ManualAuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The credentials authentication was successfully initiated."
                    },
                    "404": {
                        "description": "The credentials could not be found."
                    }
                }
            }
        },
        "/api/v1/credentials/{id}/qr": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:read"
                        ]
                    }
                ],
                "description": "QR code for authentication flows such as Mobile BankID as base64 encoded PNG. Includes `data:image/png;base64,`.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Connectivity v1.Credentials"
                ],
                "summary": "Get QR code",
                "operationId": "qrAsBase64",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The QR code was successfully returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation."
                    },
                    "404": {
                        "description": "Could not find the autostarttoken."
                    }
                }
            }
        },
        "/api/v1/credentials/{id}/refresh": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:refresh"
                        ]
                    }
                ],
                "description": "Refreshes the specified credentials. Please note that there can be only one on-demand refresh ongoing for a credential at a time,  any other attempts will be rejected. ",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v1.Credentials",
                    "ENTERPRISE",
                    "REGION.US"
                ],
                "summary": "Refresh credentials",
                "operationId": "refresh",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "2d3bd65493b549e1927d97a2d0683ab9",
                        "description": "The internal identifier of the `Credentials` object to refresh.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The credentials object to refresh.",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RefreshCredentialsRequest"
                        }
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "CHECKING_ACCOUNTS",
                                "CHECKING_TRANSACTIONS",
                                "SAVING_ACCOUNTS",
                                "SAVING_TRANSACTIONS",
                                "CREDITCARD_ACCOUNTS",
                                "CREDITCARD_TRANSACTIONS",
                                "LOAN_ACCOUNTS",
                                "LOAN_TRANSACTIONS",
                                "INVESTMENT_ACCOUNTS",
                                "INVESTMENT_TRANSACTIONS",
                                "EINVOICES (DEPRECATED)",
                                "TRANSFER_DESTINATIONS",
                                "IDENTITY_DATA",
                                "LIST_BENEFICIARIES (DEPRECATED)"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": "CHECKING_ACCOUNTS,CHECKING_TRANSACTIONS,SAVING_ACCOUNTS,SAVING_TRANSACTIONS,CREDITCARD_ACCOUNTS,CREDITCARD_TRANSACTIONS,LOAN_ACCOUNTS,LOAN_TRANSACTIONS,INVESTMENT_ACCOUNTS,INVESTMENT_TRANSACTIONS,EINVOICES (DEPRECATED),TRANSFER_DESTINATIONS,IDENTITY_DATA,LIST_BENEFICIARIES (DEPRECATED)",
                        "description": "The data types to aggregate from the Provider. Multiple items are allowed. If omitted, all data types are aggregated.",
                        "name": "items",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "x-example": "optIn=true",
                        "description": "Set to true to trigger an opt-in of accounts before doing the refresh. Today only available for enterprise customers.",
                        "name": "optIn",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "x-example": "authenticate=true",
                        "description": "Set to true to trigger authentication flow before doing the refresh.",
                        "name": "authenticate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The credentials refresh was successfully initiated."
                    },
                    "404": {
                        "description": "The credentials could not be found."
                    }
                }
            }
        },
        "/api/v1/credentials/{id}/supplemental-information": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "credentials:refresh"
                        ]
                    }
                ],
                "description": "Adds supplemental information to an authentication.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v1.Credentials",
                    "ENTERPRISE"
                ],
                "summary": "Add Supplemental Information",
                "operationId": "supplemental",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The supplemental information.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SupplementalInformation"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The supplemental information was successfully sent."
                    },
                    "404": {
                        "description": "The credentials could not be found."
                    }
                }
            }
        },
        "/api/v1/credentials/{id}:select-accounts": {},
        "/api/v1/identities": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "identity:read"
                        ]
                    }
                ],
                "description": "Lists the available identity data from each provider for a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Identity"
                ],
                "summary": "List identity data",
                "operationId": "listIdentityData",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "schema": {
                            "$ref": "#/definitions/Identities.v2.ListIdentitiesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "$ref": "#/definitions/Identities.v1.ListIdentitiesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/Identities.v1.ListIdentitiesResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/Identities.v1.ListIdentitiesResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/insights": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "insights:read"
                        ]
                    }
                ],
                "description": "Lists all insights for the user. Listing insights will automatically apply any title and description overrides [configured using the Tink Console](https://docs.tink.com/resources/money-manager/money-manager-api/configure-actionable-insights). Trying to list insights with a [user locale](https://docs.tink.com/api#general/user/the-user-model/userprofile) that does not yet have a insight configuration will result in the insights being filtered out and not returned. This is to prevent exposing users to insights with text written in the wrong language. You can read more about configuring insights [here](https://docs.tink.com/resources/money-manager/money-manager-api/configure-actionable-insights).",
                "tags": [
                    "Finance Management.Actionable Insight",
                    "ENTERPRISE"
                ],
                "summary": "List insights",
                "operationId": "list",
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for a successful operation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Finance%20Management.Actionable%20Insight"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` for any unexpected error that occurs when trying to fetch insights."
                    }
                }
            }
        },
        "/api/v1/insights/action": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "insights:write"
                        ]
                    }
                ],
                "description": "Report a user action on an insight and move the insight to an archived state.",
                "tags": [
                    "Finance Management.Actionable Insight",
                    "ENTERPRISE"
                ],
                "summary": "Take action on an insight",
                "operationId": "selectInsightAction",
                "parameters": [
                    {
                        "description": "The insight action that should be selected.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SelectInsightActionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returns `204 No Content` for a successful operation."
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if any of the request parameters are incorrect or missing."
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the provided id does not correspond to an active insight."
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` for any unexpected error that occurs when trying to take action on an insight."
                    }
                }
            }
        },
        "/api/v1/insights/archived": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "insights:read"
                        ]
                    }
                ],
                "description": "Lists all archived insights for the user. An insight is archived when a user takes action on it.",
                "tags": [
                    "Finance Management.Actionable Insight",
                    "ENTERPRISE"
                ],
                "summary": "List archived insights",
                "operationId": "listArchivedInsights",
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for a successful operation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ArchivedInsight"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` for any unexpected error that occurs when trying to fetch archived insights."
                    }
                }
            }
        },
        "/api/v1/insights/{id}/archive": {
            "put": {
                "security": [
                    {
                        "OAuth2User": [
                            "insights:write"
                        ]
                    }
                ],
                "description": "Move an active insight to an archived state. (DEPRECATED) should use \"POST /api/v1/insights/action\" instead.",
                "tags": [
                    "Finance Management.Actionable Insight",
                    "ENTERPRISE"
                ],
                "summary": "Archive an insight",
                "operationId": "archiveInsight",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "630ff47c3aa841e9a11e7317c8683ca6",
                        "description": "The identifier of the insight that should be archived.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returns `204 No Content` for a successful operation."
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if any of the request parameters are incorrect or missing."
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the provided id does not correspond to an active insight."
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` for any unexpected error that occurs when trying to archive on insight."
                    }
                }
            }
        },
        "/api/v1/investments": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "investments:read"
                        ]
                    }
                ],
                "description": "Returns an object with a list of the authenticated user's portfolios and corresponding financial instruments.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Investment"
                ],
                "summary": "List investments",
                "operationId": "getInvestments",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "ISK",
                                "KF",
                                "DEPOT",
                                "PENSION",
                                "OTHER"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": "ISK, KF, DEPOT, PENSION, OTHER",
                        "description": "The portfolio types to select from aggregated investment data. Multiple types are allowed and are passed as: portfolioType=type1\u0026portfolioType=type2. If omitted, everything is selected.",
                        "name": "portfolioType",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Data%20v1.Investment"
                        }
                    }
                }
            }
        },
        "/api/v1/loans": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "accounts:read"
                        ]
                    }
                ],
                "description": "Get all the loans for a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Loan"
                ],
                "summary": "Get loans",
                "operationId": "getLoans",
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LoanResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/query": {
            "post": {
                "description": "Queries notifications",
                "tags": [
                    "Finance Management.Notification",
                    "ENTERPRISE"
                ],
                "summary": "Query notifications",
                "operationId": "queryNotifications",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "The query.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/NotificationQueryResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/{id}/read": {
            "post": {
                "description": "Marks a notification as read",
                "tags": [
                    "Finance Management.Notification",
                    "ENTERPRISE"
                ],
                "summary": "Mark a notification as read",
                "operationId": "read",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the notification",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/v1/notifications/{id}/received": {
            "post": {
                "description": "Marks a notification as received (only to be used for acknowledging encrypted notifications)",
                "tags": [
                    "Finance Management.Notification",
                    "ENTERPRISE"
                ],
                "summary": "Mark a notification as received",
                "operationId": "received",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the notification",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/v1/oauth/authorization-grant": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "authorization:grant"
                        ]
                    }
                ],
                "description": "Creates a scoped authorization code for a user.",
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "General.OAuth",
                    "ENTERPRISE",
                    "REGION.US"
                ],
                "summary": "Create authorization",
                "operationId": "authorizationGrant",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "256ae77fcbda4bc2b8d0ba94d9c3423c",
                        "description": "User ID. Cannot be specified at the same time as `external_user_id`.",
                        "name": "user_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "x-example": "user_123_abc",
                        "description": "External user ID set by client on user creation. Cannot be specified at the same time as `user_id`.",
                        "name": "external_user_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "x-example": "accounts:read,transactions:read",
                        "description": "Scope of access. The scope doesn't need to be present on the access token used when calling this endpoint.",
                        "name": "scope",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OAuth2AuthorizeResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/oauth/authorization-grant/delegate": {
            "post": {
                "security": [
                  {
                    "Bearer": []
                  }
                ],
                "description": "Creates a delegated scoped authorization code for a user. The difference between this and `authorization-grant` is that this endpoint allows the client to specify an actor client that is allowed to use the authorization code. This is useful when a client wants to delegate access to another client.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General.OAuth",
                    "ENTERPRISE",
                    "REGION.US"
                ],
                "summary": "Create delegated authorization",
                "operationId": "authorizationDelegate",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "256ae77fcbda4bc2b8d0ba94d9c3423c",
                        "description": "User ID. Cannot be specified at the same time as `external_user_id`.",
                        "name": "user_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "x-example": "user_123_abc",
                        "description": "External user ID set by client on user creation. Cannot be specified at the same time as `user_id`.",
                        "name": "external_user_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "x-example": "user_123_abc",
                        "description": "Human-readable information about the end-user that the actor client is authorized access to. If using Tink Link with permanent users, this will be presented to the end-user in Tink Link, to be able to verify the identity of the actual user they are interacting with and prevent URL spoofing attacks. You can use any arbitrary string value that is recognizable to the end-user, such as the end-user's full name or e-mail.",
                        "name": "id_hint",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "df05e4b379934cd09963197cc855bfe9",
                        "description": "ID of actor client that is allowed to use the authorization code. Actor client existence is not validated.",
                        "name": "actor_client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "user:read,credentials:write",
                        "description": "Scope of delegated access. The scope doesn't need to be present on the access token used when calling this endpoint.",
                        "name": "scope",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authorization code successfully created.",
                        "schema": {
                            "$ref": "#/definitions/OAuth2AuthorizeResponse"
                        }
                    },
                    "400": {
                        "description": "Request is not following the specification. See body for details."
                    },
                    "401": {
                        "description": "Client either doesn't exist, doesn't have access to the user or isn't allowed to use the scope. See body for details."
                    },
                    "404": {
                        "description": "User doesn't exist."
                    }
                }
            }
        },
        "/api/v1/oauth/revoke-all": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "authorization:revoke"
                        ]
                    }
                ],
                "description": "Revokes all access tokens for a user.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General.OAuth",
                    "ENTERPRISE"
                ],
                "summary": "Revoke all tokens",
                "operationId": "revokeAll",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "256ae77fcbda4bc2b8d0ba94d9c3423c",
                        "description": "User ID. Cannot be specified at the same time as `external_user_id`.",
                        "name": "user_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "x-example": "user_123_abc",
                        "description": "External user ID set by client on user creation. Cannot be specified at the same time as `user_id`.",
                        "name": "external_user_id",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "All tokens successfully revoked."
                    },
                    "400": {
                        "description": "Request is not following the specification. See body for details."
                    },
                    "401": {
                        "description": "Client either doesn't exist or doesn't have access to the user. See body for details."
                    },
                    "404": {
                        "description": "User doesn't exist."
                    }
                }
            }
        },
        "/api/v1/oauth/token": {
            "post": {
                "description": "Access tokens are used to access API resources.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General.OAuth",
                    "REGION.US"
                ],
                "summary": "Get access token",
                "operationId": "token",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "256ae77fcbda4bc2b8d0ba94d9c3423c",
                        "description": "Client ID.",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "bdb8477398074160901ce1c8dd5b7848",
                        "description": "Client secret. Required when the authentication method for client is configured for client secret, forbidden otherwise.",
                        "name": "client_secret",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            "authorization_code",
                            "client_credentials",
                            "urn:ietf:params:oauth:grant-type:jwt-bearer"
                        ],
                        "type": "string",
                        "x-example": "authorization_code",
                        "description": "Grant type.",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "c50cd6960a6f44ffb701ef60fafa7761",
                        "description": "Authorization code that was returned from the authorization flow. Required when grant type is `authorization_code`.",
                        "name": "code",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "x-example": "user:create,authorization:grant",
                        "description": "Scope of access. When grant type is `client_credentials` or `urn:ietf:params:oauth:grant-type:jwt-bearer` can be used to narrow the scope of the token, otherwise if omitted defaults to the client scope.",
                        "name": "scope",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "x-example": "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3Mi[...omitted for brevity...].xlP-MdfO[...omitted for brevity...]",
                        "description": "Signed authorization grant JWT. Required when grant type is `urn:ietf:params:oauth:grant-type:jwt-bearer`.",
                        "name": "assertion",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OAuth2AuthenticationTokenResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payments/providers/{name}/payment-conditions": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "payment:read"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "payment:read"
                        ]
                    }
                ],
                "description": "Returns a `list of payment conditions` for a provider. A `payment condition` is an evaluation that the provider will have to pass for a payment to be successful. The `payment condition` is a combination of a `Rule`, `Operator` and a `Value` to form an evaluation condition that the data sent to the bank must fulfill. These conditions will apply when creating a payment request with Tink Link. Read more about payment conditions in our [guide](https://docs.tink.com/resources/payments/payment-conditions).",
                "tags": [
                    "Connectivity v1.Provider",
                    "BETA"
                ],
                "summary": "Get payment conditions for a provider",
                "operationId": "getPaymentConditions",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "se-bink-thirdpartyapp",
                        "description": "The name of the provider",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of conditions for the given provider is returned.",
                        "schema": {
                            "$ref": "#/definitions/PaymentConditionsResponse"
                        }
                    },
                    "404": {
                        "description": "There were no payment conditions defined for the given provider.",
                        "schema": {
                            "$ref": "#/definitions/PaymentConditionsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payments/requests": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "payment:write"
                        ]
                    }
                ],
                "description": "Create a payment request with the given values. Returns an id which can be used with Tink Link to create a full payment journey for an end-user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Payment.Payment Request"
                ],
                "summary": "Create payment request",
                "operationId": "createPaymentUsingPOST",
                "responses": {
                    "200": {
                        "description": "The payment request was successfully created.",
                        "schema": {
                            "$ref": "#/definitions/RestPaymentResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "One or more of the request parameters is incorrect or missing. The body will contain an error code and error message with more information about what went wrong, see [Payment error codes](https://docs.tink.com/resources/payments/payment-error-codes)"
                    },
                    "401": {
                        "description": "Possible reasons include missing Authorization: Bearer {access token} HTTP header and expired access token."
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/v1/payments/requests/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "payment:read"
                        ]
                    }
                ],
                "description": "Returns the payment request data of the given id.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Payment.Payment Request"
                ],
                "summary": "Get payment request",
                "operationId": "getPaymentUsingGET",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "05788970474211e988ddbd00e216758d",
                        "description": "Tink payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The payment request data was successfully returned.",
                        "schema": {
                            "$ref": "#/definitions/RestPaymentResponse"
                        }
                    },
                    "401": {
                        "description": "Possible reasons include missing Authorization: Bearer {access token} HTTP header and expired access token."
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "The given payment request can not be found. The body will contain an error code and error message with more information about what went wrong, see [Payment error codes](https://docs.tink.com/resources/payments/payment-error-codes)"
                    }
                }
            }
        },
        "/api/v1/payments/requests/{id}/transfers": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "payment:read"
                        ]
                    }
                ],
                "description": "Gets a list of bank transfers for a given payment request id including transfer's latest status. Payment Requests that have no transfers will return with an empty list.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Payment.Payment Request"
                ],
                "summary": "Get transfers for payment request",
                "operationId": "getPaymentRequestTransfersUsingGET",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "05788970474211e988ddbd00e216758d",
                        "description": "Tink payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of bank transfers for a given payment request was successfully returned.",
                        "schema": {
                            "$ref": "#/definitions/RestCreatedTransfersResponse"
                        }
                    },
                    "401": {
                        "description": "Possible reasons include missing Authorization: Bearer {access token} HTTP header and expired access token."
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/v1/payments/{paymentId}/cancellation": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "payment:read"
                        ]
                    }
                ],
                "description": "Returns the cancellation data for a given payment.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "BETA",
                    "Payment.Cancellation"
                ],
                "summary": "Get cancellation data",
                "operationId": "getCancellationUsingGET",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "46229257aae34c96883071b2947b3ee4",
                        "description": "paymentId",
                        "name": "Tink payment ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cancellation data",
                        "schema": {
                            "$ref": "#/definitions/CancellationResponse"
                        }
                    },
                    "401": {
                        "description": "Possible reasons include missing Authorization: Bearer {access token} HTTP header and expired access token."
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Cancellation not found"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "payment:write"
                        ]
                    }
                ],
                "description": "Creates the cancellation resource and initializes the cancellation for a given payment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "BETA",
                    "Payment.Cancellation"
                ],
                "summary": "Begin cancellation",
                "operationId": "beginCancellationUsingPOST",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "46229257aae34c96883071b2947b3ee4",
                        "description": "paymentId",
                        "name": "Tink payment ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "201": {
                        "description": "Cancellation created and initialized"
                    },
                    "400": {
                        "description": "Payment cannot be cancelled"
                    },
                    "401": {
                        "description": "Possible reasons include missing Authorization: Bearer {access token} HTTP header and expired access token."
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Payment not found"
                    },
                    "409": {
                        "description": "Cancellation has already been initiated for this payment"
                    }
                }
            }
        },
        "/api/v1/provider-authentication-options-for-market/{market}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "providers:read"
                        ]
                    }
                ],
                "description": "Retrieves a list of providers with its authentication options for given market",
                "tags": [
                    "Connectivity v1.Provider",
                    "BETA"
                ],
                "summary": "List authentication options for given market",
                "operationId": "ExternalAuthenticationConfigurationService_ListProvidersAuthenticationOptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The market for which you want to get the authentication options.",
                        "name": "market",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ListProvidersAuthenticationOptionsResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/api/v1/provider-authentication-options/{providerName}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "providers:read"
                        ]
                    }
                ],
                "description": "Retrieves the available authentication options for a provider if it has more than one available.",
                "tags": [
                    "Connectivity v1.Provider",
                    "BETA"
                ],
                "summary": "Get the authentication options for a given provider",
                "operationId": "ExternalAuthenticationConfigurationService_GetAuthenticationOptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The provider name for which you want to get the authentication options.",
                        "name": "providerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/GetAuthenticationOptionsResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/api/v1/provider-consents": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "provider-consents:read"
                        ]
                    }
                ],
                "description": "List all provider consents for the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v1.Provider Consent",
                    "REGION.US"
                ],
                "summary": "List Provider Consents",
                "operationId": "list",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AuthenticatedUser"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Optional credentials identifier filter",
                        "name": "credentialsId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The provider-consent was successfully returned.",
                        "schema": {
                            "$ref": "#/definitions/ProviderConsentListResponse"
                        }
                    },
                    "401": {
                        "description": "The user could not be authenticated."
                    },
                    "403": {
                        "description": "You do not have the permission to access this."
                    }
                }
            }
        },
        "/api/v1/provider-consents:extend": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "provider-consents:write"
                        ]
                    }
                ],
                "description": "Extend a consent that is eligible for reconfirmation (sessionExtendable attribute).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v1.Provider Consent",
                    "BETA",
                    "REGION.US"
                ],
                "summary": "Extend a consent",
                "operationId": "extend",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AuthenticatedUser"
                        }
                    },
                    {
                        "description": "The request object.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProviderConsentExtendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The provider-consent was successfully extended and returned.",
                        "schema": {
                            "$ref": "#/definitions/Connectivity%20v1.Provider%20Consent"
                        }
                    },
                    "400": {
                        "description": "The provider-consent was not eligible for extension."
                    },
                    "401": {
                        "description": "The user could not be authenticated."
                    },
                    "403": {
                        "description": "You do not have the permission to access this."
                    },
                    "404": {
                        "description": "Provider-consent not found."
                    }
                }
            }
        },
        "/api/v1/provider-identifiers": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "providers:read"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "providers:read"
                        ]
                    }
                ],
                "description": "Lists identifiers used to identify a financial institution.",
                "tags": [
                    "Connectivity v1.Provider"
                ],
                "summary": "List provider identifiers",
                "operationId": "list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ISO 3166-1 alpha-2 market code to filter provider mappings by.",
                        "name": "marketEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The type of identifier.",
                        "name": "typeEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The value of the identifier being mapped.",
                        "name": "valueEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The name of the provider.",
                        "name": "providerNameEq",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of items to include on each page (default: 50, maximum 1000).",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The value of the nextPageToken from the previous request.",
                        "name": "pageToken",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ListIdentifiersResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/providers": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "credentials:read"
                        ]
                    }
                ],
                "description": "Lists all providers available for a authenticated user.",
                "tags": [
                    "Connectivity v1.Provider"
                ],
                "summary": "List providers",
                "operationId": "list",
                "parameters": [
                    {
                        "enum": [
                            "TRANSFERS",
                            "MORTGAGE_AGGREGATION",
                            "CHECKING_ACCOUNTS",
                            "SAVINGS_ACCOUNTS",
                            "CREDIT_CARDS",
                            "INVESTMENTS",
                            "LOANS",
                            "PAYMENTS",
                            "MORTGAGE_LOAN",
                            "IDENTITY_DATA",
                            "CREATE_BENEFICIARIES",
                            "LIST_BENEFICIARIES",
                            "CREATE_BENEFICIARIES_IN_PAYMENT"
                        ],
                        "type": "string",
                        "description": "Use the capability to only list providers with a specific capability. If no capability the provider response will not be filtered on capability.",
                        "name": "capability",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Defaults to false. If set to `true`, Providers of `TEST` type will be added in the response list.",
                        "name": "includeTestProviders",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Defaults to false. If set to `true`, Providers of type different than `TEST` will be removed from the response list.",
                        "name": "excludeNonTestProviders",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Gets a specific provider from the name. If this query parameter is used, only one or no providers will be returned.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "BACS",
                            "CHAPS",
                            "CZECH_EXPRESS_INTERNAL_TRANSFER",
                            "CZECH_INTERNAL_TRANSFER",
                            "DANISH_DOMESTIC_CREDIT_TRANSFER",
                            "FASTER_PAYMENTS",
                            "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_INTRADAG",
                            "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                            "INSTANT_NORWEGIAN_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                            "INSTANT_POLISH_DOMESTIC_CREDIT_TRANSFER",
                            "MULTIBANCO",
                            "NORWEGIAN_DOMESTIC_CREDIT_TRANSFER",
                            "PAYMENT_CANCELLATION",
                            "PIS_BULK_PAYMENTS",
                            "PIS_FUTURE_DATE",
                            "PIS_MOBILE_AUTO_SIGN",
                            "PIS_SEPA_ICT_RECURRING_PAYMENTS",
                            "PIS_SEPA_RECURRING_PAYMENTS",
                            "PIS_SE_BANK_TRANSFERS",
                            "PIS_SE_BG",
                            "PIS_SE_PG",
                            "POLISH_DOMESTIC_CREDIT_TRANSFER",
                            "PAYPAL",
                            "SEPA_CREDIT_TRANSFER",
                            "SEPA_INSTANT_CREDIT_TRANSFER",
                            "SWISS_DOMESTIC_CREDIT_TRANSFER",
                            "VRP_COMMERCIAL",
                            "VRP_SWEEPING"
                        ],
                        "type": "string",
                        "description": "Use the capability to only list providers with a specific payment capability. If no payment capability the provider response will not be filtered on capability.",
                        "name": "pisCapability",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/*ProviderListResponse*"
                        }
                    }
                }
            }
        },
        "/api/v1/providers/markets": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "providers:read"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "providers:read"
                        ]
                    }
                ],
                "description": "Lists all markets where there are providers available.",
                "tags": [
                    "Connectivity v1.Provider"
                ],
                "summary": "List markets",
                "operationId": "listMarkets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The OAuth2 Client ID",
                        "name": "X-Tink-OAuth-Client-ID",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ProviderMarketListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/providers/{market}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "providers:read"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "providers:read"
                        ]
                    }
                ],
                "description": "Lists all providers on a specified market. Your authentication affects the list of providers you get: When authenticated, the result will only contain providers available for that user. When unauthenticated and without passing The OAuth2 Client ID header, you get all providers made available for the entire environment. If you are unauthenticated but you include The OAuth2 Client ID header, you will get providers available for the app with the given client id.",
                "tags": [
                    "Connectivity v1.Provider"
                ],
                "summary": "List providers for a market",
                "operationId": "listByMarket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The OAuth2 Client ID",
                        "name": "X-Tink-OAuth-Client-ID",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The ISO 3166-1 alpha-2 market code.",
                        "name": "market",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "en-US",
                        "description": "Language to translate to. An IETF BCP 47 language tag.",
                        "name": "Accept-Language",
                        "in": "header"
                    },
                    {
                        "type": "boolean",
                        "description": "Defaults to false. If set to `true`, Providers of `TEST` type will be added in the response list.",
                        "name": "includeTestProviders",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Defaults to false. If set to `true`, Providers of type different than `TEST` will be removed from the response list.",
                        "name": "excludeNonTestProviders",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "TRANSFERS",
                            "MORTGAGE_AGGREGATION",
                            "CHECKING_ACCOUNTS",
                            "SAVINGS_ACCOUNTS",
                            "CREDIT_CARDS",
                            "INVESTMENTS",
                            "LOANS",
                            "PAYMENTS",
                            "MORTGAGE_LOAN",
                            "IDENTITY_DATA",
                            "CREATE_BENEFICIARIES",
                            "LIST_BENEFICIARIES",
                            "CREATE_BENEFICIARIES_IN_PAYMENT"
                        ],
                        "type": "string",
                        "description": "Use the capability to only list providers with a specific capability. If no capability the provider response will not be filtered on capability.",
                        "name": "capability",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "BACS",
                            "CHAPS",
                            "CZECH_EXPRESS_INTERNAL_TRANSFER",
                            "CZECH_INTERNAL_TRANSFER",
                            "DANISH_DOMESTIC_CREDIT_TRANSFER",
                            "FASTER_PAYMENTS",
                            "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_INTRADAG",
                            "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                            "INSTANT_NORWEGIAN_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                            "INSTANT_POLISH_DOMESTIC_CREDIT_TRANSFER",
                            "MULTIBANCO",
                            "NORWEGIAN_DOMESTIC_CREDIT_TRANSFER",
                            "PAYMENT_CANCELLATION",
                            "PIS_BULK_PAYMENTS",
                            "PIS_FUTURE_DATE",
                            "PIS_MOBILE_AUTO_SIGN",
                            "PIS_SEPA_ICT_RECURRING_PAYMENTS",
                            "PIS_SEPA_RECURRING_PAYMENTS",
                            "PIS_SE_BANK_TRANSFERS",
                            "PIS_SE_BG",
                            "PIS_SE_PG",
                            "POLISH_DOMESTIC_CREDIT_TRANSFER",
                            "PAYPAL",
                            "SEPA_CREDIT_TRANSFER",
                            "SEPA_INSTANT_CREDIT_TRANSFER",
                            "SWISS_DOMESTIC_CREDIT_TRANSFER",
                            "VRP_COMMERCIAL",
                            "VRP_SWEEPING"
                        ],
                        "type": "string",
                        "description": "Use the capability to only list providers with a specific payment capability. If no payment capability the provider response will not be filtered on capability.",
                        "name": "pisCapability",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/*ProviderListResponse*"
                        }
                    }
                }
            }
        },
        "/api/v1/reports-generation-jobs/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "reports-generation-jobs:readonly"
                        ]
                    }
                ],
                "description": "Fetch reports generation job",
                "tags": [
                    "BETA",
                    "General.Reports Generation Jobs"
                ],
                "summary": "Fetch reports generation job",
                "operationId": "get",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "schema": {
                            "$ref": "#/definitions/ReportsGenerationJob"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Reports generation job with requested ID was not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:read"
                        ]
                    }
                ],
                "description": "List the user's Savings Goals.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "List Savings Goals",
                "operationId": "listSavingsGoals",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "x-example": 10,
                        "description": "(Optional) Size of the page to fetch.",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": "MQ==",
                        "description": "(Optional) The first token is presented on the response of the first call if there are multiple pages.",
                        "name": "page_token",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "CREATED",
                                "IN_PROGRESS",
                                "COMPLETED",
                                "ARCHIVED"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Filter Savings Goals by status. If left out, it will by default, filter out \u003ccode\u003eARCHIVED\u003c/code\u003e Savings Goals. The status of a Saving Goal changes from \u003ccode\u003eCREATED\u003c/code\u003e to \u003ccode\u003eIN_PROGRESS\u003c/code\u003e just after the first deposit of fund to it.",
                        "name": "status_in",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "Filter the list of Savings Goals by account ids.",
                        "name": "account_in",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list Savings Goals.",
                        "schema": {
                            "$ref": "#/definitions/ListSavingsGoalsResponse"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:write"
                        ]
                    }
                ],
                "description": "Create a new Savings Goal.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "Create Savings Goal",
                "operationId": "create",
                "parameters": [
                    {
                        "name": "Finance Management.Savings Goals Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.Savings%20Goals%20Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The successfully created Savings Goal.",
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.Savings%20Goals%20Response"
                        }
                    },
                    "400": {
                        "description": "Request is not following the specification. See body for details.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/accounts/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:read"
                        ]
                    }
                ],
                "description": "Get Account by ID from a Savings Goals domain.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "Get Account",
                "operationId": "getAccount",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Account with actual balance and unallocated funds available for Savings Goals to allocate.",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Account not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/accounts/{id}/allocations": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:read"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "List allocations by Account",
                "operationId": "listAllocationsByAccount",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The Savings Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "x-example": 10,
                        "description": "(Optional) Size of the page to fetch.",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": "MQ==",
                        "description": "(Optional) The first token is presented on the response of the first call if there are multiple pages.",
                        "name": "page_token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of allocations withdraw from, and deposit to, the Account.",
                        "schema": {
                            "$ref": "#/definitions/ListAllocationsResponse"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Account not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/allocations/fund:reallocate": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:write"
                        ]
                    }
                ],
                "description": "ReAllocate amount from a Savings Goal to another Savings Goal.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "ReAllocate amount",
                "operationId": "reallocateAmount",
                "parameters": [
                    {
                        "name": "ReAllocateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReAllocateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The reallocation allocation.",
                        "schema": {
                            "$ref": "#/definitions/Allocation"
                        }
                    },
                    "400": {
                        "description": "Request is not following the specification. See body for details.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/categories": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:read"
                        ]
                    }
                ],
                "description": "List all available categories.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "List categories",
                "operationId": "listCategories",
                "responses": {
                    "200": {
                        "description": "The list of all available categories that can be set on a Savings Goal.",
                        "schema": {
                            "$ref": "#/definitions/ListCategoriesResponse"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:read"
                        ]
                    }
                ],
                "description": "Get Savings Goal by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "Get Savings Goal",
                "operationId": "getSavingsGoal",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The Savings Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Savings Goal.",
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.Savings%20Goals%20Response"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:write"
                        ]
                    }
                ],
                "description": "Update a Savings Goal.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "Update Savings Goal",
                "operationId": "updateSavingsGoal",
                "parameters": [
                    {
                        "name": "Finance Management.Savings Goals Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.Savings%20Goals%20Request"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The Savings Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Savings Goal.",
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.Savings%20Goals%20Response"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/{id}/allocations": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:read"
                        ]
                    }
                ],
                "description": "List allocations by Savings Goal.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "List allocations",
                "operationId": "listAllocations",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The Savings Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "x-example": 10,
                        "description": "(Optional) Size of the page to fetch.",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": "MQ==",
                        "description": "(Optional) The first token is presented on the response of the first call if there are multiple pages.",
                        "name": "page_token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of allocations.",
                        "schema": {
                            "$ref": "#/definitions/ListAllocationsResponse"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/{id}/allocations/fund:deposit": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:write"
                        ]
                    }
                ],
                "description": "Deposit amount to a Savings Goal. If this is the first deposit to this Savings Goal the status will transition from \u003ccode\u003eCREATED\u003c/code\u003e to \u003ccode\u003eIN_PROGRESS\u003c/code\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "Deposit to Savings Goal",
                "operationId": "depositAllocation",
                "parameters": [
                    {
                        "name": "Amount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Amount"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The Savings Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The deposit Allocation.",
                        "schema": {
                            "$ref": "#/definitions/Allocation"
                        }
                    },
                    "400": {
                        "description": "Request is not following the specification. See body for details.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/{id}/allocations/fund:withdraw": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:write"
                        ]
                    }
                ],
                "description": "Withdraw amount from a Savings Goal.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "Withdraw from Savings Goal",
                "operationId": "withdraw",
                "parameters": [
                    {
                        "name": "Amount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Amount"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The Savings Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The withdraw Allocation.",
                        "schema": {
                            "$ref": "#/definitions/Allocation"
                        }
                    },
                    "400": {
                        "description": "Request is not following the specification. See body for details.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/{id}/period_progress": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:read"
                        ]
                    }
                ],
                "description": "Get a list of periodProgresses, based on Users \u003ccode\u003eperiodMode\u003c/code\u003e between the Savings Goal \u003ccode\u003ecreateTime\u003c/code\u003e and \u003ccode\u003etargetDate\u003c/code\u003e.\u003cbr /\u003eIf no targetDate is set on the Savings Goal, it will return PeriodProgresses between createTime and the current date",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "List periods progress",
                "operationId": "listPeriodsProgress",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The Savings Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "x-example": 10,
                        "description": "(Optional) Size of the page to fetch.",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": "MQ==",
                        "description": "(Optional) The first token is presented on the response of the first call if there are multiple pages.",
                        "name": "page_token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of PeriodProgresses between the createTime and targetDate.",
                        "schema": {
                            "$ref": "#/definitions/ListPeriodProgressResponse"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/{id}:archive": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:write"
                        ]
                    }
                ],
                "description": "Archive a Savings Goal.\u003cbr /\u003eAll funds will be withdrawn from the Savings Goal and \u003ccode\u003estatus\u003c/code\u003e changed to \u003ccode\u003eARCHIVED\u003c/code\u003e.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "Archive Savings Goal",
                "operationId": "archive",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Savings Goal with status changed \u003ccode\u003estatus\u003c/code\u003e to \u003ccode\u003eARCHIVED\u003c/code\u003e.",
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.Savings%20Goals%20Response"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/savings-goals/{id}:complete": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "savings-goals:write"
                        ]
                    }
                ],
                "description": "Mark a Savings Goal as Completed\u003cbr /\u003eNo more allocations can be made from or to this goal.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Savings Goals",
                    "ENTERPRISE"
                ],
                "summary": "Complete Savings Goal",
                "operationId": "complete",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "The Savings Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Savings Goal with status changed \u003ccode\u003estatus\u003c/code\u003e to \u003ccode\u003eCOMPLETED\u003c/code\u003e.",
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.Savings%20Goals%20Response"
                        }
                    },
                    "400": {
                        "description": "Request is not following the specification. See body for details.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Savings Goal not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/search": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Queries transactions based on multiple parameters and returns a response containing transactions and their corresponding statistics matching the query. The query contains both fixed parameters and parameters parsed from the free text `queryString`. All the commands below are typically applied per word in the query and if multiple commands are found, they are concatenated with an `AND` operation (`OR` does not exist).\n\n### Query string commands\n\nType |  Description | Keywords\n---- | ----------------- | -----------------\nTags | Searches specifically for transactions with tags.| Words starting with '#'.\nAmount Span | Searches for transactions within the given amount span. Keywords here depend on the locality of the user. | `over`, `under`, `more than`, `less than`, `around`\nDate/Time Span | Searches for transactions within the given date/time span. Keywords here depend on the locality of the user. | `weekdays`, `weekends`, `today`, `yesterday`, `this week/month/year`, `last week/month/year`, `week #`.\nCategory | Searches specifically for transactions with the specified category. Keywords here depend on the locality of the user. | `Restaurant`, `Bar`\n",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Data v1.Search"
                ],
                "summary": "Query transactions",
                "operationId": "searchQuery",
                "parameters": [
                    {
                        "description": "The search query.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SearchQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/SearchResponse"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation."
                    }
                }
            }
        },
        "/api/v1/statistics/query": {
            "post": {
                "security": [
                    {
                        "OAuth2": [
                            "statistics:read"
                        ]
                    }
                ],
                "description": "By querying the statistics endpoint, an API customer can select the specific types of data to access. The statistics query should be posted in the request body and you can specify any of the properties available to filter the result set. Defining multiple properties will yield an `AND` operation, and specifying multiple values of a property will yield an `OR` operation.\n\nTransfers and upcoming transactions are always excluded from statistics calculations.\n\nAdditionally statistics can be generated on further filtered set of  transactions. They can be filtered using tags that should be provided in tags field in request payload. When defining multiple tags they are treated as a logical expression with OR operator e.g. `[\"Cinema\", \"Theater\"]` would be treated as Cinema OR Theater. If no tags are provided there is no filtering.\n\n__Note:__ Monthly statistics will be calculated only with the resolution that the user has in the user settings (`MONTHLY`, `MONTHLY_ADJUSTED`), and not for both. \n__Note:__ `YEARLY` resolution is aggregated based on the resolution that the user has in the user settings. With `MONTHLY` it will be the calendar year and with `MONTHLY_ADJUSTED` it will be adjusted based on the users' `periodbreakday`.\n\n### Statistics types\n\n| Type                                      | Value of description field       | Description of type                                                                                                                                                                                                                                              | Available resolutions                                                       |\n|-------------------------------------------|----------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|\n| `balances-by-account`                     | Identifier of an account         | Balances over time by each account                                                                                                                                                                                                                               | `DAILY` `MONTHLY` `MONTHLY_ADJUSTED`                                        |\n| `balances-by-account-type-group`          | The type group name              | Balances over time by each account group. `CHECKING`, `CREDIT_CARD` and `OTHER` account type will map to `CARDS_AND_ACCOUNTS`. `MORTGAGE` and `LOAN` map to `LOANS`.  `INVESTMENT`, `PENSION` and `SAVINGS` map to `SAVINGS`                                     | `DAILY` `WEEKLY` `MONTHLY` `MONTHLY_ADJUSTED`                               |\n| `carbon-by-category`                      | Identifier of a category         | Sum of carbon footprints per period in each category. \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                 | `MONTHLY` `MONTHLY_ADJUSTED` `DAILY` `WEEKLY` `QUARTERLY`                   |\n| `carbon-by-primary-category`              | Identifier of a primary category | Combined sum of all carbon footprints of child-categories per period in each primary category. \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                        | `MONTHLY` `MONTHLY_ADJUSTED` `DAILY` `WEEKLY` `QUARTERLY`                   |\n| `carbon-by-tag`                           | Carbon tag                       | Combined sum of all carbon footprints grouped by tags placed in the transaction notes field. \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                          | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `expenses-by-brand`                       | Identifier of a brand            | The sum of expenses by brand \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                                          | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `expenses-by-brand/by-count`              | Identifier of a brand            | The amount of expenses by brand  \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                                      | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `expenses-by-brand/by-category`           | Identifier of a category         | The amount of expenses by brand in each category \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                      | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `expenses-by-brand-by-category/by-count`  | Identifier of a category         | Count of expenses per brand in each category  \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                         | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `expenses-by-category`                    | Identifier of a category         | Sum of expenses per period in each category                                                                                                                                                                                                                      | `MONTHLY` `MONTHLY_ADJUSTED` `YEARLY` `DAILY` `WEEKLY` `QUARTERLY`          |\n| `expenses-by-category/by-count`           | Identifier of a category         | Count of expenses per period in each category                                                                                                                                                                                                                    | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `DAILY` `WEEKLY` `QUARTERLY`          |\n| `expenses-by-cost-structure`              | The type of expense              | The sum of expenses per period in each cost type  \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                     | `DAILY, MONTHLY, MONTHLY_ADJUSTED`                                          |\n| `expenses-by-primary-category`            | Identifier of a primary category | Combined sum of all expenses of child-categories per period in each primary category                                                                                                                                                                             | `MONTHLY` `MONTHLY_ADJUSTED` `YEARLY` `DAILY` `WEEKLY` `QUARTERLY`          |\n| `expenses-by-primary-category/by-count`   | Identifier of a primary category | Combined count of all expenses of child-categories per period in each primary category                                                                                                                                                                           | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `DAILY` `WEEKLY` `QUARTERLY`          |\n| `expenses-by-tag`                         | Category tag                     | Combined sum of all expenses grouped by tags placed in the transaction notes field                                                                                                                                                                               | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `expenses-by-tag/by-count`                | Category tag                     | Count of all expenses grouped by tags placed in the transaction notes field                                                                                                                                                                                      | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `expenses-by-subscription`                | Identifier of a subscription     | Sum of the expenses by subscription  \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                                  | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY`                           |\n| `expenses-by-subscription/average`        | Identifier of a subscription     | Average amount of the expenses by subscription  \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                       | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY`                           |\n| `income-by-category`                      | Identifier of a category         | Sum of Incomes per period in each category                                                                                                                                                                                                                       | `YEARLY` `QUARTERLY` `MONTHLY` `MONTHLY_ADJUSTED` `WEEKLY` `DAILY`          |\n| `income-by-category/by-count`             | Identifier of a category         | Count of all Incomes per period in each category \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                                                                                      | `YEARLY` `QUARTERLY` `MONTHLY` `MONTHLY_ADJUSTED` `WEEKLY` `DAILY`          |\n| `income-and-expenses`                     | Identifier of type               | Sum of transactions per period for category type                                                                                                                                                                                                                 | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `DAILY`                               |\n| `income-by-tag`                           | Category tag                     | Combined sum of all incomes grouped by tags placed in the transaction notes field                                                                                                                                                                                | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `income-by-tag/by-count`                  | Category tag                     | Count of all incomes grouped by tags placed in the transaction notes field                                                                                                                                                                                       | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `incoming-transfers-by-category`          | Identifier of a category         | Sum of incoming transfers per period in each category                                                                                                                                                                                                            | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `incoming-transfers-by-category/by-count` | Identifier of a category         | Count of incoming transfers per period in each category                                                                                                                                                                                                          | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `left-to-spend`                           | The date                         | What is left of income minus expenses in a monthly period, to a minimum of 0                                                                                                                                                                                     | `DAILY`  `MONTHLY` `MONTHLY_ADJUSTED`                                       |\n| `left-to-spend-average`                   | The date                         | Average left to spend on the day of the month for the last 6 monthly periods. If a requested day doesn't exist in a month it defaults to the last day of that month. For example: if the requested day is 31 it returns the left to spend for day 28 in February | `MONTHLY` `MONTHLY_ADJUSTED`                                                |\n| `outgoing-transfers-by-category`          | Identifier of a category         | Sum of outgoing transfers per period in each category                                                                                                                                                                                                            | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `outgoing-transfers-by-category/by-count` | Identifier of a category         | Count of outgoing transfers per period in each category                                                                                                                                                                                                          | `YEARLY` `MONTHLY` `MONTHLY_ADJUSTED` `QUARTERLY` `WEEKLY` `DAILY`          |\n| `safe-to-spend`                           | Day of the period                | What is left of income minus expenses - including past and future recurring transactions for that month period  \u003cem\u003eNote: This feature is not enabled by default. Speak to your account manager for more information.\u003c/em\u003e                                       | `DAILY`  `MONTHLY` `MONTHLY_ADJUSTED`                                       |\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Statistic",
                    "ENTERPRISE"
                ],
                "summary": "Query statistics",
                "operationId": "query",
                "parameters": [
                    {
                        "name": "Finance Management.StatisticQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.StatisticQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Finance%20Management.Statistic"
                            }
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/transactions": {
            "put": {
                "security": [
                    {
                        "OAuth2User": [
                            "transactions:write"
                        ]
                    }
                ],
                "description": "Updates mutable properties of a list of transactions. The following properties are possible to update: amount, categoryId, date, description and notes. Other properties (immutable) and empty fields are ignored. Date is only updated if there is 1 day difference from existing transaction's date. The amount is only updated if there is a difference ≥ 0.001.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Transaction",
                    "ENTERPRISE"
                ],
                "summary": "Update a list of transactions",
                "operationId": "updateTransactions",
                "parameters": [
                    {
                        "description": "The transactions to be updated",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Data%20v1.Transaction"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/v1/transactions/categorize-multiple": {
            "put": {
                "security": [
                    {
                        "OAuth2User": [
                            "transactions:categorize"
                        ]
                    }
                ],
                "description": "Changes category of the supplied list of transactions to the supplied category",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Transaction",
                    "ENTERPRISE"
                ],
                "summary": "Change category of transactions",
                "operationId": "categorize",
                "parameters": [
                    {
                        "description": "Object holding a list of new categories and the transactions to be categorized",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CategorizeTransactionsListRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "The payload does not pass validation."
                    }
                }
            }
        },
        "/api/v1/transactions/suggest": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Returns an object holding clusters of transactions to be categorized and possible categorization level improvement",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Transaction",
                    "ENTERPRISE"
                ],
                "summary": "Get categorization clusters",
                "operationId": "suggest",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "x-example": 7,
                        "description": "Max number of clusters returned",
                        "name": "numberOfClusters",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "evaluateEverything",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/SuggestTransactionsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Returns a transaction matching the requested id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Transaction"
                ],
                "summary": "Get one transaction",
                "operationId": "getTransaction",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the transaction",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Data%20v1.Transaction"
                        }
                    },
                    "404": {
                        "description": "Transaction not found."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OAuth2User": [
                            "transactions:write"
                        ]
                    }
                ],
                "description": "Updates mutable properties of a list of transactions. The following properties are possible to update: amount, categoryId, date, description and notes. Other properties (immutable) and empty fields are ignored. Date is only updated if there is 1 day difference from existing transaction's date. The amount is only updated if there is a difference ≥ 0.001.",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Data v1.Transaction",
                    "ENTERPRISE"
                ],
                "summary": "Update a transaction",
                "operationId": "updateTransaction",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the transaction",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The transaction to be updated",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Data%20v1.Transaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "The payload does not pass validation."
                    },
                    "404": {
                        "description": "Transaction not found."
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/link/suggest": {
            "get": {
                "description": "(DEPRECATED) Returns suggestions for potential counterpart expenses for a reimbursement.",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Data v1.Transaction",
                    "ENTERPRISE"
                ],
                "summary": "Get counterpart suggestions",
                "operationId": "linkSuggest",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the transaction to get suggestions for",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "Between 0 and 100."
                        ],
                        "type": "integer",
                        "format": "int32",
                        "default": 5,
                        "x-example": 5,
                        "description": "Max number of suggestions returned.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The suggestions were successfully returned.",
                        "schema": {
                            "$ref": "#/definitions/TransactionLinkSuggestionResponse"
                        }
                    },
                    "400": {
                        "description": "The transaction id or suggest limit was invalid."
                    },
                    "404": {
                        "description": "The transaction was not found."
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/link/{counterpartTransactionId}": {
            "post": {
                "description": "(DEPRECATED) Link two transactions, creating a transaction part for each transaction and netting out the amounts. The transactions are required to have different signs (i.e. one income and one expense). If the first transaction is -300 and the counterpart is 100, the common disposable amount is 100 and result of that is a dispensable amount of -200.",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Data v1.Transaction",
                    "ENTERPRISE"
                ],
                "summary": "Link transactions",
                "operationId": "link",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the first transaction to link.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "a41ad81ca470cb0bb02d6e8d854a9",
                        "description": "The ID of the other transaction (the counterpart) to link.",
                        "name": "counterpartTransactionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object holding the required amount for transaction linking",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LinkTransactionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The transactions were successfully linked and returned.",
                        "schema": {
                            "$ref": "#/definitions/LinkTransactionsResponse"
                        }
                    },
                    "400": {
                        "description": "The transaction ids were invalid."
                    },
                    "404": {
                        "description": "The transaction or the counterpart transaction was not found."
                    },
                    "409": {
                        "description": "The transactions were already linked."
                    },
                    "412": {
                        "description": "The transactions had the same signum, the part amount had a signum different from the transaction or the part amount is bigger than the dispensable amount."
                    },
                    "415": {
                        "description": "The request body, as specified by the Content-Encoding HTTP header, is not JSON"
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/part/{partId}": {
            "put": {
                "description": "(DEPRECATED) Updates an transaction part amount and it's counterpart amount.",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Data v1.Transaction",
                    "ENTERPRISE"
                ],
                "summary": "Update transaction Link",
                "operationId": "updateLink",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the transaction to which the part belongs to.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "c3b543d4817c4c08a96da789282f0501",
                        "description": "The part ID to update.",
                        "name": "partId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object holding the required amount for transaction linking",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateTransactionLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The transaction part and counter part were successfully updated and returned.",
                        "schema": {
                            "$ref": "#/definitions/LinkTransactionsResponse"
                        }
                    },
                    "400": {
                        "description": "The transaction or part id were invalid."
                    },
                    "404": {
                        "description": "The transaction or the transaction part was not found."
                    },
                    "412": {
                        "description": "The transactions had the same signum, the part amount had a signum different from the transaction or the part amount is bigger than the dispensable amount."
                    },
                    "500": {
                        "description": "The transaction part failed to update."
                    }
                }
            },
            "delete": {
                "description": "(DEPRECATED) If the part is linked to another transaction, the bilateral link is removed as well (i.e. the counterpart will be removed too, if found).",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "Data v1.Transaction",
                    "ENTERPRISE"
                ],
                "summary": "Delete transaction part",
                "operationId": "deletePart",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the transaction to which the part belongs to.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "c3b543d4817c4c08a96da789282f0501",
                        "description": "The part ID to delete.",
                        "name": "partId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The transaction part was successfully deleted and returned.",
                        "schema": {
                            "$ref": "#/definitions/DeleteTransactionPartResponse"
                        }
                    },
                    "400": {
                        "description": "The transaction id was invalid."
                    },
                    "404": {
                        "description": "The transaction or the transaction part was not found."
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/similar": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Returns an object holding a list of transactions similar to the supplied transaction based on description and a list of statistics summarizing these transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Transaction"
                ],
                "summary": "Get similar transactions",
                "operationId": "similar",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The ID of the transaction",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "c3b543d4817c4c08a96da789282f0501",
                        "description": "Return similar of this category",
                        "name": "categoryId",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "x-example": "false",
                        "description": "Include the supplied transaction in response",
                        "name": "includeSelf",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/SimilarTransactionsResponse"
                        }
                    },
                    "404": {
                        "description": "Transaction not found."
                    }
                }
            }
        },
        "/api/v1/user": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "user:read"
                        ]
                    }
                ],
                "description": "Returns the authenticated user.",
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "General.User"
                ],
                "summary": "Get user",
                "operationId": "getUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/General.User"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "OAuth2User": [
                            "user:write"
                        ]
                    }
                ],
                "description": "Updates the modifiable fields of a user. Refer to the [User model](#general/user/the-user-model) for which fields are modifiable. The `id` of the user must also be given, and must match the ID of the authenticated user access token.",
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "General.User",
                    "ENTERPRISE"
                ],
                "summary": "Update user",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "description": "The updated user object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/General.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/General.User"
                        }
                    }
                }
            }
        },
        "/api/v1/user/create": {
            "post": {
                "security": [
                  {
                    "Bearer": []
                  }
                ],
                "description": "Creates a user and its user profile and returns the ID of the created user.",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "General.User",
                    "ENTERPRISE",
                    "REGION.US"
                ],
                "summary": "Create user",
                "operationId": "createUser",
                "parameters": [
                    {
                        "description": "Configuration for new user.",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user was successfully created and returned.",
                        "schema": {
                            "$ref": "#/definitions/CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "The input market and/or locale was invalid."
                    },
                    "409": {
                        "description": "User with the same external id already exists."
                    }
                }
            }
        },
        "/api/v1/user/delete": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "user:delete"
                        ]
                    }
                ],
                "description": "Completely deletes the currently authenticated user and its data.",
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "General.User",
                    "ENTERPRISE",
                    "REGION.US"
                ],
                "summary": "Delete user",
                "operationId": "delete",
                "responses": {
                    "204": {
                        "description": "The user was successfully deleted."
                    }
                }
            }
        },
        "/api/v1/user/profile": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "user:read"
                        ]
                    }
                ],
                "description": "Returns the authenticated user's profile.",
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "General.User"
                ],
                "summary": "Get user profile",
                "operationId": "getProfile",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/UserProfile"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OAuth2User": [
                            "user:write"
                        ]
                    }
                ],
                "description": "Updates the modifiable fields of a user's profile. Refer to the [UserProfile model](#general/user/the-user-model/userprofile) for which fields are modifiable.",
                "consumes": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "General.User",
                    "ENTERPRISE"
                ],
                "summary": "Update user profile",
                "operationId": "updateProfile",
                "parameters": [
                    {
                        "description": "The updated user profile object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user profile was successfully updated and returned.",
                        "schema": {
                            "$ref": "#/definitions/UserProfile"
                        }
                    },
                    "400": {
                        "description": "The provided user profile contains invalid data. Make sure the data formats are valid."
                    }
                }
            }
        },
        "/connectivity/v2/authorizations:relay-callback": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "consents"
                        ]
                    }
                ],
                "description": "Send url-decoded callback information from an ASPSP.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Authorization",
                    "BETA"
                ],
                "summary": "Relayed callback for redirect flows",
                "operationId": "postCallbackRelayed",
                "parameters": [
                    {
                        "name": "RelayedCallbackRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelayedCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Callback information submitted."
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "invalidParams": [
                                    {
                                        "name": "page_size",
                                        "reason": "Must be equal or lower than 100"
                                    }
                                ],
                                "status": 400,
                                "title": "Invalid request arguments",
                                "type": "urn:errors:invalid-argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "This FS is not enabled",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/connectivity/v2/consent-templates/{providerId}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents:readonly"
                        ]
                    }
                ],
                "description": "Request a JSON schema template that's used to create a mandate.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Consent Templates",
                    "BETA"
                ],
                "summary": "Get consent template",
                "operationId": "getConsentFinancialServiceParametersTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "se-nordea-ob",
                        "description": "The provider (financial institution) name.",
                        "name": "providerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "MANDATE_PAYMENTS"
                        ],
                        "type": "string",
                        "x-example": "MANDATE_PAYMENTS",
                        "description": "Type of the financial service.",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "VRP_SWEEPING",
                            "VRP_COMMERCIAL"
                        ],
                        "type": "string",
                        "x-example": "VRP_SWEEPING",
                        "description": "Subtype of the financial service.",
                        "name": "subType",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Consent template successfully fetched",
                        "schema": {
                            "$ref": "#/definitions/GetConsentFinancialServiceParametersTemplatesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "invalidParams": [
                                    {
                                        "name": "page_size",
                                        "reason": "Must be equal or lower than 100"
                                    }
                                ],
                                "status": 400,
                                "title": "Invalid request arguments",
                                "type": "urn:errors:invalid-argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "This FS is not enabled",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Provider not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Could not find entity with id 7b5e443b-5f44-41b4-b8c2-add7af4038b1",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/connectivity/v2/consents": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "consents:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents:readonly"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Consent",
                    "BETA"
                ],
                "summary": "List consents",
                "operationId": "getConsents",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "ZDU0N2M0YTVkZTk3NGIxODkxMjNmZWVmYzEwNjQxZDg=",
                        "description": "Base64 encoded string pointing to the page that should be listed. All filtering parameters should be equal to the request for which this page_token was obtained as a response.",
                        "name": "page_token",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "x-example": 10,
                        "description": "Indicates maximum size for the array of returned consents Accepted values 1-100. Default 10.",
                        "name": "page_size",
                        "in": "query",
                        "allowEmptyValue": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Consents successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/GetConsentsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "invalidParams": [
                                    {
                                        "name": "page_size",
                                        "reason": "Must be equal or lower than 100"
                                    }
                                ],
                                "status": 400,
                                "title": "Invalid request arguments",
                                "type": "urn:errors:invalid-argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "This FS is not enabled",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "consents"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Consent",
                    "BETA"
                ],
                "summary": "Create a new consent",
                "operationId": "createConsent",
                "parameters": [
                    {
                        "name": "CreateConsentRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateConsentRequest"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "8e03978e-40d5-43e8-bc93-6894a57f9324",
                        "description": "An idempotency key is any value generated by the client which the resource server uses to recognize subsequent retries of the same request. The Idempotency-Key HTTP request header field carries this key.",
                        "name": "Idempotency-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Consent successfully created.",
                        "schema": {
                            "$ref": "#/definitions/CreateConsentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Could not find user with ID: 5c2a24e8-f563-4720-bf65-bbfce35b7656",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 400,
                                "title": "Request preconditions failed",
                                "type": "urn:errors:precondition-failed",
                                "violations": [
                                    {
                                        "subject": "users/5c2a24e8-f563-4720-bf65-bbfce35b7656",
                                        "type": "USER_NOT_FOUND"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "This FS is not enabled",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "409": {
                        "description": "Request retried while the original request is still being processed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Request with the same Idempotency-key is still being processed.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 409,
                                "title": "Conflict"
                            }
                        }
                    },
                    "422": {
                        "description": "Attempt to reuse an idempotency key with a different request payload.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Invalid attempt to reuse an idempotency key with a different request payload.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 422,
                                "title": "Unprocessable Entity"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/connectivity/v2/consents/{consentId}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "consents:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents:readonly"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Consent",
                    "BETA"
                ],
                "summary": "Read a consent",
                "operationId": "getConsent",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "x-example": "c63dc11e-b210-4a96-9461-2061389789e7",
                        "description": "The consent id.",
                        "name": "consentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Consent successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/GetConsentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "invalidParams": [
                                    {
                                        "name": "page_size",
                                        "reason": "Must be equal or lower than 100"
                                    }
                                ],
                                "status": 400,
                                "title": "Invalid request arguments",
                                "type": "urn:errors:invalid-argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "This FS is not enabled",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Consent not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Could not find entity with id 7b5e443b-5f44-41b4-b8c2-add7af4038b1",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/connectivity/v2/consents/{consentId}/authorizations": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "consents:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents:readonly"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Authorization",
                    "BETA"
                ],
                "summary": "List authorizations",
                "operationId": "getAuthorizations",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "x-example": "c63dc11e-b210-4a96-9461-2061389789e7",
                        "description": "The consent id.",
                        "name": "consentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "ZDU0N2M0YTVkZTk3NGIxODkxMjNmZWVmYzEwNjQxZDg=",
                        "description": "Base64 encoded string pointing to the page that should be listed. All filtering parameters should be equal to the request for which this page_token was obtained as a response.",
                        "name": "page_token",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "x-example": 10,
                        "description": "Indicates maximum size for the array of returned authorizations. Accepted values 1-100. Default 10.",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authorizations successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/GetAuthorizationsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "invalidParams": [
                                    {
                                        "name": "page_size",
                                        "reason": "Must be equal or lower than 100"
                                    }
                                ],
                                "status": 400,
                                "title": "Invalid request arguments",
                                "type": "urn:errors:invalid-argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "This FS is not enabled",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "consents"
                        ]
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Authorization",
                    "BETA"
                ],
                "summary": "Start authorization for a consent",
                "operationId": "createAuthorization",
                "parameters": [
                    {
                        "name": "CreateAuthorizationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateAuthorizationRequest"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "x-example": "c63dc11e-b210-4a96-9461-2061389789e7",
                        "description": "The id of the consent that the authorization is connected to.",
                        "name": "consentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "8e03978e-40d5-43e8-bc93-6894a57f9324",
                        "description": "An idempotency key is any unique key generated by the client which the resource server uses to recognize subsequent retries of the same request. The Idempotency-Key HTTP request header field carries this key.",
                        "name": "Idempotency-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Authorization successfully started.",
                        "schema": {
                            "$ref": "#/definitions/CreateAuthorizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Can not revoke an authorization for a consent with state INITIALIZED, consent must be in state ACTIVE.",
                                "instance": "urn:trace:id:7767560824206117063",
                                "status": 400,
                                "title": "Request preconditions failed",
                                "type": "urn:errors:precondition-failed",
                                "violations": [
                                    {
                                        "subject": "consents/ef4fa279-ae65-4ad6-b5ec-40a2d394c55d",
                                        "type": "INVALID_STATE"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "This FS is not enabled",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Consent not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Could not find entity with id 7b5e443b-5f44-41b4-b8c2-add7af4038b1",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "409": {
                        "description": "Request retried while the original request is still being processed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Request with the same Idempotency-key is still being processed.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 409,
                                "title": "Conflict"
                            }
                        }
                    },
                    "422": {
                        "description": "Attempt to reuse an idempotency key with a different request payload.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Invalid attempt to reuse an idempotency key with a different request payload.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 422,
                                "title": "Unprocessable Entity"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/connectivity/v2/consents/{consentId}/authorizations/{authorizationId}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "consents:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "consents:readonly"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Authorization",
                    "BETA"
                ],
                "summary": "Read authorization",
                "operationId": "getAuthorization",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "x-example": "c63dc11e-b210-4a96-9461-2061389789e7",
                        "description": "The consent id.",
                        "name": "consentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "x-example": "c63dc11e-b210-4a96-9461-2061389789e7",
                        "description": "The authorization id.",
                        "name": "authorizationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authorization successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/GetAuthorizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "invalidParams": [
                                    {
                                        "name": "page_size",
                                        "reason": "Must be equal or lower than 100"
                                    }
                                ],
                                "status": 400,
                                "title": "Invalid request arguments",
                                "type": "urn:errors:invalid-argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "This FS is not enabled",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Authorization not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Could not find entity with id 7b5e443b-5f44-41b4-b8c2-add7af4038b1",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/connectivity/v2/consents/{consentId}:revoke": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "consents"
                        ]
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connectivity v2.Consent",
                    "BETA"
                ],
                "summary": "Revoke a consent",
                "operationId": "revokeConsent",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8e03978e-40d5-43e8-bc93-6894a57f9324",
                        "description": "An idempotency key is any unique key generated by the client which the resource server uses to recognize subsequent retries of the same request. The Idempotency-Key HTTP request header field carries this key.",
                        "name": "Idempotency-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "x-example": "c63dc11e-b210-4a96-9461-2061389789e7",
                        "description": "The consent id.",
                        "name": "consentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Revocation successfully started.",
                        "schema": {
                            "$ref": "#/definitions/RevokeConsentResponse"
                        },
                        "examples": {
                            "application/json": {
                                "authorization": {
                                    "consentId": "c63dc11e-b210-4a96-9461-2061389789e7",
                                    "createdAt": "2022-12-26T21:33:12.000Z",
                                    "id": "a0655566-bec8-4982-bf79-80f6a6dd2b47",
                                    "state": "REVOKING",
                                    "succeededAt": "2022-12-26T21:35:11.000Z"
                                },
                                "consent": {
                                    "appId": "afae2e2a57b64009aa94f593d012b869",
                                    "authorizedAt": "2022-12-26T21:35:11.000Z",
                                    "createdAt": "2022-12-26T21:32:12.000Z",
                                    "financialService": {
                                        "subtype": "VRP_SWEEPING",
                                        "type": "MANDATE_PAYMENTS"
                                    },
                                    "financialServiceParameters": {
                                        "userParameters": {
                                            "parameter": "value"
                                        },
                                        "version": "1.0.0"
                                    },
                                    "id": "c63dc11e-b210-4a96-9461-2061389789e7",
                                    "providerId": "uk-natwest-oauth2",
                                    "revokedAt": "2022-12-26T21:32:12.000Z",
                                    "state": "REVOKED",
                                    "userId": "7c41103806a011edb9390242ac120002"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Can not revoke an authorization for a consent with state INITIALIZED, consent must be in state ACTIVE.",
                                "instance": "urn:trace:id:7767560824206117063",
                                "status": 400,
                                "title": "Request preconditions failed",
                                "type": "urn:errors:precondition-failed",
                                "violations": [
                                    {
                                        "subject": "consents/ef4fa279-ae65-4ad6-b5ec-40a2d394c55d",
                                        "type": "INVALID_STATE"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Authorization header must be set to access this endpoint.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Could not find entity with id 7b5e443b-5f44-41b4-b8c2-add7af4038b1",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "404": {
                        "description": "Consent not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Could not find entity with id 7b5e443b-5f44-41b4-b8c2-add7af4038b1",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "409": {
                        "description": "Request retried while the original request is still being processed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Request with the same Idempotency-key is still being processed.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 409,
                                "title": "Conflict"
                            }
                        }
                    },
                    "422": {
                        "description": "Attempt to reuse an idempotency key with a different request payload.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "detail": "Invalid attempt to reuse an idempotency key with a different request payload.",
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 422,
                                "title": "Unprocessable Entity"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/problem+json": {
                                "instance": "urn:trace:id:7358299351266277660",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/connector/users/{externalUserId}/accounts": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "accounts:write"
                        ]
                    }
                ],
                "description": "Takes a list of accounts and the corresponding user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "ENTERPRISE",
                    "Connector.Account",
                    "MULTI_TENANT"
                ],
                "summary": "Ingest accounts",
                "operationId": "createAccounts",
                "parameters": [
                    {
                        "name": "AccountListEntity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccountListEntity"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "External identifier for the user.",
                        "name": "externalUserId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Accounts created.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "User not found, has no credentials, or has more than one abstract credentials.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "409": {
                        "description": "Account already exists.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/connector/users/{externalUserId}/accounts/{externalAccountId}": {
            "put": {
                "security": [
                    {
                        "OAuth2Client": [
                            "accounts:write"
                        ]
                    }
                ],
                "description": "Accepts an object of properties to be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "ENTERPRISE",
                    "Connector.Account",
                    "MULTI_TENANT"
                ],
                "summary": "Update account",
                "operationId": "updateAccount",
                "parameters": [
                    {
                        "name": "UpdateAccountEntity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAccountEntity"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "External identifier for the user.",
                        "name": "externalUserId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "2d3bd65493b549e1927d97a2d0683ab9",
                        "description": "External identifier for the account.",
                        "name": "externalAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Account updated.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "User not found, has no credentials, or has more than one abstract credentials.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Account not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2Client": [
                            "accounts:write"
                        ]
                    }
                ],
                "description": "Deletes the account with the given account ID.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "ENTERPRISE",
                    "Connector.Account",
                    "MULTI_TENANT"
                ],
                "summary": "Delete account",
                "operationId": "deleteAccount",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "External identifier for the user.",
                        "name": "externalUserId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "2d3bd65493b549e1927d97a2d0683ab9",
                        "description": "External identifier for the account.",
                        "name": "externalAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Account deleted.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Account not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/connector/users/{externalUserId}/transactions": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "transactions:write"
                        ]
                    }
                ],
                "description": "Takes historical or real time transactions together with an account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "ENTERPRISE",
                    "Connector.Transaction",
                    "MULTI_TENANT"
                ],
                "summary": "Ingest transactions",
                "operationId": "ingestTransactions",
                "parameters": [
                    {
                        "name": "CreateTransactionAccountContainer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateTransactionAccountContainer"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "External identifier for the user.",
                        "name": "externalUserId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Transactions ingested.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation, or the specified account does not exist.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "User with the given external id not found.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "409": {
                        "description": "Transaction already exists.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "410": {
                        "description": "Transaction has already been deleted.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "412": {
                        "description": "Could not find any accounts for the user.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/connector/users/{externalUserId}/transactions/delete": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "transactions:write"
                        ]
                    }
                ],
                "description": "Removes transactions. When deleting transactions, it's only the externalId of each transaction that is necessary.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "ENTERPRISE",
                    "Connector.Transaction",
                    "MULTI_TENANT"
                ],
                "summary": "Delete transactions",
                "operationId": "deleteTransactions",
                "parameters": [
                    {
                        "name": "DeleteTransactionAccountsContainer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeleteTransactionAccountsContainer"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "External identifier for the user.",
                        "name": "externalUserId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Transactions deleted.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation, or the specified account does not exist.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "User with the given external id not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/connector/users/{externalUserId}/transactions/{externalTransactionId}": {
            "put": {
                "security": [
                    {
                        "OAuth2Client": [
                            "transactions:write"
                        ]
                    }
                ],
                "description": "Updates a single transaction related to an account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "ENTERPRISE",
                    "Connector.Transaction",
                    "MULTI_TENANT"
                ],
                "summary": "Update transaction",
                "operationId": "updateTransactions",
                "parameters": [
                    {
                        "name": "UpdateTransactionAccountContainer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateTransactionAccountContainer"
                        }
                    },
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "External identifier for the user.",
                        "name": "externalUserId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "40dc04e5353547378c84f34ffc88f853",
                        "description": "External identifier for the transaction.",
                        "name": "externalTransactionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Transaction updated.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "The payload does not pass validation, or the specified account does not exist.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "User with the given external id not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/data/v1/business-account-verification-reports/{id}": {
            "get": {
                "security": [
                  {
                    "Bearer": []
                  }
                ],
                "description": "Returns a business account verification response",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v1.Business Account Verification"
                ],
                "summary": "Get Business Account Verification Report",
                "operationId": "getBusinessAccountVerification",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "Report id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "schema": {
                            "$ref": "#/definitions/BusinessAccountVerificationReport"
                        }
                    },
                    "400": {
                        "description": "Incorrect request parameters or user data missing."
                    },
                    "404": {
                        "description": "Could not find the report. Possible reasons, report was not successfully created, report has expired"
                    }
                }
            }
        },
        "/data/v2/accounts": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "accounts:read"
                        ]
                    }
                ],
                "description": "Returns a list of accounts for a user.",
                "tags": [
                    "Data v2.Account",
                    "REGION.US"
                ],
                "summary": "List Accounts",
                "operationId": "AccountsService_ListAccounts",
                "parameters": [
                    {
                        "type": "string",
                        "format": "int64",
                        "description": "The maximum number of items to return. This endpoint will not return more than 100 accounts per page.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The next_page_token value returned from a previous List request, if any.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "If set, only the account with the given id will be returned. This parameter may be repeated to specify multiple account ids.",
                        "name": "idIn",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "UNDEFINED",
                                "CHECKING",
                                "SAVINGS",
                                "CREDIT_CARD"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "If set, only accounts with the given account types will be returned. This parameter may be repeated to specify multiple account types.\n\n - UNDEFINED: Not used.\n - CHECKING: Checking account.\n - SAVINGS: Savings account.\n - CREDIT_CARD: Credit card account.",
                        "name": "typesIn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tink.transactionhistory.accounts.v2.ListAccountsResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/grpc.gateway.runtime.Error"
                        }
                    }
                }
            }
        },
        "/data/v2/accounts/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "accounts:read"
                        ]
                    }
                ],
                "description": "Returns an account for given user and id.",
                "tags": [
                    "Data v2.Account",
                    "REGION.US"
                ],
                "summary": "Get Account",
                "operationId": "AccountsService_GetAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account id to return",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "404": {
                        "description": "Account doesn't exist",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/grpc.gateway.runtime.Error"
                        }
                    }
                }
            }
        },
        "/data/v2/accounts/{id}/balances": {
            "get": {
                "security": [
                  {
                    "Bearer": []
                  }
                ],
                "description": "Signage on balances:\nThe balance amount signage is either positive or negative - \n1. A balance that is `positive` indicates there are funds available to be spent.\n2. A balance that is `negative` indicates that the user owes funds to the financial institution.\nThe above is true for both depository accounts and credit accounts.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v2.Account",
                    "BETA",
                    "REGION.US"
                ],
                "summary": "Get Account Balances",
                "operationId": "getBalances",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "AccountId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "schema": {
                            "$ref": "#/definitions/Accounts.v2.Balances"
                        }
                    },
                    "400": {
                        "description": "Incorrect request parameters or user data missing."
                    }
                }
            }
        },
        "/data/v2/accounts/{id}/parties": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "accounts:read",
                            "accounts.parties:readonly"
                        ]
                    }
                ],
                "description": "Returns accounts parties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v2.Account"
                ],
                "summary": "Get Account Parties",
                "operationId": "getParties",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "2ce1f090a9304f13a15458d480f8a85d",
                        "description": "Account id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "schema": {
                            "$ref": "#/definitions/Accounts.v2.AccountParties"
                        }
                    },
                    "400": {
                        "description": "Invalid request."
                    },
                    "401": {
                        "description": "Unauthorized request."
                    },
                    "403": {
                        "description": "Permission denied."
                    },
                    "404": {
                        "description": "Account not found."
                    }
                }
            }
        },
        "/data/v2/identities": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "identities:readonly"
                        ]
                    }
                ],
                "description": "Returns identities for user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data v2.Identity",
                    "BETA"
                ],
                "summary": "List Identities",
                "operationId": "getIdentities",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "schema": {
                            "$ref": "#/definitions/Identities.v2.ListIdentitiesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "$ref": "#/definitions/Identities.v2.ListIdentitiesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/Identities.v2.ListIdentitiesResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/Identities.v2.ListIdentitiesResponse"
                        }
                    }
                }
            }
        },
        "/data/v2/investment-accounts": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "investment-accounts:readonly"
                        ]
                    }
                ],
                "description": "Returns a list of investment accounts for a user.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Data v2.Investment"
                ],
                "summary": "List Investment Accounts",
                "operationId": "getInvestmentAccountsByUserId",
                "responses": {
                    "200": {
                        "description": "List of investment accounts successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/Investments.v2.ListInvestmentAccountsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/data/v2/investment-accounts/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "investment-accounts:readonly"
                        ]
                    }
                ],
                "description": "Returns an investment account for a given investment account id",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Data v2.Investment"
                ],
                "summary": "Get Investment Account",
                "operationId": "getInvestmentAccountById",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The identifier of the investment account.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Investment account successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/Investments.v2.InvestmentAccount"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    },
                    "404": {
                        "description": "Investment account not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/data/v2/investment-accounts/{id}/holdings": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "investment-accounts:readonly"
                        ]
                    }
                ],
                "description": "Returns a list of holdings for an investment account.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Data v2.Investment"
                ],
                "summary": "List Holdings",
                "operationId": "getHoldings",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The identifier of the investment account.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return (default value is 10, maximum value is 100)",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The nextPageToken value returned from a previous request, null for first request",
                        "name": "pageToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List holdings successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/Investments.v2.ListHoldingsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/data/v2/loan-accounts": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "loan-accounts:readonly"
                        ]
                    }
                ],
                "description": "Returns a list of loan accounts for a user.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Data v2.Loan"
                ],
                "summary": "List Loan Accounts",
                "operationId": "getLoanAccounts",
                "responses": {
                    "200": {
                        "description": "List of loan accounts successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/Loans.v2.ListLoanAccountsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/data/v2/loan-accounts/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "loan-accounts:readonly"
                        ]
                    }
                ],
                "description": "Returns a loan account for a given loan account id.",
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "Data v2.Loan"
                ],
                "summary": "Get Loan Account",
                "operationId": "getLoanAccountById",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8937fa00166946cbbcbbec569c9d6e90",
                        "description": "The identifier of the loan account.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Loan account successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/Loans.v2.LoanAccount"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    },
                    "403": {
                        "description": "Permission denied.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    },
                    "404": {
                        "description": "Loan account not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/data/v2/transaction-reports/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "transaction-reports:readonly"
                        ]
                    }
                ],
                "description": "Reports are available for retrieval up to 1h after generation and permanently deleted after 24h.",
                "tags": [
                    "Data v2.Transaction Report"
                ],
                "summary": "Get Transaction Report",
                "operationId": "ReportsService_GetReport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tink unique identifier for the report.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tink.transactionhistory.reports.v2.Report"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "404": {
                        "description": "The report was not found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/grpc.gateway.runtime.Error"
                        }
                    }
                }
            }
        },
        "/data/v2/transactions": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Returns a list of transactions for a user.",
                "tags": [
                    "Data v2.Transaction",
                    "REGION.US"
                ],
                "summary": "List Transactions",
                "operationId": "TransactionsService_ListTransactions",
                "parameters": [
                    {
                        "type": "string",
                        "format": "int64",
                        "description": "The maximum number of items to return. This endpoint will not return more than 100 transactions per page.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The next_page_token value returned from a previous List request, if any.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "If set, only transaction with the given account ids will be returned. This parameter may be repeated to specify multiple account ids.",
                        "name": "accountIdIn",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Specified as the earliest booked date of transactions used for filtering and with the ISO-8061 date format (YYYY-MM-DD). If the query parameter is not provided time range will be calculated using the booked date of the earliest transaction available.",
                        "name": "bookedDateGte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Specified as the latest booked date of transactions used for filtering and with the ISO-8061 date format (YYYY-MM-DD). If the query parameter is not provided time range will be calculated until today.",
                        "name": "bookedDateLte",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "UNDEFINED",
                                "PENDING",
                                "BOOKED"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "If set, only transactions with the given status will be returned. This parameter may be repeated to specify multiple statuses.\n\n - UNDEFINED: (DEPRECATED) The transaction booking status is undefined.\n - PENDING: The transaction is pending at the financial institution.\n - BOOKED: The transaction is booked at the financial institution.",
                        "name": "statusIn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tink.transactionhistory.transactions.v2.ListTransactionsResponse"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/grpc.gateway.runtime.Error"
                        }
                    }
                }
            }
        },
        "/data/v2/transactions/{id}": {},
        "/enrichment/v1/brand-identification/brands/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.merchant"
                        ]
                    }
                ],
                "description": "Fetches a brand by its ID. The ID is a UUID.\n\nThe response will include the brand's name, logo and contact information.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Merchant Information.Brand"
                ],
                "summary": "Get Brand By ID",
                "operationId": "getBrandById",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "02820044-69f5-4170-a516-fbeae6450f7a",
                        "description": "ID of the brand",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Merchant%20Information.Brand.Brand%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Accounts not found: [38dea48807464d92aac16fed69383dfb]."
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                }
            }
        },
        "/enrichment/v1/brand-identification/merchants/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.merchant"
                        ]
                    }
                ],
                "description": "Fetches a merchant by its ID. The ID is a UUID.\n\nThe response will include the merchant's name, logo, location and contact information.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Merchant Information.Merchant"
                ],
                "summary": "Get Merchant By ID",
                "operationId": "getMerchantById",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "02820044-69f5-4170-a516-fbeae6450f7a",
                        "description": "ID of the merchant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "0": {
                        "description": "More specific error codes that can be found as `detailCode` in the error response. NON_SPECIFIED (0), NOT_AUTHORIZED (1), INVALID_TOKEN (2), CATEGORIES_NOT_FOUND (3), UUID_INVALID (4), ENTITY_NOT_FOUND (5), TRANSACTIONS_NOT_FOUND (6), FEATURE_NOT_AVAILABLE (7), INVALID_REQUEST (8)",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Merchant%20Information.Merchant.Merchant%20Response"
                        },
                        "examples": {
                            "*/*": null
                        }
                    },
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Merchant%20Information.Merchant.Merchant%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Accounts not found: [38dea48807464d92aac16fed69383dfb]."
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/categories": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.transactions:readonly"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "enrichment.transactions"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "enrichment.transactions:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "enrichment.transactions"
                        ]
                    }
                ],
                "description": "List all categories for a locale.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Category",
                    "REGION.US"
                ],
                "summary": "List All Categories",
                "operationId": "listCategories",
                "parameters": [
                    {
                        "type": "string",
                        "default": "en_US",
                        "x-example": "sv_SE",
                        "description": "The locale for which to fetch categories.",
                        "name": "localeEq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Category.List%20All%20Categories"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Accounts not found: [38dea48807464d92aac16fed69383dfb]."
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                }
            }
        },
        "/enrichment/v1/predicted-recurring-transactions": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.transactions"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "enrichment.transactions:readonly"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "transactions.recurring:read"
                        ]
                    }
                ],
                "description": "List predicted recurring transactions for a user. All fields are optional, which means that setting none of the fields will return 30 days of predictions for all of a user's active groups.\n\nTo forecast recurring transactions for 30 days ahead, the model checks if an existing recurring transactions group is active. If that is the case, the model will look at the last date for when the transactions occurred and calculate that together with the found periodicity for that recurring transaction.\n\nOnly one prediction will be made for each group, unless the group has a WEEKLY or a BI_WEEKLY periodicity.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Recurring Transactions",
                    "REGION.US"
                ],
                "summary": "List Predicted Recurring Transactions",
                "operationId": "listPRTXs",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "x-example": null,
                        "description": "An optional pagination page size. Default value is 10, max value is 100. Must be a positive integer.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "maximum": 731,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "x-example": null,
                        "description": "The prediction span in days from today's date. The default value is 30 days. Must be a positive integer. Optional.",
                        "name": "predictionSpanDays",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "An optional pagination token specifying the page of results to retrieve.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "A list of ids of the recurring transactions group to predict transactions for. Note that this cannot be used in combination with any of the other group id fields. Must be a valid UUID. Optional.",
                        "name": "groupIdIn",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "A list of account ids to predict transactions for. Note that this cannot be used in combination with any of the other account id fields. Must be a valid UUID. Optional.",
                        "name": "accountIdIn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Recurring%20Transactions.List%20Predicted%20Recurring%20Transactions%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                    
                }
            }
        },
        "/enrichment/v1/recurring-transactions": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.transactions"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "enrichment.transactions:readonly"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "transactions.recurring:read"
                        ]
                    }
                ],
                "description": "List all recurring transactions for a user.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Recurring Transactions",
                    "REGION.US"
                ],
                "summary": "List Recurring Transactions",
                "operationId": "listRTX",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "x-example": null,
                        "description": "An optional pagination page size. Default value is 10, max value is 100. Must be a positive integer.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "An optional pagination token specifying the page of results to retrieve.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "Optional. Specifies a list of group ids to fetch recurring transactions from. Note that this cannot be used in combination with any of the other group id fields. Must be a valid UUID.",
                        "name": "groupIdIn",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "Optional. Specifies a list of account ids to fetch recurring transactions from.",
                        "name": "accountIdIn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Recurring%20Transactions.List%20Recurring%20Transactions%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                    
                }
            }
        },
        "/enrichment/v1/recurring-transactions-groups": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.transactions"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "enrichment.transactions:readonly"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "transactions.recurring:read"
                        ]
                    }
                ],
                "description": "List all recurring transactions groups for a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Recurring Transactions",
                    "REGION.US"
                ],
                "summary": "List Recurring Transactions Groups",
                "operationId": "listRTXGroup",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "x-example": null,
                        "description": "An optional pagination page size. Default value is 10, max value is 100. Must be a positive integer.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "An optional pagination token specifying the page of results to retrieve.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "UNDEFINED",
                            "ACTIVE",
                            "INACTIVE",
                            "UNDEFINED",
                            "ACTIVE",
                            "INACTIVE"
                        ],
                        "type": "string",
                        "x-example": null,
                        "description": "Activity status of the group. Defaults to no filter: UNDEFINED.",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "An optional account filter. Default to all.",
                        "name": "accountIdIn",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "An optional category filter. Default to all. If a parent category was supplied, it will be expanded into child categories.",
                        "name": "categoryIdIn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Recurring%20Transactions.List%20Recurring%20Transactions%20Groups%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                    
                }
            }
        },
        "/enrichment/v1/recurring-transactions-groups/{groupId}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.transactions"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "enrichment.transactions:readonly"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "transactions.recurring:read"
                        ]
                    }
                ],
                "description": "Get a single recurring transactions group for a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Recurring Transactions",
                    "REGION.US"
                ],
                "summary": "Get a Recurring Transactions Group",
                "operationId": "getRTXGroup",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "The id of the recurring transactions group. This is a required field. Must be a valid UUID.",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/.Get%20Recurring%20Transactions%20Group%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Accounts not found: [38dea48807464d92aac16fed69383dfb]."
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                    
                }
            }
        },
        "/enrichment/v1/sustainability/accounts/profiling": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability"
                        ]
                    }
                ],
                "description": "Profiling questions are answered using this endpoint. Answer ID refers to the ID in the SELECTABLE or INPUT array.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Account Profiling"
                ],
                "summary": "Answer Profiling Questions",
                "operationId": "profiling",
                "parameters": [
                    {
                        "x-examples": null,
                        "name": "Enrichment.Sustainability.Profiling Answers Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Profiling%20Answers%20Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Answers%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "[answers[0].answerId: Id missing.]",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Accounts not found: [38dea48807464d92aac16fed69383dfb].",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/sustainability/accounts/{accountId}/insights": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability"
                        ]
                    }
                ],
                "description": "Retrieves a random account specific insight. The insights returned will be affected depending  on what the end user has answered in it's account profiling.The language of the insights depends on the language parameter. Default is English.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Insights"
                ],
                "summary": "Retrieve a random account specific insight.",
                "operationId": "insights_1",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "3f1db1214aba46efbbc26023e7e569ee",
                        "description": "The Tink account ID for which you want an insight.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "en",
                        "x-example": "en",
                        "description": "ISO639-1 two-letter language code.",
                        "name": "language",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AccountInsightResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "[answers[0].answerId: Id missing.]",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Accounts not found: [38dea48807464d92aac16fed69383dfb].",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/sustainability/accounts/{accountId}/profiling": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability"
                        ]
                    }
                ],
                "description": "This returns questions to be answered by users for more precise CO2 calculations, comparisons, or insights. The questions will be in the language specified by the language parameter. It defaults to English.\n\n\u003cb\u003eThere are two types of questions:\u003c/b\u003e\n  - SELECTABLE: The user can select an answer from a list\n  - INPUT: The user is asked to give a free text answer of the specified type and according to validation\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Account Profiling"
                ],
                "summary": "Get Profiling Questions",
                "operationId": "profiling_1",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "3f1db1214aba46efbbc26023e7e569ee",
                        "description": "The Tink account ID for which you want to answer questions.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "en",
                        "x-example": "en",
                        "description": "ISO639-1 two-letter language code.",
                        "name": "language",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.List%20Profiling%20Questions"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "[answers[0].answerId: Id missing.]",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Accounts not found: [38dea48807464d92aac16fed69383dfb].",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/sustainability/insights": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability"
                        ]
                    }
                ],
                "description": "Retrieves general insights, these are not affected by Your account profile. The language of the insights depends on the language parameter. Default is English.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Insights"
                ],
                "summary": "Retrieve general insights",
                "operationId": "insights",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "en",
                        "description": "ISO639-1 two-letter language code for the selected language used to retrieve insights. Default is English (en).",
                        "name": "language",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ListInsightsResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "[answers[0].answerId: Id missing.]",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Accounts not found: [38dea48807464d92aac16fed69383dfb].",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/sustainability/market-average": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability"
                        ]
                    }
                ],
                "description": "Retrieves the annual average CO2 footprint for the supplied market. ",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Market Average"
                ],
                "summary": "Retrieve market average footprints",
                "operationId": "getMarketAverage",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "en",
                        "description": "ISO 3166-1 alpha-2 code",
                        "name": "market",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Market%20Average%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "getMarketAverage.market: Market is not an ISO 3166-1 alpha-2 code",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/sustainability/transactions/refinement": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability",
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Refinement questions are answered using this endpoint. Answer ID refers to the ID in the SELECTABLE or INPUT array.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Transactions"
                ],
                "summary": "Answer refinement questions",
                "operationId": "refinement",
                "parameters": [
                    {
                        "x-examples": null,
                        "name": "Enrichment.Sustainability.Refinement Answers Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Refinement%20Answers%20Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Transactions%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "[answers[0].answerId: Id missing.]",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Accounts not found: [38dea48807464d92aac16fed69383dfb].",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/sustainability/transactions/{transactionId}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability",
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Retrieve base sustainability info for the specified transaction. The response will include the CO2 emission value, random comparison and a random insight.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Transactions"
                ],
                "summary": "Transaction Sustainability Info",
                "operationId": "transactionSustainabilityInfo",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "4df3b236c81640b18741d7cdd1fc0e45",
                        "description": "The Tink transaction ID for which sustainability info is to be retrieved.",
                        "name": "transactionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "en",
                        "x-example": "en",
                        "description": "ISO639-1 two-letter language code for the selected language used to retrieve sustainability info. Default is English (en).",
                        "name": "language",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Transaction%20Sustainability%20Info"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "[answers[0].answerId: Id missing.]",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Accounts not found: [38dea48807464d92aac16fed69383dfb].",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/sustainability/transactions/{transactionId}/comparables": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability",
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Retrieve a list of relatable comparisons corresponding to the CO2 emission value of the transaction.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Transactions"
                ],
                "summary": "List transaction CO2 value comparison",
                "operationId": "comparables",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "4df3b236c81640b18741d7cdd1fc0e45",
                        "description": "The Tink transaction ID for which emission comparison are to be retrieved.",
                        "name": "transactionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "en",
                        "x-example": "en",
                        "description": "ISO639-1 two-letter language code for the selected language used to retrieve emission comparison. Default is English (en).",
                        "name": "language",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.List%20Relatable%20Comparisons"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "[answers[0].answerId: Id missing.]",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Accounts not found: [38dea48807464d92aac16fed69383dfb].",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/sustainability/transactions/{transactionId}/refinement": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.sustainability",
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Retrieves refinement questions for the specified transaction.\n\n\u003cb\u003eThere are two types of questions:\u003c/b\u003e\n  - SELECTABLE: The user can select an answer from a list\n  - INPUT: The user is asked to give a free text answer of the specified type and according to validation\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Sustainability.Transactions"
                ],
                "summary": "List refinement questions for transaction",
                "operationId": "refinement_1",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "4df3b236c81640b18741d7cdd1fc0e45",
                        "description": "The Tink transaction ID for which refinement questions are to be retrieved.",
                        "name": "transactionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "en",
                        "x-example": "en",
                        "description": "ISO639-1 two-letter language code for the selected language used to retrieve questions. Default is English (en).",
                        "name": "language",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.List%20Refinement%20Questions%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "[answers[0].answerId: Id missing.]",
                                "status": 400,
                                "title": "Illegal argument"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Invalid bearer token provided (has it expired?)",
                                "status": 401,
                                "title": "Unauthorized"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Forbidden",
                                "status": 403,
                                "title": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "Accounts not found: [38dea48807464d92aac16fed69383dfb].",
                                "status": 404,
                                "title": "Not Found"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Sustainability.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "detail": "TraceId: [38dea48807464d92aac16fed69383dfb]",
                                "status": 500,
                                "title": "Internal Server Error"
                            }
                        }
                    }
                }
            }
        },
        "/enrichment/v1/transactions": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.transactions"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "enrichment.transactions:readonly"
                        ]
                    }
                ],
                "description": "List all enriched transactions for a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Enriched Transactions",
                    "REGION.US"
                ],
                "summary": "List Enriched Transactions",
                "operationId": "listTransactions",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "x-example": null,
                        "description": "The maximum number of items to return. This endpoint will not return more than 100 transactions per page.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "The nextPageToken value returned from a previous List request, if any.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "(deprecated) The categoryId value to fetch transactions that belong to specific category, if any. If a parent category is supplied it will filter by any child categories as well.",
                        "name": "categoryId",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "UNDEFINED",
                            "PENDING",
                            "BOOKED"
                        ],
                        "type": "array",
                        "items": {
                            "enum": [
                                "UNDEFINED",
                                "PENDING",
                                "BOOKED",
                                "UNRECOGNIZED",
                                "UNDEFINED",
                                "PENDING",
                                "BOOKED"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "If set, only transactions with the given status will be returned. This parameter may be repeated to specify multiple statuses.\n- UNDEFINED: The transaction booking status is undefined.\n- PENDING: The transaction is pending at the financial institution.\n- BOOKED: The transaction is booked at the financial institution.\n",
                        "name": "statusIn",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "If set, only transaction with the given account ids will be returned. This parameter may be repeated to specify multiple account ids.",
                        "name": "accountIdIn",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "collectionFormat": "multi",
                        "x-example": null,
                        "description": "If set, only transactions with specified categories will be returned. If a parent category is supplied it will be expanded to its child categories as well.",
                        "name": "categoryIdIn",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "\tSpecified as the earliest booked date of transactions used for filtering in a ISO-8061 date format (YYYY-MM-DD). If the query parameter is not provided, the time range will be calculated using the booked date of the earliest transaction available.",
                        "name": "bookedDateGte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "Specified as the latest booked date of transactions used for filtering in a ISO-8061 date format (YYYY-MM-DD). If the query parameter is not provided, the time range will be calculated until today.",
                        "name": "bookedDateLte",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Enriched%20Transactions.Enriched%20Transactions%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Accounts not found: [38dea48807464d92aac16fed69383dfb]."
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                   
                }
            },
            "patch": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.transactions"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "enrichment.transactions:readonly"
                        ]
                    }
                ],
                "description": "Update one or more enriched transactions categories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Enriched Transactions"
                ],
                "summary": "Update Enriched Transactions",
                "operationId": "updateTransactions",
                "parameters": [
                    {
                        "x-examples": null,
                        "name": "Enrichment.Enriched Transactions.Update Transactions Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Enriched%20Transactions.Update%20Transactions%20Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/UpdateTransactionsResponse"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Accounts not found: [38dea48807464d92aac16fed69383dfb]."
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                    
                }
            }
        },
        "/enrichment/v1/transactions/on-demand": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "enrichment.on-demand"
                        ]
                    }
                ],
                "description": "\u003cp\u003eEnrich transactions without the need for users or accounts to be created. This endpoint does not store any data. The enrichments provided include:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\u003cstrong\u003eCategorization\u003c/strong\u003e: Tink category ID and formatted description\u003c/li\u003e\n    \u003cli\u003e\u003cstrong\u003eMerchant Information\u003c/strong\u003e: Brand and Merchant information\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eEnrichment levels\u003c/h2\u003e\n\u003cp\u003eIt is possible to ask for specific enrichments and their levels:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\u003cstrong\u003eCATEGORIZATION\u003c/strong\u003e: Only processes categories\u003c/li\u003e\n    \u003cli\u003e\u003cstrong\u003eBRAND\u003c/strong\u003e: Only processes brand information\u003c/li\u003e\n    \u003cli\u003e\u003cstrong\u003eBRAND_AND_MERCHANT\u003c/strong\u003e: Processes both brand and merchant information\u003c/li\u003e\n\u003c/ul\u003e\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.As a Service"
                ],
                "summary": "Enrich transactions",
                "operationId": "enrichTransactions",
                "parameters": [
                    {
                        "x-examples": null,
                        "name": "Enrichment.As a Service.Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Enrichment.As%20a%20Service.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.As%20a%20Service.Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                    
                }
            }
        },
        "/enrichment/v1/transactions/{transactionId}:find-similar": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "enrichment.transactions:readonly",
                            "transactions:read"
                        ]
                    },
                    {
                        "OAuth2User": [
                            "enrichment.transactions",
                            "transactions:read"
                        ]
                    }
                ],
                "description": "Get up to 50 similar transactions to the specified transaction.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Enrichment.Enriched Transactions",
                    "REGION.US"
                ],
                "summary": "Get Similar Transactions",
                "operationId": "getSimilarTransactions",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": null,
                        "description": "The id of the transaction.",
                        "name": "transactionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns `200 Ok` for successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Enriched%20Transactions.Similar%20Transactions%20Response"
                        },
                        "examples": {
                            "application/json": null
                        }
                    },
                    "400": {
                        "description": "Returns `400 Bad Request` if the payload does not pass validation.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "[answers[0].answerId: Id missing.]"
                            }
                        }
                    },
                    "401": {
                        "description": "Returns `401 Unauthorized` if the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Invalid bearer token provided (has it expired?)"
                            }
                        }
                    },
                    "403": {
                        "description": "Returns `403 Forbidden` if the user is not permitted.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Forbidden"
                            }
                        }
                    },
                    "404": {
                        "description": "Returns `404 Not Found` if the entity is not present.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "Accounts not found: [38dea48807464d92aac16fed69383dfb]."
                            }
                        }
                    },
                    "500": {
                        "description": "Returns `500 Internal Server Error` if there is an unexpected server error.",
                        "schema": {
                            "$ref": "#/definitions/Enrichment.Error%20Response"
                        },
                        "examples": {
                            "*/*": {
                                "code": 3,
                                "detailCode": 4,
                                "details": [],
                                "message": "TraceId: [38dea48807464d92aac16fed69383dfb]"
                            }
                        }
                    },
                    
                }
            }
        },
        "/events/v2/webhook-endpoints": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "webhook-endpoints"
                        ]
                    }
                ],
                "description": "Returns a list of Webhook Endpoints.",
                "tags": [
                    "Events v2.Webhook",
                    "REGION.US"
                ],
                "summary": "List Webhook Endpoints",
                "operationId": "WebhookEndpointService_ListWebhookEndpoints",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The next_page_token value returned from a previous List request, if any.",
                        "name": "pageToken",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tink.webhook.api.v2.ListWebhookEndpointResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/grpc.gateway.runtime.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "webhook-endpoints"
                        ]
                    }
                ],
                "description": "The Events v2 Create Webhook Endpoint creates a subscription for a set of events to be delivered to a given endpoint URL. These webhooks are set to trigger whenever a subscribed event occurs for any user created for your app.\n\nPlease visit the relevant Tink product page in our [documentation](https://docs.tink.com/ \"https://docs.tink.com/\") to learn more details on how to integrate and subscribe to webhook events related to product(s) you use.\n\nDue to the unreliable nature of the principle on which Webhook operate, we do not provide several guarantees regarding the delivery of events. The guarantees we do not provide are:\n\n * _Exactly-once delivery_ - Your webhook might be delivered multiple times or not be delivered at all.\n * _In-order delivery_ - We do not guarantee the order of webhooks delivered; it is possible that newer webhooks are delivered before older ones.\n\nBecause of the lack of these guarantees, we are unable to establish Service Level Objectives.\n\nWe can only assure our best effort to send webhooks at least once. To ensure proper webhook delivery, we use a retry mechanism.\n\nEvents v2 Webhook are designed to handle temporary disruptions in webhook events delivery. In the event of receiving HTTP status codes `408`, `429`, `500`, `502`, `503`, or `504` from your webhook endpoint, Tink will attempt to resend the webhook up to 3 times at exponential intervals. Tink won't retry delivery when establishing a connection to your client server is not possible. Our retry policy is subject to change at any time as part of our ongoing effort to improve webhook delivery reliability. We recommend checking this documentation for updates.\n\nWhen registering a new Webhook, please be aware that there might be a delay of up to 15 minutes before receiving any events.",
                "tags": [
                    "Events v2.Webhook",
                    "REGION.US"
                ],
                "summary": "Create Webhook Endpoint",
                "operationId": "WebhookEndpointService_CreateWebhookEndpoint",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tink.webhook.api.v2.CreateWebhookEndpointRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tink.webhook.api.v2.WebhookEndpoint"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "409": {
                        "description": "A webhook subscribed to one or more of the same events and url already exists",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/grpc.gateway.runtime.Error"
                        }
                    }
                }
            }
        },
        "/events/v2/webhook-endpoints/{id}": {
            "delete": {
                "security": [
                    {
                        "OAuth2Client": [
                            "webhook-endpoints"
                        ]
                    }
                ],
                "description": "Deletes a Webhook Endpoint.",
                "tags": [
                    "Events v2.Webhook",
                    "REGION.US"
                ],
                "summary": "Delete Webhook Endpoint",
                "operationId": "WebhookEndpointService_DeleteWebhookEndpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier of the specific webhook to be deleted.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/grpc.gateway.runtime.Error"
                        }
                    }
                }
            }
        },
        "/events/v2/webhook-endpoints/{webhookEndpoint.id}": {
            "patch": {
                "security": [
                    {
                        "OAuth2Client": [
                            "webhook-endpoints"
                        ]
                    }
                ],
                "description": "Updates a Webhook Endpoint.",
                "tags": [
                    "Events v2.Webhook",
                    "REGION.US"
                ],
                "summary": "Update Webhook Endpoint",
                "operationId": "WebhookEndpointService_UpdateWebhookEndpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "A Tink unique identifier for the webhook endpoint.",
                        "name": "webhookEndpoint.id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tink.webhook.api.v2.UpdateWebhookEndpointRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tink.webhook.api.v2.WebhookEndpoint"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing, or not valid",
                        "schema": {}
                    },
                    "403": {
                        "description": "You are not allowed to access the requested resource",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/grpc.gateway.runtime.Error"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/business-budgets": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "budgets-bfm"
                        ]
                    }
                ],
                "description": "Lists all available Business Budgets. Additionally, response can be filtered using query parameters\n\n### Active Budgets\nIn order to list only active Business Budgets, a request must be filled with both dates\n(_periodRangeGte_ and _periodRangeLte_) to *today*.\n\nExample (current day = \"2022-01-10\")\n```\n{\n    \"periodRangeGte\": \"2022-01-10\",\n    \"periodRangeLte\": \"2022-01-10\"\n}\n```",
                "tags": [
                    "Finance Management.Business Budgets",
                    "BETA"
                ],
                "summary": "List Business Budgets",
                "operationId": "BfmBudgetsService_ListBudgets",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Pagination size. Defines __max__ page size for pagination purpose.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination Token. Used to retrieve next page of results. Can be left empty if there are no other pages.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "List of account ids, if not specified results for all budgets available for given user to be returned.",
                        "name": "accountIdIn",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (inclusive) of budgets' periods range to filter. All budgets which at least partially happen in a given range will be returned. Accepted date format is `yyyy-mm-dd`.",
                        "name": "periodRangeGte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (inclusive) of budget's periods range to filter. All budgets which at least partially happen in a given range will be returned. Accepted date format is `yyyy-mm-dd`.",
                        "name": "periodRangeLte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Business Budget Recurrence Group ID. This field is UUID. If specified, then only budgets with this recurrence group id are returned.",
                        "name": "recurrenceGroupId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListBudgetsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "budgets-bfm"
                        ]
                    }
                ],
                "description": "Create Business Budget based on provided input\n\n#### Allocation Filter logic\n\nAllocation Filters are grouped into two groups:\n* _Income_ Allocation Filters\n* _Expense_ Allocation Filters\n\nDepending on a Business Budget type they can be treated differently:\n\n| Budget Type | Income Allocation Filters | Expense Allocation Filters |\n|-------------|---------------------------|----------------------------|\n| Income      | +                         | -                          |\n| Expense     | -                         | +                          |\n| Net Result  | +                         | +                          |\n\nAll Allocation Filters are connected with each other using logical __OR__ operator.\nEach Allocation Filter can contain list of following _Filter Types_:\n* Accounts\n* Categories\n* Tags\n\nAll _Filter Types_ are connected with each other using logical __AND__ operator unless present.\nDepending on _Filter Type_, elements of each respective list are handled differently:\n\n| Filter Type | Logical Operator | Description                                                          |\n|-------------|------------------|----------------------------------------------------------------------|\n| Account     | OR               | Each transaction must be connected with one of specified Account Ids |\n| Category    | OR               | Each transaction must have one of specified Categories               |\n| Tag         | AND              | Each transaction must contain all of specified Tags                  |\n\nDuring Business Budget creation, if there is no Account Ids specified in the Allocation Filter\nit will be autofilled with all existing Account Ids for a user at the time of creation, according to the\ntable below.\n\n| Budget Type | What is filled in case no Account Id is provided                           |\n|-------------|----------------------------------------------------------------------------|\n| INCOME      | Income Account Filter is filled with existing Account Ids                  |\n| EXPENSE     | Expense Account Filter is filled with existing Account Ids                 |\n| NET_RESULT  | Both Income and Expense Account Filter is filled with existing Account Ids |\n\n#### Allocation Filter Examples:\n\n* Two Accounts\n\nPayload:\n```\n{\n    \"accounts\": [\n        {\n            \"id\": \"738f25c79feb4bd08c1c64a80bf42136\"\n        },\n        {\n            \"id\": \"0ffb2875bdff4f76aad022742be05cdd\"\n        }\n    ]\n}\n```\nLogical Expression:\n```\n\"738f25c79feb4bd08c1c64a80bf42136\"\n    OR\n\"0ffb2875bdff4f76aad022742be05cdd\"\n```\n* Account and Two Categories\n\nPayload:\n```\n{\n    \"accounts\": [\n        {\n            \"id\": \"738f25c79feb4bd08c1c64a80bf42136\"\n        }\n    ],\n    \"categories\": [\n        {\n            \"id\": \"0287ecd633c04de9a182c9d0396715be\"\n        },\n        {\n            \"id\": \"f6b7079685704162b20e0d8b765ebf88\"\n        }\n    ]\n}\n```\nLogical Expression:\n```\n\"738f25c79feb4bd08c1c64a80bf42136\"\n    AND\n(\n    \"0287ecd633c04de9a182c9d0396715be\"\n        OR\n    \"f6b7079685704162b20e0d8b765ebf88\"\n)\n```\n* Three Tags\n\nPayload:\n```\n{\n    \"tags\": [\n        {\n            \"tag\": \"8281de98d57f46c4a9b1ea7063a4f76a\"\n        },\n        {\n            \"tag\": \"080322e28f0c4e5abbe856c7f3294cad\"\n        },\n        {\n            \"tag\": \"49025318c4ed47a48d736c7ba2ddab81\"\n        }\n    ]\n}\n```\nLogical Expression:\n```\n\"8281de98d57f46c4a9b1ea7063a4f76a\"\n    AND\n\"080322e28f0c4e5abbe856c7f3294cad\"\n    AND\n\"49025318c4ed47a48d736c7ba2ddab81\"\n```\n* Two Accounts and Two Categories and Three Tags\n\nPayload:\n```\n{\n    \"accounts\": [\n        {\n            \"id\": \"738f25c79feb4bd08c1c64a80bf42136\"\n        },\n        {\n            \"id\": \"0ffb2875-bdff-4f76-aad0-22742be05cdd\"\n        }\n    ],\n    \"categories\": [\n        {\n            \"id\": \"0287ecd633c04de9a182c9d0396715be\"\n        },\n        {\n            \"id\": \"f6b7079685704162b20e0d8b765ebf88\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"tag\": \"8281de98d57f46c4a9b1ea7063a4f76a\"\n        },\n        {\n            \"tag\": \"080322e28f0c4e5abbe856c7f3294cad\"\n        },\n        {\n            \"tag\": \"49025318c4ed47a48d736c7ba2ddab81\"\n        }\n    ]\n}\n```\nLogical Expression:\n```\n(\n    \"738f25c79feb4bd08c1c64a80bf42136\"\n        OR\n    \"0ffb2875bdff4f76aad022742be05cdd\"\n)\n    AND\n(\n    \"0287ecd633c04de9a182c9d0396715be\"\n        OR\n    \"f6b7079685704162b20e0d8b765ebf88\"\n)\n    AND\n(\n    \"8281de98d57f46c4a9b1ea7063a4f76a\"\n        AND\n    \"080322e28f0c4e5abbe856c7f3294cad\"\n        AND\n    \"49025318c4ed47a48d736c7ba2ddab81\"\n)\n```",
                "tags": [
                    "Finance Management.Business Budgets",
                    "BETA"
                ],
                "summary": "Create Business Budget",
                "operationId": "BfmBudgetsService_CreateBudget",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1BusinessBudget"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1BusinessBudget"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/business-budgets/{budgetId}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "budgets-bfm"
                        ]
                    }
                ],
                "description": "Get provided Business Budget by provided `budget_id`",
                "tags": [
                    "Finance Management.Business Budgets",
                    "BETA"
                ],
                "summary": "Get Detailed Business Budget",
                "operationId": "BfmBudgetsService_GetBudgetDetails",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business Budget ID. This field is UUID",
                        "name": "budgetId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1BusinessBudget"
                        }
                    },
                    "404": {
                        "description": "Budget not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2User": [
                            "budgets-bfm"
                        ]
                    }
                ],
                "description": "Delete specified Business Budget",
                "tags": [
                    "Finance Management.Business Budgets",
                    "BETA"
                ],
                "summary": "Delete Business Budget",
                "operationId": "BfmBudgetsService_DeleteBudget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business Budget ID. This field is UUID",
                        "name": "budgetId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "SINGLE",
                            "AFTER",
                            "ALL"
                        ],
                        "type": "string",
                        "default": "SINGLE",
                        "description": "Propagation Type for Business Budget Deletion. Selected propagation type applies only for Business Budgets\nin the same recurrence group.\n\n - SINGLE: Propagation mode: _SINGLE_. Requested change will be applied only to the specified Business Budget\n - AFTER: Propagation mode: _AFTER_. Requested change will be applied to the specified Business Budget\nand all Business Budgets in the Recurrence that occur __after__ the requested one\n - ALL: Propagation mode: _ALL_. Requested change will be applied to all Business Budgets in Recurrence",
                        "name": "propagation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "404": {
                        "description": "Budget not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "OAuth2User": [
                            "budgets-bfm"
                        ]
                    }
                ],
                "description": "Update Business Budget by provided `budget_id`\n\n#### Update request limitation\n\nNot all changes are permitted with update request. If such change is needed, we recommend creating a new budget.\n\nFor recurrence properties, only changing the end date to later is allowed. In other words, it’s not allowed to:\n* change recurrence frequency (for example from Weekly to Monthly)\n* change start date of recurrence (as the Start date defines week day for budget start for Weekly frequency, and day of the month for budget start for Monthly frequency\n* change end date to earlier than previously set (as it will cause deletion of existing recurring budgets, and potential loss of Customer information)",
                "tags": [
                    "Finance Management.Business Budgets",
                    "BETA"
                ],
                "summary": "Update Business Budget",
                "operationId": "BfmBudgetsService_UpdateBudget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business Budget ID. This field is UUID",
                        "name": "budgetId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Business Budget Update Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1UpdateBusinessBudgetBody"
                        }
                    },
                    {
                        "enum": [
                            "SINGLE",
                            "AFTER",
                            "ALL"
                        ],
                        "type": "string",
                        "default": "SINGLE",
                        "description": "Update Propagation Type. Selected propagation type applies only for Business Budgets\nin the same recurrence group.\n\n - SINGLE: Propagation mode: _SINGLE_. Requested change will be applied only to the specified Business Budget\n - AFTER: Propagation mode: _AFTER_. Requested change will be applied to the specified Business Budget\nand all Business Budgets in the Recurrence that occur __after__ the requested one\n - ALL: Propagation mode: _ALL_. Requested change will be applied to all Business Budgets in Recurrence",
                        "name": "propagation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1BusinessBudget"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/business-budgets/{budgetId}/history": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "budgets-bfm"
                        ]
                    }
                ],
                "description": "List all historical Business Budgets (ones that already ended) and current one.\n\nReturned Business Budgets are ordered by descending start date.",
                "tags": [
                    "Finance Management.Business Budgets",
                    "BETA"
                ],
                "summary": "List Business Budget History",
                "operationId": "BfmBudgetsService_ViewBudgetHistory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business Budget ID. This field is UUID",
                        "name": "budgetId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pagination Token. Used to retrieve next page of results. Can be left empty if there are no other pages.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Pagination size. Defines __max__ page size for pagination purpose.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "List of account ids, if not specified results for all budgets available for given user to be returned.",
                        "name": "accountIdIn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListBudgetHistoryResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/cash-flow-summaries/{resolution}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "cash-flow"
                        ]
                    }
                ],
                "description": "Returns aggregated transactions information for specified length of time with requested period resolution.\nIf period does not contain any transactions or events it will be still generated with sums equal to zero.",
                "tags": [
                    "Finance Management.Cash flow",
                    "BETA"
                ],
                "summary": "List cash flows summaries",
                "operationId": "CashFlowService_ListCashFlowSummaries",
                "parameters": [
                    {
                        "enum": [
                            "RESOLUTION_UNSPECIFIED",
                            "DAILY",
                            "WEEKLY",
                            "MONTHLY",
                            "YEARLY"
                        ],
                        "type": "string",
                        "description": "Resolution of the summary",
                        "name": "resolution",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date of the earliest transaction to be returned. ISO8601 format: YYYY-MM-DD. If the date is in the middle of the period specified by the resolution, it will be adjusted to the start of the period.",
                        "name": "fromGte",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date of the latest transaction to be returned. ISO8601 format: YYYY-MM-DD. If the date is in the middle of the period specified by the resolution, it will be adjusted to the end of the period.",
                        "name": "toLte",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The next_page_token value returned from a previous List request, if any.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "List of account ids, if not specified results for all available accounts for given user will be returned.",
                        "name": "accountIdIn",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO 4127 currency code of transactions that are used to calculate cash flow. If not set, default user currency will be used.\nYou can change it here: https://docs.tink.com/api#general/user/update-user-profile.",
                        "name": "currencyEq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListCashFlowSummariesResponse"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. This could for example be an invalid date or time range. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to the authenticated request.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/cost-of-living": {},
        "/finance-management/v1/cost-of-living/{costOfLivingId}/transactions": {},
        "/finance-management/v1/financial-calendar-events": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar:readonly"
                        ]
                    }
                ],
                "description": "Perform lookup in events that start at `due_date_gte` time and end at `due_date_lte`.\nAccepted time format is ISO8601: YYYY-MM-DD.\nIt is possible to fetch data between 10 years (early and late). If time range will be longer than that no data will be returned\nand error will be thrown.\n\nPlease keep in mind, that in case of Income event (positive amount), `Action Indicator` presents different logic.\n\n### Income Action Indicator Meaning\n\nAction Indicator | Meaning\n---- | -----------------\n`NO_REMAINING_ACTION_NEEDED` | Event reconciled and completed\n`ACTION_LATER` | Action not yet past `dueDate`\n`NOT_COMPLETED_PAST_DUE_DATE` | Event after `dueDate`, not completed and not fully reconciled\n`COMPLETED_NOT_RECONCILED_PAST_DUE_DATE` | Event after `dueDate`, completed but not fully reconciled\n\n#### Access Management\n\nEvent access is defined on a per __accountId__ basis.\nAccount ids that user has access to are specified in __account_id_in__ parameter.\nEvent will be accessible only if user has access to ALL accounts related with the event.\nNot specifying __accountIds__ (or specifying it as an empty list) is equivalent to indicating that the user has access\naccess to all currently available accounts.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Lists calendar events within given timeframe",
                "operationId": "FinancialCalendarService_ListCalendarEvents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Date of the earliest event to be returned. ISO8601 format YYYY-MM-DD.",
                        "name": "dueDateGte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Date of the latest event to be returned. ISO8601 format YYYY-MM-DD.",
                        "name": "dueDateLte",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The next_page_token value returned from a previous List request, if any.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "List of account ids, if not specified all events available for given user will be returned.",
                        "name": "accountIdIn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListCalendarEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Request is not following the specification. See body for details.",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar"
                        ]
                    }
                ],
                "description": "Create a new calendar event based on provided data.\n\n### Event types\n\nType | Condition | Available Action Indicators\n---- | ----------------- | -----------------\nIncome | Positive Event Amount | `NO_REMAINING_ACTION_NEEDED` `ACTION_LATER` `NOT_COMPLETED_PAST_DUE_DATE` `COMPLETED_NOT_RECONCILED_PAST_DUE_DATE`\nExpense | Negative Event Amount | `NO_REMAINING_ACTION_NEEDED` `ACTION_LATER` `ACTION_URGENT` `ACTION_CRITICAL` `NOT_COMPLETED_PAST_DUE_DATE` `COMPLETED_NOT_RECONCILED_PAST_DUE_DATE`\n\nPlease keep in mind, that in case of Income event (positive amount), `Action Indicator` presents different logic.\n\n### Income Action Indicator Meaning\n\nAction Indicator | Meaning\n---- | -----------------\n`NO_REMAINING_ACTION_NEEDED` | Event reconciled and completed\n`ACTION_LATER` | Action not yet past `dueDate`\n`NOT_COMPLETED_PAST_DUE_DATE` | Event after `dueDate`, not completed and not fully reconciled\n`COMPLETED_NOT_RECONCILED_PAST_DUE_DATE` | Event after `dueDate`, completed but not fully reconciled\n\n### Access Management\n\nEvent access is defined on a per __accountId__ basis.\nNot specifying __accountIds__ field (or specifying it as an empty list) is equivalent to indicating that event will\nbe accessible only by the users that had access to all accounts which were present at the moment of event creation.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Create a new calendar event",
                "operationId": "FinancialCalendarService_CreateCalendarEvent",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEvent"
                        }
                    },
                    "400": {
                        "description": "failed to parse event date",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-events/{calendarEventId}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar:readonly"
                        ]
                    }
                ],
                "description": "Perform lookup in events to find the one with matching id.\n\nPlease keep in mind, that in case of Income event (positive amount), `Action Indicator` presents different logic.\n\n### Income Action Indicator Meaning\n\nAction Indicator | Meaning\n---- | -----------------\n`NO_REMAINING_ACTION_NEEDED` | Event reconciled and completed\n`ACTION_LATER` | Action not yet past `dueDate`\n`NOT_COMPLETED_PAST_DUE_DATE` | Event after `dueDate`, not completed and not fully reconciled\n`COMPLETED_NOT_RECONCILED_PAST_DUE_DATE` | Event after `dueDate`, completed but not fully reconciled",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Get event by id",
                "operationId": "FinancialCalendarService_GetCalendarEvent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Calendar event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEvent"
                        }
                    },
                    "404": {
                        "description": "No event found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar"
                        ]
                    }
                ],
                "description": "Delete event that matches given `calendar_event_id`.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Delete event by id",
                "operationId": "FinancialCalendarService_DeleteCalendarEvent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id (UUID) of the event to be deleted",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "SINGLE",
                            "ALL",
                            "FUTURE"
                        ],
                        "type": "string",
                        "default": "SINGLE",
                        "description": "Specify whether to delete selected, selected and future or all events.\n\n - SINGLE: Default value, only selected event will be affected\n - ALL: All events in the series will be affected\n - FUTURE: Only selected event and future events in the series will be affected",
                        "name": "recurring",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "404": {
                        "description": "No event found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar"
                        ]
                    }
                ],
                "description": "Make changes to already existing event. Event specified by `calendar_event_id` will be updated with values from body.\nFor Action Indicator explanation please see Create Calendar Event endpoint.\n\n### Access Management\n\nSpecifying __accountIds__ field as an empty list is equivalent to indicating that event will\nbe accessible only by the users that had access to all accounts which were present the moment of event update.\n\nPlease keep in mind, that in case of Income event (positive amount), `Action Indicator` presents different logic.\n\n### Income Action Indicator Meaning\n\nAction Indicator | Meaning\n---- | -----------------\n`NO_REMAINING_ACTION_NEEDED` | Event reconciled and completed\n`ACTION_LATER` | Action not yet past `dueDate`\n`NOT_COMPLETED_PAST_DUE_DATE` | Event after `dueDate`, not completed and not fully reconciled\n`COMPLETED_NOT_RECONCILED_PAST_DUE_DATE` | Event after `dueDate`, completed but not fully reconciled",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Update event by id",
                "operationId": "FinancialCalendarService_UpdateCalendarEvent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Calendar event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Event with updated fields",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateCalendarEventRequestUpdateEventBody"
                        }
                    },
                    {
                        "enum": [
                            "SINGLE",
                            "ALL",
                            "FUTURE"
                        ],
                        "type": "string",
                        "default": "SINGLE",
                        "description": "Specify whether to update selected, selected and future or all events.\n\n - SINGLE: Default value, only selected event will be affected\n - ALL: All events in the series will be affected\n - FUTURE: Only selected event and future events in the series will be affected",
                        "name": "recurring",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEvent"
                        }
                    },
                    "400": {
                        "description": "failed to parse dueDate",
                        "schema": {}
                    },
                    "404": {
                        "description": "No event found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-events/{calendarEventId}/attachments": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar"
                        ]
                    }
                ],
                "description": "Add an attachment to the calendar event with ID equal to `calendar_event_id`",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Add attachment",
                "operationId": "FinancialCalendarService_CreateCalendarEventAttachment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Attachment to be added",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEventAttachment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEventAttachment"
                        }
                    },
                    "404": {
                        "description": "calendar event not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-events/{calendarEventId}/attachments/{attachmentId}": {
            "delete": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar"
                        ]
                    }
                ],
                "description": "Remove attachment given its ID `attachment_id` from event specified by `calendar_event_id`.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Delete attachment",
                "operationId": "FinancialCalendarService_DeleteCalendarEventAttachment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Attachment ID (UUID)",
                        "name": "attachmentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "404": {
                        "description": "calendar event not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-events/{calendarEventId}/reconciliations": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar"
                        ]
                    }
                ],
                "description": "Perform reconciliation (linking) process on event based on provided `calendar_event_id`.\nReconciliation process links target event with existing transaction defined in request body by `transaction_id`.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Reconcile(link) event with a transaction",
                "operationId": "FinancialCalendarService_CreateCalendarEventReconciliation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reconciliation which includes Transaction ID (UUID)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1Reconciliation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1Reconciliation"
                        }
                    },
                    "404": {
                        "description": "No event found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-events/{calendarEventId}/reconciliations/details": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar:readonly"
                        ]
                    }
                ],
                "description": "Get details of reconciliations between event and transactions",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Get reconciliations(links) details",
                "operationId": "FinancialCalendarService_GetCalendarEventReconciliationDetails",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEventReconciliationDetails"
                        }
                    },
                    "404": {
                        "description": "No event found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-events/{calendarEventId}/reconciliations/suggestions": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar:readonly"
                        ]
                    }
                ],
                "description": "Get Suggested transaction ids that may be used for reconciliation of given calendar event (with `calendar_event_id`).\n\n#### Access Management\n\nThis endpoint will only list suggested _Transactions_ that are related to the _Accounts_\nrelated with Financial Calendar event.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Get Suggested transactions",
                "operationId": "FinancialCalendarService_ListReconciliationSuggestions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListReconciliationSuggestionsResponse"
                        }
                    },
                    "404": {
                        "description": "calendar event not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-events/{calendarEventId}/reconciliations/{transactionId}": {
            "delete": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar"
                        ]
                    }
                ],
                "description": "Delete reconciliation(link) between event and transaction.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Delete reconciliation(link)",
                "operationId": "FinancialCalendarService_DeleteCalendarEventReconciliation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction ID (UUID)",
                        "name": "transactionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "404": {
                        "description": "No event found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-events/{calendarEventId}/recurring-group": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar"
                        ]
                    }
                ],
                "description": "Define an event (with `calendar_event_id`) as recurring.\nEvent recurrence is compliant with RFC-5545 Recurrence Rule pattern.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "Make an event recurring",
                "operationId": "FinancialCalendarService_CreateCalendarEventRecurringGroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "calendarEventId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Recurring Group to be created and attached to the Calendar Event\n\nIMPORTANT:\n\n`FREQ` parameter values are restricted to `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.\n\nIf RRULE does not contain DTSTART parameter then due_date will be used as `DTSTART`.\n\nIf RRULE does not contain any valid period (i.e `UNTIL` parameter is before `DTSTART`) or RRULE doesn't overlap with the event - validation error will be thrown.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEventRecurringGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1CalendarEventRecurringGroup"
                        }
                    },
                    "400": {
                        "description": "user input invalid",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/financial-calendar-summaries/{resolution}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "financial-calendar:readonly"
                        ]
                    }
                ],
                "description": "List events that match specified resolution. Resolution parameter `resolution` is defined as an enum.\nGlossary:\n DAILY = 1\n WEEKLY = 2\n MONTHLY = 3\n YEARLY = 4\n\n#### Access Management\n\nEvent access is defined on a per __accountId__ basis.\nAccount ids that user has access to are specified in __account_id_in__ parameter.\nEvent will be accessible only if user has access to ALL accounts related with the event.\nNot specifying __accountIds__ (or is specifying it as an empty list) is equivalent to indicating that the user has access\naccess to all currently available accounts.",
                "tags": [
                    "Finance Management.Financial calendar",
                    "BETA"
                ],
                "summary": "List events summaries for the given period",
                "operationId": "FinancialCalendarService_ListCalendarSummaries",
                "parameters": [
                    {
                        "enum": [
                            "RESOLUTION_UNSPECIFIED",
                            "DAILY",
                            "WEEKLY",
                            "MONTHLY",
                            "YEARLY"
                        ],
                        "type": "string",
                        "description": "Resolution of the summaries to list",
                        "name": "resolution",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Period start date. ISO8601 format YYYY-MM-DD. If the date is in the middle of the period specified by the resolution, it will be adjusted to the start of the period.",
                        "name": "periodGte",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Period end date. ISO8601 format YYYY-MM-DD. If the date is in the middle of the period specified by the resolution, it will be adjusted to the end of the period.",
                        "name": "periodLte",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "name": "accountIdIn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListCalendarSummariesResponse"
                        }
                    },
                    "400": {
                        "description": "invalid arguments for pagination",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/subscriptions": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "subscriptions:read"
                        ]
                    }
                ],
                "description": "Lists all subscriptions belonging to the user. Optionally it can be filtered for specific accounts.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Subscriptions",
                    "ENTERPRISE"
                ],
                "summary": "List user subscriptions",
                "operationId": "getSubscriptions",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "(Optional) List of user accounts.",
                        "name": "accountId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-example": "MQ==",
                        "description": "(Optional) The first token is presented on the response of the first call if there are multiple pages.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "x-example": 10,
                        "description": "(Optional) Size of the page to fetch.",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user subscriptions.",
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.List%20Subscriptions"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "403": {
                        "description": "If the App is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/finance-management/v1/subscriptions/{subscriptionId}/transactions": {
            "get": {
                "security": [
                    {
                        "OAuth2": [
                            "subscriptions:read"
                        ]
                    }
                ],
                "description": "Lists all transactions belonging to the subscription.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance Management.Subscriptions",
                    "ENTERPRISE"
                ],
                "summary": "List subscription transactions",
                "operationId": "getTransactions",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d9f134ee2eb44846a4e02990ecc8d32e",
                        "description": "ID of the subscription",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "x-example": "MQ==",
                        "description": "(Optional) The first token is presented on the response of the first call if there are multiple pages.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "x-example": 10,
                        "description": "(Optional) Size of the page to fetch.",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of subscription transactions.",
                        "schema": {
                            "$ref": "#/definitions/Finance%20Management.List%20Transactions"
                        }
                    },
                    "401": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "If the provided subscriptionId is not found.",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/internal/connectivity/v1/balance-refresh": {},
        "/internal/predicted-recurring-transactions": {},
        "/internal/recurring-transactions": {},
        "/internal/recurring-transactions-groups": {},
        "/internal/recurring-transactions-groups/{groupId}": {},
        "/internal/refresh": {},
        "/link/v1/session": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "link-session:write"
                        ]
                    }
                ],
                "description": "You can optionally use a session to configure certain aspects of the Tink Link flow for a specific user (such as securely pre-filling information or configuring specific behaviors). A session is one-time use only and has a lifetime of 10 minutes.",
                "tags": [
                    "General.Tink Link.Session"
                ],
                "summary": "Create a session",
                "operationId": "SessionService_CreateSession",
                "parameters": [
                    {
                        "description": "Configuration for the session to be created.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1SessionBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1CreateSessionResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/link/v1/session/{sessionId}": {
            "get": {
                "security": [
                    {
                        "OAuth2User": [
                            "link-session:read"
                        ]
                    }
                ],
                "tags": [
                    "SessionService"
                ],
                "operationId": "SessionService_GetSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1GetSessionResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/partner-integration/v1/merchants": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "merchants:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "merchants:readonly"
                        ]
                    }
                ],
                "description": "List all merchants associated with the given application.",
                "tags": [
                    "Partner Integration.Merchants",
                    "BETA"
                ],
                "summary": "List merchants",
                "operationId": "MerchantsService_ListMerchants",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The next_page_token value returned from a previous request, null for first request.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The id of the application associated with the merchant.",
                        "name": "appIdEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Query to filter the merchants by.",
                        "name": "queryString",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListMerchantsResponse"
                        }
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The application used does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "merchants"
                        ],
                        "OAuth2OrgUser": [
                            "merchants"
                        ]
                    }
                ],
                "description": "Creates a new merchant.",
                "tags": [
                    "Partner Integration.Merchants",
                    "BETA"
                ],
                "summary": "Create merchant",
                "operationId": "MerchantsService_CreateMerchant",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1Merchant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1Merchant"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The application used does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/partner-integration/v1/merchants/json-schema": {},
        "/partner-integration/v1/merchants/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "merchants:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "merchants:readonly"
                        ]
                    }
                ],
                "description": "Retrieve information about an existing merchant.",
                "tags": [
                    "Partner Integration.Merchants",
                    "BETA"
                ],
                "summary": "Get merchant",
                "operationId": "MerchantsService_GetMerchant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant requested.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1Merchant"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/bulk-payments/{id}:initiate": {},
        "/payment/v1/mandate-payments": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "mandate-payments"
                        ]
                    }
                ],
                "description": "Creates a mandate payment, when given a valid consent id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment.Mandate Payment",
                    "BETA"
                ],
                "summary": "Create mandate payment",
                "operationId": "createMandatePayment",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "8e03978e-40d5-43e8-bc93-6894a57f9324",
                        "description": "An idempotency key is any value generated by the client which the resource server uses to recognize subsequent retries of the same request. The Idempotency-Key HTTP request header field carries this key.",
                        "name": "Idempotency-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment.Mandate%20Payment.Request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Mandate Payment successfully created.",
                        "schema": {
                            "$ref": "#/definitions/Payment.Mandate%20Payment.Response"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Check the error message or the documentation of each field for more information."
                    },
                    "401": {
                        "description": "Unauthorized request."
                    },
                    "403": {
                        "description": "The resource does not belong to the subject or scopes associated with the access token."
                    },
                    "409": {
                        "description": "Request retried while the original request is still being processed."
                    },
                    "422": {
                        "description": "Attempt to reuse an idempotency key with a different request payload."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/payment/v1/mandate-payments/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "mandate-payments:readonly"
                        ]
                    }
                ],
                "description": "Returns the mandate payment of a given mandate payment id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment.Mandate Payment",
                    "BETA"
                ],
                "summary": "Get mandate payment",
                "operationId": "getMandatePayment",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "b6704301-8a12-46a5-a315-c3cebd9b899c",
                        "description": "The id of a mandate payment.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mandate Payment successfully fetched.",
                        "schema": {
                            "$ref": "#/definitions/Payment.Mandate%20Payment.Response"
                        }
                    },
                    "401": {
                        "description": "The scopes associated with the access token are not allowed by the resource."
                    },
                    "403": {
                        "description": "The resource does not belong to the subject or scopes associated with the access token."
                    },
                    "404": {
                        "description": "The Mandate Payment with given id does not exist."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/payment/v1/merchants/{account.merchantId}/accounts/{account.id}": {
            "patch": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Updates the settlement account object, more specifically only the payout account object within can be updated.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "Update account",
                "operationId": "SettlementAccountsService_UpdateSettlementAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The merchant id tied to the account.",
                        "name": "account.merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the account. Output only.",
                        "name": "account.id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The new updated account.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccount"
                        }
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "The set of field mask paths.",
                        "name": "updateMask.paths",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccount"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant or account specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/merchants/{merchantId}/accounts": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "List all settlement accounts for a given merchant.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "List accounts",
                "operationId": "SettlementAccountsService_ListSettlementAccounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token to the requested page.",
                        "name": "pageToken",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListSettlementAccountsResponse"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Creates a new settlement account for the merchant.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "Create account",
                "operationId": "SettlementAccountsService_CreateSettlementAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The merchant id tied to the account.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccount"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/merchants/{merchantId}/accounts/{accountId}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Retrieves a specific settlement account for a given merchant.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "Get account",
                "operationId": "SettlementAccountsService_GetSettlementAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the account.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccount"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant or account specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/merchants/{merchantId}/accounts/{accountId}/refunds": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Lists the refunds for a specific settlement account and merchant.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "List refunds",
                "operationId": "SettlementAccountsService_ListSettlementAccountRefunds",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the account.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token to the requested page.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date less than or equal operator.",
                        "name": "createdTimeLte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date greater than or equal operator.",
                        "name": "createdTimeGte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reference to filter the refunds by.",
                        "name": "referenceEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Transaction id to filter the refunds by.",
                        "name": "transactionIdEq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListSettlementAccountRefundsResponse"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant or account specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Creates a refund for the specific transaction, settlement account and merchant.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "Create refund",
                "operationId": "SettlementAccountsService_CreateSettlementAccountRefund",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of the merchant. Output only.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Id of the settlement account. Output only.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountRefund"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountRefund"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant, account or transaction specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/merchants/{merchantId}/accounts/{accountId}/refunds/{refundId}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Retrieves a specific refund for a specific settlement account and merchant.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "Get refund",
                "operationId": "SettlementAccountsService_GetSettlementAccountRefund",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the account.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the refund.",
                        "name": "refundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountRefund"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant, account or refund specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/merchants/{merchantId}/accounts/{accountId}/transactions": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Lists the transactions for a specific settlement account for a given merchant.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "List transactions",
                "operationId": "SettlementAccountsService_ListSettlementAccountTransactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the account.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token to the requested page.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date less than or equal operator.",
                        "name": "timestampLte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date greater than or equal operator.",
                        "name": "timestampGte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reference to filter the transactions by.",
                        "name": "referenceEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Payment request id to filter the transactions by.",
                        "name": "paymentRequestIdEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type to filter the transactions by.",
                        "name": "typeEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Query to filter the transactions by.",
                        "name": "queryString",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListSettlementAccountTransactionsResponse"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant or account specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/merchants/{merchantId}/accounts/{accountId}/transactions/{transactionId}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Retrieves a specific transaction for a specific settlement account and merchant.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "Get transaction",
                "operationId": "SettlementAccountsService_GetSettlementAccountTransaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the account.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the transaction.",
                        "name": "transactionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountTransaction"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant, account or transaction specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/merchants/{merchantId}/accounts/{accountId}/withdrawals": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Lists the withdrawals for a specific settlement account and merchant.",
                "tags": [
                    "Payment.Settlement Accounts",
                    "BETA"
                ],
                "summary": "List withdrawals",
                "operationId": "SettlementAccountsService_ListSettlementAccountWithdrawals",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the account.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of items to return.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token to the requested page.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date less than or equal operator.",
                        "name": "createdTimeLte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date greater than or equal operator.",
                        "name": "createdTimeGte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reference to filter the withdrawals by.",
                        "name": "referenceEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Transaction id to filter the withdrawals by.",
                        "name": "transactionIdEq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListSettlementAccountWithdrawalsResponse"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant or account specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Creates a withdrawal for the specific transaction, settlement account and merchant.",
                "tags": [
                    "Payment.Settlement Accounts",
                    "BETA"
                ],
                "summary": "Create withdrawal",
                "operationId": "SettlementAccountsService_CreateSettlementAccountWithdrawal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of the merchant. Output only.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Id of the settlement account. Output only.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountWithdrawal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountWithdrawal"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant or account specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/merchants/{merchantId}/accounts/{accountId}/withdrawals/{withdrawalId}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "settlement-accounts:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts:readonly"
                        ]
                    },
                    {
                        "OAuth2Client": [
                            "settlement-accounts"
                        ],
                        "OAuth2OrgUser": [
                            "settlement-accounts"
                        ]
                    }
                ],
                "description": "Retrieves a specific withdrawal for a specific settlement account and merchant.",
                "tags": [
                    "Payment.Settlement Accounts",
                    "BETA"
                ],
                "summary": "Get withdrawal",
                "operationId": "SettlementAccountsService_GetSettlementAccountWithdrawal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the merchant.",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the account.",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the withdrawal.",
                        "name": "withdrawalId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountWithdrawal"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Please check the error message for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant, account or withdrawal specified could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/payment/v1/settlement-account-payment-requests": {
            "post": {
                "security": [
                    {
                        "OAuth2Client": [
                            "payment:write"
                        ]
                    }
                ],
                "description": "Creates a payment request and sends the money to a specific settlement account for the specified currency.\nNote: in order to utilize this endpoint you need to have been onboarded for Settlement Accounts.",
                "tags": [
                    "Payment.Settlement Accounts"
                ],
                "summary": "Create payment request",
                "operationId": "SettlementAccountPaymentRequestsService_CreateSettlementAccountPaymentRequest",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SettlementAccountPaymentRequest"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "The scopes associated with the access token is not allowed the resource.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "The merchant or the belonging account could not be found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/risk/v1/expense-checks": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "expense-checks:readonly"
                        ]
                    }
                ],
                "description": "Lists expense checks.",
                "tags": [
                    "Risk.Expense Check"
                ],
                "summary": "List expense checks",
                "operationId": "ExpenseChecksService_ListExpenseChecks",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Maximum number of instances returned.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the requested page.",
                        "name": "pageToken",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ListExpenseChecksResponse"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. This could for example be an invalid app id. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "expense-checks:create"
                        ]
                    }
                ],
                "description": "Creates an expense check report containing the expenses of an end-user.",
                "tags": [
                    "Risk.Expense Check"
                ],
                "summary": "Create an expense check report",
                "operationId": "ExpenseChecksService_CreateExpenseCheck",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1CreateExpenseCheckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ExpenseCheck"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation or there is not enough data to perform calculations on. Check the error message or the documentation for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/risk/v1/expense-checks/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "expense-checks:readonly"
                        ]
                    }
                ],
                "description": "Gets an expense check by id.",
                "tags": [
                    "Risk.Expense Check"
                ],
                "summary": "Get an expense check",
                "operationId": "ExpenseChecksService_GetExpenseCheck",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of an expense check.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ExpenseCheck"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. This could for example be an invalid id. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "An expense check with the given id was not found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2Client": [
                            "expense-checks:delete"
                        ]
                    }
                ],
                "description": "Deletes an expense check by id.",
                "tags": [
                    "Risk.Expense Check"
                ],
                "summary": "Delete an expense check",
                "operationId": "ExpenseChecksService_DeleteExpenseCheck",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of an expense check.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "An expense check with the given id was not found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/risk/v1/risk-insights": {
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "risk-insights:create"
                        ]
                    }
                ],
                "description": "Creates a request and returns the risk insights report id of an end-user as a JSON response.",
                "tags": [
                    "Risk.Risk Insights"
                ],
                "summary": "Create Risk Insights",
                "operationId": "RiskInsightsService_CreateRiskInsights",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1CreateRiskInsightRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1CreateRiskInsightResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization token is missing or invalid.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/risk/v1/risk-insights/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "risk-insights:readonly"
                        ],
                        "OAuth2User": [
                            "risk-insights:readonly"
                        ]
                    }
                ],
                "description": "Get a risk insights report of a user.",
                "tags": [
                    "Risk.Risk Insights"
                ],
                "summary": "Get a Risk Insights",
                "operationId": "RiskInsightsService_GetRiskInsights",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier of the risk insights report.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1RiskInsights"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. This could for example be a malformed authorization header. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authorization token is missing or invalid.",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2Client": [
                            "risk-insights:delete"
                        ]
                    }
                ],
                "description": "Deletes a risk insights report by id.",
                "tags": [
                    "Risk.Risk Insights"
                ],
                "summary": "Delete a Risk Insights",
                "operationId": "RiskInsightsService_DeleteRiskInsights",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of a risk insights.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "A risk insights with the given id was not found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/v2/income-checks": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "income-checks:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "income-checks:readonly"
                        ]
                    }
                ],
                "description": "Lists income checks.",
                "tags": [
                    "Risk.Income Check"
                ],
                "summary": "List income checks",
                "operationId": "IncomeChecksService_ListIncomeChecks",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Maximum number of instances returned.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the requested page.",
                        "name": "pageToken",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "App identifier to filter on.",
                        "name": "appIdEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Social security number to filter on.",
                        "name": "identity.ssnEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "External reference to filter on.",
                        "name": "externalReferenceEq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Less than or equal to date string to filter on. ISO8601 UTC in Zulu: YYYY-MM-DDThh:mm:ssZ.",
                        "name": "dateLte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Greater than or equal to date string to filter on. ISO8601 UTC in Zulu: YYYY-MM-DDThh:mm:ssZ.",
                        "name": "dateGte",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v2ListIncomeChecksResponse"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. This could for example be an invalid app id. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OAuth2User": [
                            "income-checks:create"
                        ]
                    }
                ],
                "description": "Creates a request and returns the income of an end-user as a JSON response.",
                "tags": [
                    "Risk.Income Check"
                ],
                "summary": "Create an income check",
                "operationId": "IncomeChecksService_CreateIncomeCheck",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2CreateIncomeCheckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v2IncomeCheck"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation or there is not enough data to perform calculations on. Check the error message or the documentation for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/v2/income-checks/report-data/{reportId}": {},
        "/v2/income-checks/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "income-checks:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "income-checks:readonly"
                        ],
                        "OAuth2User": [
                            "income-checks:readonly"
                        ]
                    }
                ],
                "description": "Gets an income check by id.",
                "tags": [
                    "Risk.Income Check"
                ],
                "summary": "Get an income check",
                "operationId": "IncomeChecksService_GetIncomeCheck",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of an income check.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v2IncomeCheck"
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. This could for example be an invalid id. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "An income check with the given id was not found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OAuth2Client": [
                            "income-checks:delete"
                        ],
                        "OAuth2OrgUser": [
                            "income-checks:delete"
                        ]
                    }
                ],
                "description": "Deletes an income check by id.",
                "tags": [
                    "Risk.Income Check"
                ],
                "summary": "Delete an income check",
                "operationId": "IncomeChecksService_DeleteIncomeCheck",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of an income check.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "An income check with the given id was not found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        },
        "/v2/income-checks/{id}:generate-pdf": {
            "get": {
                "security": [
                    {
                        "OAuth2Client": [
                            "income-checks:readonly"
                        ],
                        "OAuth2OrgUser": [
                            "income-checks:readonly"
                        ]
                    }
                ],
                "description": "Generates an income check as PDF.",
                "tags": [
                    "Risk.Income Check"
                ],
                "summary": "Generate an income check as PDF",
                "operationId": "IncomeChecksService_GeneratePdf",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The internal identifier of an income check.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.(streaming responses)",
                        "schema": {
                            "type": "object",
                            "title": "Stream result of apiHttpBody",
                            "properties": {
                                "error": {
                                    "$ref": "#/definitions/runtimeStreamError"
                                },
                                "result": {
                                    "$ref": "#/definitions/apiHttpBody"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request does not pass validation. This could for example be an invalid app id. Check the error message or the documentation of each field for more information.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Wrong scopes associated with the access token.",
                        "schema": {}
                    },
                    "403": {
                        "description": "The resource does not belong to subject associated with the access token.",
                        "schema": {}
                    },
                    "404": {
                        "description": "An income check with the given id was not found.",
                        "schema": {}
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/runtimeError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "*ProviderListResponse*": {
            "description": "The provider list response object.",
            "type": "object",
            "required": [
                "providers"
            ],
            "properties": {
                "providers": {
                    "description": "List of providers that match the query",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Connectivity%20v1.Provider"
                    }
                }
            }
        },
        ".Get Recurring Transactions Group Response": {
            "type": "object",
            "title": ".Get Recurring Transactions Group Response",
            "properties": {
                "recurringTransactionsGroup": {
                    "description": "A single recurring transactions group.",
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Recurring%20Transactions%20Group",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "AVRAddress": {
            "type": "object",
            "required": [
                "city",
                "postalCode",
                "street",
                "type"
            ],
            "properties": {
                "city": {
                    "description": "The city.",
                    "type": "string",
                    "example": "London"
                },
                "countryCode": {
                    "description": "ISO 3166-2 country code.",
                    "type": "string",
                    "example": "US"
                },
                "postalCode": {
                    "description": "The postal code.",
                    "type": "string",
                    "example": "11155"
                },
                "street": {
                    "description": "The street address.",
                    "type": "string",
                    "example": "1600 Pennsylvania Avenue NW"
                },
                "subdivision": {
                    "description": "The subdivision. In the U.S. this would be the state.",
                    "type": "string",
                    "example": "Ohio"
                },
                "type": {
                    "description": "The address type. Possible values:\nBUSINESS: The address is the physical location of a business.\nCORRESPONDENCE: The address where correspondence is sent.\nDELIVERY_TO: The address to which delivery is to take place.\nMAIL_TO: The address to which mail is sent.\nPO_BOX: The address is a postal office (PO) box.\nPOSTAL: The address is the complete postal address.\nRESIDENTIAL: The address is the home address.\nSTATEMENT: The address where statements are sent.\nUNKNOWN: No information about address type was provided by the financial institution.\n",
                    "type": "string",
                    "enum": [
                        "BUSINESS",
                        "CORRESPONDENCE",
                        "DELIVERY_TO",
                        "MAIL_TO",
                        "PO_BOX",
                        "POSTAL",
                        "RESIDENTIAL",
                        "STATEMENT",
                        "UNKNOWN"
                    ],
                    "example": "PO_BOX"
                }
            }
        },
        "AVREmail": {
            "type": "object",
            "required": [
                "address",
                "type"
            ],
            "properties": {
                "address": {
                    "description": "The email address.",
                    "type": "string",
                    "example": "test@example.com"
                },
                "type": {
                    "description": "The email type.",
                    "type": "string",
                    "enum": [
                        "PRIMARY",
                        "SECONDARY",
                        "OTHER",
                        "UNKNOWN"
                    ],
                    "example": "PRIMARY"
                }
            }
        },
        "AVRPhoneNumber": {
            "type": "object",
            "required": [
                "number",
                "type"
            ],
            "properties": {
                "number": {
                    "description": "The phone number.",
                    "type": "string",
                    "example": "+1 206 555 0100"
                },
                "type": {
                    "description": "The phone type.",
                    "type": "string",
                    "enum": [
                        "HOME",
                        "WORK",
                        "MOBILE",
                        "OTHER",
                        "UNKNOWN"
                    ],
                    "example": "PRIMARY"
                }
            }
        },
        "Account": {
            "description": "An account model within the Savings Goals domain, that contains the current unallocated amount available to fund a Savings Goal.",
            "type": "object",
            "title": "Account",
            "properties": {
                "balance": {
                    "$ref": "#/definitions/Amount"
                },
                "id": {
                    "description": "The ID of the Account.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "name": {
                    "description": "The name of the Account.",
                    "type": "string",
                    "example": "My account"
                },
                "unallocatedFunds": {
                    "$ref": "#/definitions/Amount"
                }
            }
        },
        "AccountBalanceDTO": {
            "type": "object",
            "title": "AccountBalanceDTO",
            "properties": {
                "currency": {
                    "description": "The currency of the account.",
                    "type": "string",
                    "example": "EUR"
                },
                "value": {
                    "description": "The balance of the account.",
                    "type": "number",
                    "example": 100
                }
            }
        },
        "AccountDetails": {
            "type": "object",
            "properties": {
                "interest": {
                    "description": "(DEPRECATED) Interest of the account. Applicable for loans and savings accounts.",
                    "type": "number",
                    "format": "double"
                },
                "nextDayOfTermsChange": {
                    "description": "(DEPRECATED) A timestamp of the next day of terms change of the account. Applicable for loans.",
                    "type": "string",
                    "format": "date-time"
                },
                "numMonthsBound": {
                    "description": "(DEPRECATED) Populated if available. Describes how many months the interest rate is bound.",
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "description": "(DEPRECATED) Account subtype.",
                    "type": "string",
                    "enum": [
                        "MORTGAGE",
                        "BLANCO",
                        "MEMBERSHIP",
                        "VEHICLE",
                        "LAND",
                        "STUDENT",
                        "CREDIT",
                        "OTHER"
                    ]
                }
            }
        },
        "AccountEntity": {
            "description": "The accounts endpoint enables the customer to create, update and delete accounts.\n\nBy sending a user token for an activated user, together with a list of account entries, these will be created accordingly (depending on whether they already exist or not).\n\nBefore sending transactions to Tink, the customer’s account needs to be created. When enrolling a new customer, all accounts for the customer should be sent in one batch. A successful call to create accounts means that Tink is ready to receive transactions.\n\n*Please note:* The customer’s accounts must not be subscribed for real-time transactions on the customer side before a successful response has been received from a call to this endpoint with the corresponding account.",
            "type": "object",
            "title": "AccountEntity",
            "required": [
                "balance",
                "externalId",
                "name",
                "number",
                "type"
            ],
            "properties": {
                "availableCredit": {
                    "description": "The available credit of the account. Available credit is defined as the amount the customer has left to spend at this time. As such, it decreases with every reservation or transaction. For accounts without credit, this is always zero.",
                    "type": "number",
                    "format": "double",
                    "example": 20000
                },
                "balance": {
                    "description": "The booked balance of the account. Currency is taken from the user's profile.",
                    "type": "number",
                    "format": "double",
                    "example": 7000
                },
                "closed": {
                    "description": "The closed state of the account.",
                    "type": "boolean",
                    "example": false
                },
                "exclusion": {
                    "description": "The type of features to exclude. PFM_AND_SEARCH will exclude the accounts transactions from categorization, PFM features, and search result. PFM_DATA will exclude the accounts transactions from categorization and PFM features.",
                    "type": "string",
                    "enum": [
                        "PFM_AND_SEARCH, PFM_DATA, NONE"
                    ],
                    "example": "NONE"
                },
                "externalId": {
                    "description": "External identifier for the account.",
                    "type": "string",
                    "example": "2d3bd65493b549e1927d97a2d0683ab9"
                },
                "flags": {
                    "description": "A list of flags specifying attributes on an account.",
                    "type": "array",
                    "items": {
                        "description": "A list of flags specifying attributes on an account.",
                        "type": "string",
                        "enum": [
                            "BUSINESS",
                            "MANDATE",
                            "PSD2_PAYMENT_ACCOUNT",
                            "DEPOT_CASH_BALANCE",
                            "BUSINESS, MANDATE"
                        ],
                        "example": "[\"MANDATE\"]"
                    },
                    "example": [
                        "MANDATE"
                    ]
                },
                "name": {
                    "description": "The account name.",
                    "type": "string",
                    "example": "Enkla sparkontot"
                },
                "number": {
                    "description": "The account number.",
                    "type": "string",
                    "example": "52670208126"
                },
                "payload": {
                    "description": "This property is deprecated and disabled as default. \n\nFor customers where it is still enabled observe that the payload may not exceed 200 chars.\n\nPlease contact your Technical Project Manager if your use case depend on this property.",
                    "type": "object",
                    "example": {}
                },
                "reservedAmount": {
                    "description": "The currently reserved amount of the account.",
                    "type": "number",
                    "format": "double",
                    "example": 2000
                },
                "type": {
                    "description": "The account type.",
                    "type": "string",
                    "enum": [
                        "CHECKING",
                        "SAVINGS",
                        "INVESTMENT",
                        "MORTGAGE",
                        "CREDIT_CARD",
                        "LOAN",
                        "DUMMY",
                        "PENSION",
                        "OTHER",
                        "EXTERNAL",
                        "CHECKING, SAVINGS, INVESTMENT, MORTGAGE, CREDIT_CARD, LOAN, PENSION, OTHER, EXTERNAL"
                    ],
                    "example": "CREDIT_CARD"
                }
            }
        },
        "AccountIdentifierAccountIdentifierType": {
            "description": " - ACCOUNT_IDENTIFIER_TYPE_UNSPECIFIED: Default value. It should not occur.\n - SE: Account type used in SE.\n - IBAN: IBAN account type.\n - SORT_CODE: Sort code account type used in UK.",
            "type": "string",
            "default": "ACCOUNT_IDENTIFIER_TYPE_UNSPECIFIED",
            "enum": [
                "ACCOUNT_IDENTIFIER_TYPE_UNSPECIFIED",
                "SE",
                "IBAN",
                "SORT_CODE"
            ]
        },
        "AccountIdentifierDTO": {
            "type": "object",
            "title": "AccountIdentifierDTO",
            "required": [
                "type",
                "value"
            ],
            "properties": {
                "type": {
                    "description": "Type of account identifier.",
                    "type": "string",
                    "enum": [
                        "ACCOUNT_NAME",
                        "ACCOUNT_NUMBER"
                    ],
                    "example": "ACCOUNT_NAME"
                },
                "value": {
                    "description": "Value of account identifier.",
                    "type": "string",
                    "example": "My savings account"
                }
            }
        },
        "AccountIdentifiers": {
            "type": "object",
            "properties": {
                "ach": {
                    "description": "Account identifier used to make ACH transfers to and from the account.",
                    "$ref": "#/definitions/AchAccountIdentifier"
                },
                "bacs": {
                    "description": "Account identifier specific to BACS payment scheme.",
                    "$ref": "#/definitions/BacsAccountIdentifier"
                },
                "iban": {
                    "description": "Account IBAN identifiers.",
                    "$ref": "#/definitions/IbanAccountIdentifier"
                },
                "rix": {
                    "description": "Account identifier specific to Rix payment system.",
                    "$ref": "#/definitions/RixAccountIdentifier"
                }
            }
        },
        "AccountInsightResponse": {
            "type": "object",
            "title": "AccountInsightResponse",
            "properties": {
                "accountId": {
                    "description": "The account id of the account to fetch an insight for.",
                    "type": "string",
                    "example": "9eba20dad8b944338da98e8528acd3bc",
                    "allowEmptyValue": null,
                    "position": null
                },
                "insights": {
                    "description": "An account insight.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Insights%20Response",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "language": {
                    "description": "Language of the insight.",
                    "type": "string",
                    "example": "en",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "AccountListEntity": {
            "description": "The accounts.",
            "type": "object",
            "title": "AccountListEntity",
            "required": [
                "accounts"
            ],
            "properties": {
                "accounts": {
                    "description": "The accounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccountEntity"
                    }
                }
            }
        },
        "AccountListResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "A list of accounts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Data%20v1.Account"
                    }
                }
            }
        },
        "AccountOverviewDTO": {
            "description": "The account overview model represents details of an account available for selection.",
            "type": "object",
            "title": "AccountOverviewDTO",
            "required": [
                "id",
                "identifiers"
            ],
            "properties": {
                "accountBalance": {
                    "description": "Balance of the account.",
                    "$ref": "#/definitions/AccountBalanceDTO",
                    "example": {
                        "balance": "EUR",
                        "currency": "EUR"
                    }
                },
                "id": {
                    "description": "The unique identifier of the account overview.",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "identifiers": {
                    "description": "List of identifiers associated with the account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccountIdentifierDTO"
                    },
                    "example": [
                        {
                            "type": "ACCOUNT_NAME",
                            "value": "My savings"
                        }
                    ]
                },
                "selected": {
                    "description": "Indicates whether this account was selected previously.",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "AccountSummary": {
            "type": "object",
            "required": [
                "accountIdentifiers",
                "accountNumber",
                "accountType",
                "currencyCode",
                "id",
                "name",
                "parties"
            ],
            "properties": {
                "accountIdentifiers": {
                    "description": "Account identifiers used for transfers to and from the account.\u003c/br\u003eAccount Identifiers are complementary identifiers of the account. Presence of identifiers varies with market local conventions, account types, financial institutions and availability.",
                    "$ref": "#/definitions/AccountIdentifiers"
                },
                "accountNumber": {
                    "description": "The number that the user would typically recognize as their account number, for example when selecting their account in a list.For card-based accounts where the card number is also the unique account identifier, this field contains the masked PAN.For US accounts, this field would typically contain the last 4 digits of the full account number.",
                    "type": "string",
                    "example": "1234-123456789"
                },
                "accountType": {
                    "description": "Specifies the type of account.\u003c/br\u003eNote: Since new types can be added as the product evolves, make sure your implementation is resiliently handling any unrecognized value returned in the API response.\u003c/br\u003eAccount types: \u003c/br\u003e* `CHECKING`: A Checking account.\u003c/br\u003e* `SAVINGS`: A Savings account.\u003c/br\u003e* `CREDIT_CARD`: A Credit Card account.\u003c/br\u003eNote: credit card accounts are only enabled if credit_cards are added as refreshable item, i.e. for Account Check and Transactions bundle flows.",
                    "type": "string",
                    "enum": [
                        "CHECKING",
                        "SAVINGS",
                        "CREDIT_CARD"
                    ],
                    "example": "SAVINGS"
                },
                "commercialName": {
                    "description": "The commercial name of the account set by the financial institution.",
                    "type": "string",
                    "example": "Commercial name"
                },
                "currencyCode": {
                    "description": "ISO 4217 currency code.",
                    "type": "string",
                    "example": "EUR"
                },
                "holderName": {
                    "description": "(DEPRECATED) Removed after 2025-11-14. For full information about all holders of the account see parties",
                    "type": "string",
                    "example": "John Doe"
                },
                "iban": {
                    "description": "(DEPRECATED): Removed after 2025-11-14. For IBAN see iban field in accountIdentifiers",
                    "type": "string",
                    "example": "SE7921000813610123456789"
                },
                "id": {
                    "description": "The internal identifier of account.",
                    "type": "string",
                    "example": "a6bb87e57a8c4dd4874b241471a2b9e8"
                },
                "name": {
                    "description": "Name of the account assigned by the account holder or by the financial institution.\u003c/br\u003eThis field is typically what the user recognises in their online banking app.",
                    "type": "string",
                    "example": "John's account"
                },
                "nameMatching": {
                    "description": "The name matching result comparing customer provider name against the name from the financial institution",
                    "$ref": "#/definitions/NameMatching"
                },
                "parties": {
                    "description": "All persons and legal entities associated with the account as well as their relation to it.\u003c/br\u003eAn empty list will be returned when no parties are available for the account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Party"
                    }
                }
            }
        },
        "Accounts.v2.AccountIdentity": {
            "type": "object",
            "properties": {
                "name": {
                    "description": " Name of the party.",
                    "type": "string",
                    "example": "John Doe"
                },
                "ssn": {
                    "description": "Social security number or national identification number of the user.",
                    "type": "string",
                    "example": "19670220-1234"
                }
            }
        },
        "Accounts.v2.AccountParties": {
            "type": "object",
            "required": [
                "parties"
            ],
            "properties": {
                "parties": {
                    "description": "List of parties. A party is a person or company associated with the account. An empty list will be returned when no parties are available for the account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Accounts.v2.AccountParty"
                    }
                }
            }
        },
        "Accounts.v2.AccountParty": {
            "type": "object",
            "required": [
                "identity",
                "role"
            ],
            "properties": {
                "identity": {
                    "description": "Information pertaining to the identity of the party.",
                    "$ref": "#/definitions/Accounts.v2.AccountIdentity"
                },
                "role": {
                    "description": "The role of the party. Roles are defined as:\u003cbr/\u003e `HOLDER`: A party that is legally responsible for the money of the account.\u003cbr/\u003e `AUTHORIZED_USER`: A party that can operate the account, but it’s not legally the owner or responsible of the money of the account.\u003cbr/\u003e `OTHER`: A party linked to the account that have a role that does not match any of the other documented roles, i.e a party with a role that is not an authorized user or a holder.\u003cbr/\u003e `UNKNOWN`: Tink can not determine anything about the role, except that the party is associated with the specified account.\u003cbr/\u003e",
                    "type": "string",
                    "enum": [
                        "HOLDER",
                        "AUTHORIZED_USER",
                        "OTHER",
                        "UNKNOWN"
                    ],
                    "example": "HOLDER"
                }
            }
        },
        "Accounts.v2.Balance": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "description": "Monetary amount.",
                    "$ref": "#/definitions/Balances.v2.CurrencyDenominatedAmount"
                }
            }
        },
        "Accounts.v2.BalanceDetails": {
            "type": "object",
            "properties": {
                "availableBalanceExcludingCredit": {
                    "description": "`Depository Accounts only`: \n The amount of funds the customer is able to withdraw from the account, not including any credit facility that may be available. \n The balance includes pending inflows or outflows on the account.\n",
                    "$ref": "#/definitions/Accounts.v2.Balance"
                },
                "availableBalanceIncludingCredit": {
                    "description": "`Depository Accounts`: \n The amount of funds the customer is able to withdraw from the account, including any overdraft facility that may be available. \n The balance will include any pending inflows or pending outflows on the account.\n `Credit Cards`: The amount available to spend on the credit card. Credit limit minus the booked balance and any pending inflows or pending outflows on the account.\n The amount is positive unless the customer has exceeded the credit made available to them.\n",
                    "$ref": "#/definitions/Accounts.v2.Balance"
                },
                "bookedBalance": {
                    "description": "`Depository Accounts`: \nThe current balance of the account at the end of an account reporting period. This is not including any overdraft, any pending inflows or outflows on the account.\n `Credit Cards`: The balance of outstanding (not yet repaid) purchases made on credit minus the repayments made. \n The balance does not include any pending inflows or outflows on the account.\n",
                    "$ref": "#/definitions/Accounts.v2.Balance"
                }
            }
        },
        "Accounts.v2.Balances": {
            "type": "object",
            "properties": {
                "accountId": {
                    "description": "The internal identifier of account.",
                    "type": "string",
                    "example": "a6bb87e57a8c4dd4874b241471a2b9e8"
                },
                "balances": {
                    "description": "Contains the different type of balances for the selected account.",
                    "$ref": "#/definitions/Accounts.v2.BalanceDetails"
                },
                "creditLimit": {
                    "description": "`Depository Accounts (Checking Accounts and Savings Accounts)`: Pre arranged aggregated overdraft limit on the account.\n`Credit Cards`: The total amount of credit extended to the credit account.",
                    "$ref": "#/definitions/Accounts.v2.Balance"
                },
                "refreshed": {
                    "description": "Last refreshed time of this account, ISO 8601 date and time format in UTC (YYYY-MM-DDThh:mm:ssZ).",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-09-27T15:01:40Z"
                }
            }
        },
        "Accounts.v2.DenominatedAmount": {
            "type": "object",
            "required": [
                "scale",
                "unscaledValue"
            ],
            "properties": {
                "scale": {
                    "description": "The scale of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2
                },
                "unscaledValue": {
                    "description": "The unscaled value of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1050
                }
            }
        },
        "AchAccountIdentifier": {
            "type": "object",
            "required": [
                "accountNumber",
                "routingNumber"
            ],
            "properties": {
                "accountNumber": {
                    "description": "The ACH account number.",
                    "type": "string",
                    "example": "0123456789"
                },
                "routingNumber": {
                    "description": "The financial institution routing number for the account.",
                    "type": "string",
                    "example": "021000021"
                },
                "wireRoutingNumber": {
                    "description": "The financial institution wire routing number for the account, if available.",
                    "type": "string",
                    "example": "021000021"
                }
            }
        },
        "Address": {
            "type": "object",
            "properties": {
                "addressType": {
                    "description": "Address type",
                    "type": "string",
                    "enum": [
                        "BUSINESS",
                        "CORRESPONDENCE",
                        "DELIVERY_TO",
                        "MAIL_TO",
                        "PO_BOX",
                        "POSTAL",
                        "RESIDENTIAL",
                        "STATEMENT",
                        "UNKNOWN"
                    ],
                    "example": "BUSINESS"
                },
                "city": {
                    "description": "City",
                    "type": "string",
                    "example": "London"
                },
                "country": {
                    "description": "Country code",
                    "type": "string",
                    "example": "GB"
                },
                "postCode": {
                    "description": "Postal code for the address",
                    "type": "string",
                    "example": "NW1 1AB"
                },
                "street": {
                    "description": "Street address where the business is located.",
                    "type": "string",
                    "example": "Street 123"
                }
            }
        },
        "AddressDTO": {
            "type": "object",
            "title": "AddressDTO",
            "required": [
                "streetNumber",
                "streetName",
                "city",
                "countryCode"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "countryCode": {
                    "description": "Country code in ISO 3166-1 alpha-2 or alpha-3 format.",
                    "type": "string"
                },
                "flatNumber": {
                    "type": "string"
                },
                "postCode": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "streetName": {
                    "type": "string"
                },
                "streetNumber": {
                    "type": "string"
                }
            }
        },
        "Allocation": {
            "description": "An allocation is a virtual transaction withdraw from or deposit to a Savings Goal.",
            "type": "object",
            "title": "Allocation",
            "properties": {
                "amount": {
                    "$ref": "#/definitions/Amount"
                },
                "createTime": {
                    "description": "Date and time in UTC in which the Allocation was made.",
                    "type": "string",
                    "readOnly": true,
                    "example": "2020-05-14T13:30:45Z"
                },
                "destinationId": {
                    "description": "The ID of the Destination.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "destinationType": {
                    "description": "The type of the destination.\u003cbr /\u003e- ACCOUNT: Destination of type Account.\u003cbr /\u003e- SAVINGS_GOAL: Destination of type Savings Goal.",
                    "type": "string",
                    "enum": [
                        "SAVINGS_GOAL",
                        "ACCOUNT"
                    ]
                },
                "id": {
                    "description": "The ID of the new allocation.",
                    "type": "string",
                    "readOnly": true,
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "sourceId": {
                    "description": "The ID of the Source.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "sourceType": {
                    "description": "The type of the source.\u003cbr /\u003e- ACCOUNT: Source of type Account.\u003cbr /\u003e- SAVINGS_GOAL: Source of type Savings Goal.",
                    "type": "string"
                }
            }
        },
        "Amount": {
            "description": "Amount moved with the allocation.",
            "type": "object",
            "title": "Amount",
            "required": [
                "currencyCode",
                "scale",
                "unscaledValue"
            ],
            "properties": {
                "currencyCode": {
                    "description": "The ISO 4217 currency code of the amount",
                    "type": "string",
                    "example": "EUR"
                },
                "scale": {
                    "description": "The scale of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2
                },
                "unscaledValue": {
                    "description": "The unscaled value of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 1050
                }
            },
            "example": {
                "currencyCode": "EUR",
                "scale": 2,
                "unscaledValue": 2000
            }
        },
        "ArchivedInsight": {
            "type": "object",
            "required": [
                "userId"
            ],
            "properties": {
                "data": {
                    "description": "The data that describes the archived insight.",
                    "$ref": "#/definitions/InsightData"
                },
                "dateArchived": {
                    "description": "The epoch timestamp in milliseconds in UTC when the insight was archived.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1550237520000
                },
                "dateInsightCreated": {
                    "description": "The epoch timestamp in milliseconds in UTC when the insight was created.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1549976786000
                },
                "description": {
                    "description": "The description of the archived insight.",
                    "type": "string",
                    "example": "The balance on your bank account x is low. \nDo you want to transfer money to this account?"
                },
                "id": {
                    "description": "The ID of the archived insight. This is the same ID as for the corresponding insight, before it has been archived.",
                    "type": "string",
                    "example": "e2b746ed27c542ce846a8d693474df21"
                },
                "insightType": {
                    "description": "The type of the archived insight.",
                    "type": "string",
                    "example": "ACCOUNT_BALANCE_LOW"
                },
                "title": {
                    "description": "The title of the archived insight.",
                    "type": "string",
                    "example": "Your balance on bank account x is low"
                },
                "userId": {
                    "description": "The ID of the user that the archived insight belongs to.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                }
            }
        },
        "AuthenticatedUser": {
            "type": "object",
            "properties": {
                "administrativeMode": {
                    "type": "boolean",
                    "default": false
                },
                "appId": {
                    "type": "string"
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "SESSION",
                        "BASIC",
                        "BEARER",
                        "TOKEN",
                        "NON_VALID"
                    ]
                },
                "oauthClientId": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/General.User"
                }
            }
        },
        "AuthenticationOption": {
            "type": "object",
            "properties": {
                "default": {
                    "description": "Indicates if this is the default authentication option, in case none is selected.",
                    "type": "boolean"
                },
                "displayText": {
                    "description": "A short description of how this authentication option will affect the authentication flow.",
                    "type": "string"
                },
                "fields": {
                    "description": "List of fields that are necessary to be filled if this authentication option is selected.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                },
                "helpText": {
                    "description": "Help text with extra information about the implications of choosing this authentication option.",
                    "type": "string"
                },
                "name": {
                    "description": "Unique name of authentication option.",
                    "type": "string"
                },
                "supportedChannels": {
                    "description": "Supported channels where this authentication option can be selected.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SupportedChannel"
                    }
                }
            }
        },
        "AuthenticationOptionsGroup": {
            "type": "object",
            "properties": {
                "authenticationOptions": {
                    "description": "List of available authentication options in this group.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthenticationOption"
                    }
                },
                "displayText": {
                    "description": "A short description of what the authentication option group is used for.",
                    "type": "string"
                },
                "helpText": {
                    "description": "Help text with extra information about what the authentication option group is intended for.",
                    "type": "string"
                },
                "name": {
                    "description": "Unique name of authentication options group.",
                    "type": "string"
                }
            }
        },
        "AuthorizationSupplementalInformation": {
            "description": "A key-value structure to handle if the status of authorization is `AWAITING_INPUT`.",
            "type": "object",
            "title": "AuthorizationSupplementalInformation",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Unique id of the supplemental information.",
                    "type": "string",
                    "example": "c63dc11e-b210-4a96-9461-2061389789e7"
                },
                "redirectUri": {
                    "description": "A URL to redirect the user to in order to continue the authorization flow.",
                    "type": "string",
                    "example": "https://financial-service.com/authorize-here?id=1a5b3x9s16s"
                }
            }
        },
        "BacsAccountIdentifier": {
            "type": "object",
            "required": [
                "accountNumber",
                "sortCode"
            ],
            "properties": {
                "accountNumber": {
                    "description": "The BACS account number.",
                    "type": "string",
                    "example": "12345678"
                },
                "sortCode": {
                    "description": "The sort code of the account.",
                    "type": "string",
                    "example": "601314"
                }
            }
        },
        "BalanceRefreshRequest": {
            "description": "Provide the refresh parameters.",
            "type": "object",
            "title": "BalanceRefreshRequest",
            "required": [
                "accountId"
            ],
            "properties": {
                "accountId": {
                    "description": "Account ID.",
                    "type": "string",
                    "example": "6696428766444944ab19f7756376d363",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BalanceRefreshResponse": {
            "type": "object",
            "title": "BalanceRefreshResponse",
            "properties": {
                "balanceRefreshId": {
                    "description": "Balance refresh ID",
                    "type": "string",
                    "example": "f45dbb0a61124104a1ac517908812e87",
                    "allowEmptyValue": null,
                    "position": null
                },
                "credentialsId": {
                    "description": "Credentials ID",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BalanceRefreshStatusResponse": {
            "type": "object",
            "title": "BalanceRefreshStatusResponse",
            "properties": {
                "status": {
                    "description": "Refresh status",
                    "type": "string",
                    "enum": [
                        "FINISHED",
                        "REFRESHING",
                        "FAILED"
                    ],
                    "example": "FINISHED",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Balances": {
            "type": "object",
            "properties": {
                "accountId": {
                    "description": "The internal identifier of account.",
                    "type": "string",
                    "example": "a6bb87e57a8c4dd4874b241471a2b9e8"
                },
                "balances": {
                    "description": "Contains the different type of balances for the selected account",
                    "$ref": "#/definitions/BalancesDetails"
                },
                "refreshed": {
                    "description": "Timestamp of when the account was last refreshed.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                }
            }
        },
        "Balances.v2.CurrencyDenominatedAmount": {
            "type": "object",
            "required": [
                "currencyCode",
                "value",
                "valueInMinorUnit"
            ],
            "properties": {
                "currencyCode": {
                    "description": "The ISO 4217 currency code of the amount",
                    "type": "string",
                    "example": "EUR"
                },
                "value": {
                    "description": "The value representation of the monetary amount.",
                    "$ref": "#/definitions/Accounts.v2.DenominatedAmount"
                },
                "valueInMinorUnit": {
                    "description": "The valueInMinorUnit field represents the amount of the balance in the smallest unit of the specified currency. This value ensures precision by avoiding floating-point arithmetic errors. For instance, in the case of USD (United States Dollar), where 1 USD equals 100 cents, a balance of $10.50 would be represented as 1050 in the valueInMinorUnit field.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1050
                }
            }
        },
        "BalancesDetails": {
            "type": "object",
            "required": [
                "booked"
            ],
            "properties": {
                "available": {
                    "description": "The amount of funds the customer is able to withdraw from the account, not including any overdraft facility that may be available. Typically this will be the booked balance, minus any pending card transactions and minus any uncleared cheques",
                    "$ref": "#/definitions/CurrencyDenominatedAmount",
                    "example": "{scale: 2, unscaledValue:3456750, currencyCode:EUR}"
                },
                "booked": {
                    "description": "The current “booked”/”ledger” balance of the account, as specified by the bank. If the bank only provides us with one balance type, it will appear here.\u003c/br\u003eSee [Account balance](https://docs.tink.com/api#account) for detailed description.",
                    "$ref": "#/definitions/CurrencyDenominatedAmount",
                    "example": "{scale: 2, unscaledValue:3456750, currencyCode:EUR}"
                },
                "creditLimit": {
                    "description": "If specified by the bank, the total amount of any credit facility available on the account",
                    "$ref": "#/definitions/CurrencyDenominatedAmount",
                    "example": "{scale: 2, unscaledValue:3456750, currencyCode:EUR}"
                }
            }
        },
        "Brand": {
            "description": "Response object contains the brand's name, logo and contact information",
            "type": "object",
            "title": "Brand",
            "properties": {
                "contact": {
                    "$ref": "#/definitions/BrandContact"
                },
                "id": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "example": {
                "brand": {
                    "contact": {
                        "website": "www.tink.se"
                    }
                },
                "id": "02820044-69f5-4170-a516-fbeae6450f7a",
                "logoUrl": "https://....",
                "name": "Tink"
            }
        },
        "BrandContact": {
            "type": "object",
            "title": "BrandContact",
            "properties": {
                "website": {
                    "type": "string"
                }
            }
        },
        "BudgetFilterAccount": {
            "description": "List of included accounts. Applied as logical or (union).",
            "type": "object",
            "title": "BudgetFilterAccount",
            "properties": {
                "id": {
                    "description": "The account ID.",
                    "type": "string",
                    "example": "fe34e15244334995bd227e380fcb82fa",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BudgetFilterCategory": {
            "description": "List of included categories. Applied as logical or (union).",
            "type": "object",
            "title": "BudgetFilterCategory",
            "properties": {
                "code": {
                    "description": "The category code.",
                    "type": "string",
                    "example": "01f944531ab04cd3ba32a14cebe8a927",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BudgetFilterTag": {
            "description": "List of included tags. Applied as logical or (union).",
            "type": "object",
            "title": "BudgetFilterTag",
            "properties": {
                "key": {
                    "description": "The tag key.",
                    "type": "string",
                    "example": "coffee",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BudgetOneOffPeriodicity": {
            "description": "Periodicity configuration for a ONE_OFF budget.",
            "type": "object",
            "title": "BudgetOneOffPeriodicity",
            "required": [
                "end",
                "start"
            ],
            "properties": {
                "end": {
                    "description": "Budget start expressed as UTC epoch timestamp in milliseconds.",
                    "type": "integer",
                    "format": "int32",
                    "example": 1549976786000,
                    "allowEmptyValue": null,
                    "position": null
                },
                "start": {
                    "description": "Budget end expressed as UTC epoch timestamp in milliseconds.",
                    "type": "integer",
                    "format": "int32",
                    "example": 1552395986000,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BudgetPeriod": {
            "description": "List of budget periods.",
            "type": "object",
            "title": "BudgetPeriod",
            "required": [
                "spentAmount"
            ],
            "properties": {
                "end": {
                    "description": "Period start expressed as UTC epoch timestamp in milliseconds.",
                    "type": "integer",
                    "format": "int32",
                    "example": 1549976786000,
                    "allowEmptyValue": null,
                    "position": null
                },
                "spentAmount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "start": {
                    "description": "Period start expressed as UTC epoch timestamp in milliseconds.",
                    "type": "integer",
                    "format": "int32",
                    "example": 1549976786000,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BudgetRecurringPeriodicity": {
            "description": "Periodicity configuration for a RECURRING budget.",
            "type": "object",
            "title": "BudgetRecurringPeriodicity",
            "properties": {
                "periodUnit": {
                    "description": "Recurring periodicity unit.",
                    "type": "string",
                    "enum": [
                        "WEEK",
                        "MONTH",
                        "YEAR"
                    ],
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BudgetSummary": {
            "description": "List of budget with summaries",
            "type": "object",
            "title": "BudgetSummary",
            "properties": {
                "budgetPeriod": {
                    "$ref": "#/definitions/BudgetPeriod",
                    "allowEmptyValue": null,
                    "position": null
                },
                "budgetSpecification": {
                    "$ref": "#/definitions/Finance%20Management.Budgets",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BudgetTransaction": {
            "description": "List of transactions for a budget.",
            "type": "object",
            "title": "BudgetTransaction",
            "required": [
                "amount",
                "dispensableAmount"
            ],
            "properties": {
                "accountId": {
                    "description": "The ID of the account this transaction belongs to.",
                    "type": "string",
                    "example": "325ee4ccf579450ca59d89ee54fa7e40",
                    "allowEmptyValue": null,
                    "position": null
                },
                "amount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "categoryCode": {
                    "description": "Category code.",
                    "type": "string",
                    "example": "expenses:food.coffee",
                    "allowEmptyValue": null,
                    "position": null
                },
                "date": {
                    "description": "Date of the transaction expressed as UTC epoch timestamp in milliseconds.",
                    "type": "string",
                    "format": "date-time",
                    "allowEmptyValue": null,
                    "position": null
                },
                "description": {
                    "description": "Description of the transaction.",
                    "type": "string",
                    "example": "Monmouth Coffee Company",
                    "allowEmptyValue": null,
                    "position": null
                },
                "dispensableAmount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "The ID of the transaction.",
                    "type": "string",
                    "example": "e2b746ed27c542ce846a8d693474df21",
                    "allowEmptyValue": null,
                    "position": null
                },
                "pending": {
                    "description": "Indicates if the transaction has state pending or not.",
                    "type": "boolean",
                    "example": true,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "BusinessAccountIdentifiers": {
            "type": "object",
            "properties": {
                "bacs": {
                    "description": "Account identifier specific to BACS payment scheme.",
                    "$ref": "#/definitions/BacsAccountIdentifier"
                },
                "iban": {
                    "description": "Account identifier specific to IBAN payment system.",
                    "$ref": "#/definitions/IbanAccountIdentifier"
                },
                "rix": {
                    "description": "Account identifier specific to Rix payment system.",
                    "$ref": "#/definitions/RixAccountIdentifier"
                }
            }
        },
        "BusinessAccountSummary": {
            "type": "object",
            "required": [
                "accountIdentifiers",
                "accountType",
                "currencyCode",
                "customerSegment",
                "id",
                "parties"
            ],
            "properties": {
                "accountIdentifiers": {
                    "description": "Account identifiers used for transfers to and from the account.\u003c/br\u003eAccount Identifiers are complementary identifiers of the account. Presence of identifiers varies with market local conventions, account types, financial institutions and availability.",
                    "$ref": "#/definitions/BusinessAccountIdentifiers"
                },
                "accountName": {
                    "description": "The account name.",
                    "type": "string",
                    "example": "My savings account"
                },
                "accountType": {
                    "description": "Specifies the type of account.\u003c/br\u003eNote: Since new types can be added as the product evolves, make sure your implementation is resiliently handling any unrecognized value returned in the API response.\u003c/br\u003eAccount types: \u003c/br\u003e* `CHECKING`: A Checking account.\u003c/br\u003e* `SAVINGS`: A Savings account.\u003c/br\u003e* `CREDIT_CARD`: A Credit Card account.\u003c/br\u003eNote: credit card accounts are only enabled if credit_cards are added as refreshable item, i.e. for Account Check and Transactions bundle flows.",
                    "type": "string",
                    "enum": [
                        "CHECKING",
                        "SAVINGS",
                        "CREDIT_CARD"
                    ],
                    "example": "SAVINGS"
                },
                "currencyCode": {
                    "description": "ISO 4217 currency code.",
                    "type": "string",
                    "example": "EUR"
                },
                "customerSegment": {
                    "description": "Indicates whether the account belongs to a financial product offered to individuals or business customers.",
                    "type": "string",
                    "enum": [
                        "BUSINESS",
                        "PERSONAL",
                        "UNKNOWN"
                    ],
                    "example": "BUSINESS"
                },
                "id": {
                    "description": "The internal identifier of account.",
                    "type": "string",
                    "example": "a6bb87e57a8c4dd4874b241471a2b9e8"
                },
                "parties": {
                    "description": "All persons and legal entities associated with the account as well as their relation to it.\u003c/br\u003eAn empty list will be returned when no parties are available for the account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BusinessParty"
                    }
                }
            }
        },
        "BusinessAccountVerificationReport": {
            "type": "object",
            "required": [
                "created",
                "id",
                "userDataByProvider"
            ],
            "properties": {
                "created": {
                    "description": "The UNIX epoch timestamp represents the creation date and time of the report.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1455740874875
                },
                "externalReference": {
                    "description": "An external reference identifier given by the client in the Account Check Tink Link session or Tink Link query.",
                    "type": "string",
                    "example": "ext-abc-123"
                },
                "id": {
                    "description": "Tink unique identifier for the account report. Generated at the moment of report creation.",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822"
                },
                "userDataByProvider": {
                    "description": "The user data available by provider.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BusinessProviderUserData"
                    }
                }
            }
        },
        "BusinessIdentifier": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Identifier type",
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "SE_ORG_NUMBER",
                        "GB_CRN",
                        "GB_UTR",
                        "PL_NIP",
                        "PL_REGON"
                    ],
                    "example": "SE_ORG_NUMBER"
                },
                "value": {
                    "description": "Identifier value",
                    "type": "string",
                    "example": "556012-5790"
                }
            }
        },
        "BusinessIdentity": {
            "type": "object",
            "required": [
                "fullLegalName",
                "name"
            ],
            "properties": {
                "addresses": {
                    "description": "List of addresses where the business is registered.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Address"
                    }
                },
                "businessIdentifiers": {
                    "description": "List of business identifiers, such as Organisation number or Company registration number",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BusinessIdentifier"
                    }
                },
                "fullLegalName": {
                    "description": "The full name of the business.",
                    "type": "string",
                    "example": "my company name"
                },
                "name": {
                    "description": "Name of the party.",
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "BusinessParty": {
            "type": "object",
            "required": [
                "identity",
                "role"
            ],
            "properties": {
                "identity": {
                    "description": "Information pertaining to the identity of the party.",
                    "$ref": "#/definitions/BusinessIdentity"
                },
                "role": {
                    "description": "The role of the party. Roles are defined as:\u003cbr/\u003e `HOLDER`: A party that is legally responsible for the money of the account.\u003cbr/\u003e `AUTHORIZED_USER`: A party that can operate the account, but it’s not legally the owner or responsible of the money of the account.\u003cbr/\u003e `OTHER`: A party linked to the account that have a role that does not match any of the other documented roles, i.e a party with a role that is not an authorized user or a holder.\u003cbr/\u003e `UNKNOWN`: Tink can not determine anything about the role, except that the party is associated with the specified account.\u003cbr/\u003e",
                    "type": "string",
                    "enum": [
                        "HOLDER",
                        "AUTHORIZED_USER",
                        "OTHER",
                        "UNKNOWN"
                    ],
                    "example": "HOLDER"
                }
            }
        },
        "BusinessProviderUserData": {
            "type": "object",
            "required": [
                "accounts",
                "financialInstitutionName",
                "providerName",
                "updated"
            ],
            "properties": {
                "accounts": {
                    "description": "Information pertaining to the accounts of the user.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BusinessAccountSummary"
                    }
                },
                "financialInstitutionName": {
                    "description": "The name of the financial institution.",
                    "type": "string",
                    "example": "Bank Name"
                },
                "providerName": {
                    "description": "The Tink name representing the financial institution",
                    "type": "string",
                    "example": "se-bank-oauth"
                },
                "updated": {
                    "description": "The timestamp of when the report data was collected.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1455740124123
                }
            }
        },
        "CallbackRelayedRequest": {
            "type": "object",
            "required": [
                "parameters",
                "state"
            ],
            "properties": {
                "parameters": {
                    "description": "The post parameters from the received callback from the ASPSP. Contains the parameters necessary for the integration to continue the communication with the ASPSP.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": "{\"parameter1\": \"value1\", \"parameter2\": \"value2\", \"parameterN\": \"valueN\"}"
                },
                "state": {
                    "description": "The state from the received callback from the ASPSP. Used by Tink to connect the incoming callback to the correct session.",
                    "type": "string",
                    "example": "anVzdCBzb21lIHJhbmRvbSBzdGF0ZQo="
                }
            }
        },
        "CallbackRelayedResponse": {
            "type": "object",
            "properties": {
                "appUri": {
                    "description": "Registered app redirect uri",
                    "type": "string"
                }
            }
        },
        "CancellationResponse": {
            "type": "object",
            "title": "CancellationResponse",
            "properties": {
                "status": {
                    "description": "The status of the cancellation",
                    "type": "string",
                    "enum": [
                        "CREATED",
                        "FAILED",
                        "PROCESSING",
                        "SUCCESSFUL",
                        "AWAITING_AUTHENTICATION"
                    ],
                    "example": "AWAITING_AUTHENTICATION"
                },
                "tinkLink": {
                    "description": "Link to perform strong customer authentication when required by the bank. Available when the cancellation has the status `AWAITING_AUTHENTICATION`. For this link to be valid, you must extend it with a 'redirect_uri' parameter.",
                    "type": "string",
                    "example": "https://link.tink.com/1.0/pay/cancellation?client_id=123\u0026market=SE\u0026authorization_code=123456\u0026credentials_id=ccc1e79ff30f4865a54604754a72e380\u0026payment_request_id=dada49e225064bbeafcb78cb7dba59a4"
                }
            }
        },
        "CategorizeTransactionsListRequest": {
            "type": "object",
            "required": [
                "categorizationList"
            ],
            "properties": {
                "categorizationList": {
                    "description": "A list of new categories and the transactions' IDs",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CategorizeTransactionsRequest"
                    }
                }
            }
        },
        "CategorizeTransactionsRequest": {
            "type": "object",
            "required": [
                "categoryId",
                "transactionIds"
            ],
            "properties": {
                "categoryId": {
                    "description": "The internal identifier of the category that the list of transactions is categorized to.",
                    "type": "string",
                    "example": "2d3bd65493b549e1927d97a2d0683ab9"
                },
                "transactionIds": {
                    "description": "A list of internal identifiers of the transactions categorized.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": "[\"92e9e178cc22437281084c572ada8d7d\",\"a40db0b79bf94d2a9340cbc35d8b8020\"]"
                }
            }
        },
        "Commons.CurrencyDenominatedAmount": {
            "type": "object",
            "title": "Commons.CurrencyDenominatedAmount",
            "required": [
                "currencyCode",
                "value"
            ],
            "properties": {
                "currencyCode": {
                    "description": "The currency code which follows ISO-4217 standard.",
                    "type": "string",
                    "example": "EUR"
                },
                "value": {
                    "description": "The value representation of the monetary amount.",
                    "$ref": "#/definitions/Commons.ExactValue"
                }
            }
        },
        "Commons.ExactValue": {
            "type": "object",
            "title": "Commons.ExactValue",
            "required": [
                "scale",
                "unscaledValue"
            ],
            "properties": {
                "scale": {
                    "description": "The scale of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2
                },
                "unscaledValue": {
                    "description": "The unscaled value of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1050
                }
            }
        },
        "Condition": {
            "type": "object",
            "required": [
                "operator",
                "rule",
                "value"
            ],
            "properties": {
                "operator": {
                    "description": "The operator specifies how the evaluation should be performed.",
                    "type": "string",
                    "enum": [
                        "EQUALS",
                        "REQUIRED",
                        "MATCHES",
                        "ONE_OF",
                        "LENGTH_MIN",
                        "LENGTH_MAX",
                        "MAX_DAYS_AFTER",
                        "MINIMUM",
                        "MAXIMUM"
                    ],
                    "example": "EQUALS"
                },
                "rule": {
                    "description": "The rule provides the contextual information about what data to evaluate in the condition",
                    "type": "string",
                    "enum": [
                        "REMITTANCE_INFORMATION_TYPE",
                        "REMITTANCE_INFORMATION_VALUE",
                        "RECURRING_PAYMENT_REMITTANCE_INFORMATION_VALUE",
                        "REFERENCE_REMITTANCE_INFORMATION_VALUE",
                        "RF_REMITTANCE_INFORMATION_VALUE",
                        "KID_REMITTANCE_INFORMATION_VALUE",
                        "UNSTRUCTURED_REMITTANCE_INFORMATION_VALUE",
                        "RECIPIENT_NAME_VALUE",
                        "GIRO_UNSTRUCTURED_REMITTANCE_INFORMATION_VALUE",
                        "INTRA_BANK_TRANSFER_CUTOFF_TIME",
                        "INTER_BANK_TRANSFER_CUTOFF_TIME",
                        "GIRO_CUTOFF_TIME",
                        "SOURCE_MESSAGE",
                        "SOURCE_ACCOUNT_REQUIRED_BEFORE_REDIRECT",
                        "HAS_DOUBLE_REDIRECT",
                        "SOURCE_ACCOUNT_PROVIDED_SKIPS_AIS",
                        "RECURRING_PAYMENT_ALLOWED_FREQUENCY",
                        "END_DATE_REQUIRED_FOR_RECURRING_PAYMENT",
                        "RECURRING_PAYMENT_ALLOWED_EXECUTION_RULE",
                        "RECURRING_PAYMENT_FIRST_PAYMENT_DATE_MIN_DAYS_FROM_TODAY",
                        "RECURRING_PAYMENT_FIRST_PAYMENT_DATE_MAX_DAYS_FROM_TODAY",
                        "SEPA_PAYMENT_AMOUNT",
                        "FUTURE_PAYMENT_DATE",
                        "SEPA_INSTANT_PAYMENT_AMOUNT",
                        "MULTIBANCO_PAYMENT_REFERENCE",
                        "MULTIBANCO_PAYMENT_ENTITY",
                        "BULK_PAYMENT_MAX_TOTAL_AMOUNT",
                        "BULK_PAYMENT_MAX_PAYMENTS",
                        "DOMESTIC_PAYMENT_MAX_TOTAL_AMOUNT",
                        "DOMESTIC_PAYMENT_MIN_TOTAL_AMOUNT",
                        "INSTANT_DOMESTIC_MIN_TOTAL_AMOUNT"
                    ],
                    "example": "REMITTANCE_INFORMATION_TYPE"
                },
                "value": {
                    "description": "The value defines the condition that rule should fulfill.",
                    "type": "string",
                    "example": "UNSTRUCTURED"
                }
            }
        },
        "Connectivity v1.Credentials": {
            "description": "The credentials model represents a user's connected providers from where financial data is accessed.",
            "type": "object",
            "required": [
                "fields",
                "providerName"
            ],
            "properties": {
                "fields": {
                    "description": "This is a key-value map of `Field` name and value found on the `Provider` to which the credentials belongs to. This parameter is required when creating credentials.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": "{\"username\":\"198410045701\"}"
                },
                "id": {
                    "description": "The unique identifier of the credentials.",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822"
                },
                "providerName": {
                    "description": "The provider (financial institution) that the credentials is connected to.",
                    "type": "string",
                    "example": "handelsbanken-bankid"
                },
                "sessionExpiryDate": {
                    "description": "For credentials with access type of `OPEN_BANKING`, indicates when the session for the currently stored credentials will expire. The session can be renewed before or after this date by triggering manual authentication of credentials. After this date automatic refreshes will not be possible without new authentication from the user.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1493379467000"
                },
                "status": {
                    "description": "The status indicates the state of the credentials. For some states there are actions which need to be performed on the credentials.",
                    "type": "string",
                    "enum": [
                        "CREATED",
                        "AUTHENTICATING",
                        "AWAITING_MOBILE_BANKID_AUTHENTICATION",
                        "AWAITING_SUPPLEMENTAL_INFORMATION",
                        "UPDATING",
                        "UPDATED",
                        "AUTHENTICATION_ERROR",
                        "TEMPORARY_ERROR",
                        "PERMANENT_ERROR",
                        "AWAITING_THIRD_PARTY_APP_AUTHENTICATION",
                        "DELETED",
                        "SESSION_EXPIRED"
                    ],
                    "example": "UPDATED"
                },
                "statusPayload": {
                    "description": "A user-friendly message connected to the status. Could be an error message or text describing what is currently going on in the refresh process.",
                    "type": "string",
                    "example": "Analyzed 1,200 out of 1,200 transactions."
                },
                "statusUpdated": {
                    "description": "A timestamp of when the credentials' status was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1493379467000"
                },
                "supplementalInformation": {
                    "description": "A key-value structure to handle if status of credentials are `AWAITING_SUPPLEMENTAL_INFORMATION` or `AWAITING_THIRD_PARTY_APP_AUTHENTICATION`.",
                    "type": "string",
                    "example": "null"
                },
                "type": {
                    "description": "Indicates how Tink authenticates the user to the financial institution.",
                    "type": "string",
                    "enum": [
                        "PASSWORD",
                        "MOBILE_BANKID",
                        "KEYFOB",
                        "THIRD_PARTY_APP"
                    ],
                    "example": "MOBILE_BANKID"
                },
                "updated": {
                    "description": "A timestamp of when the credentials was the last time in status `UPDATED`.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1493379467000"
                },
                "userId": {
                    "description": "The ID of the user that the credentials belongs to.",
                    "type": "string",
                    "example": "c4ae034f96c740da91ae00022ddcac4d"
                }
            }
        },
        "Connectivity v1.Provider": {
            "description": "The provider model represents financial institutions to where Tink can connect. It specifies how Tink accesses the financial institution, metadata about the financialinstitution, and what financial information that can be accessed.",
            "type": "object",
            "required": [
                "accessType",
                "authenticationUserType",
                "capabilities",
                "credentialsType",
                "currency",
                "displayName",
                "fields",
                "financialInstitutionId",
                "financialInstitutionName",
                "financialServices",
                "hasAuthenticationOptions",
                "market",
                "multiFactor",
                "name",
                "popular",
                "status",
                "transactional",
                "type"
            ],
            "properties": {
                "accessType": {
                    "description": "What Tink uses to access the data.",
                    "type": "string",
                    "enum": [
                        "OPEN_BANKING",
                        "OTHER"
                    ],
                    "readOnly": true,
                    "example": "OPEN_BANKING"
                },
                "authenticationFlow": {
                    "description": "For providers with access type `OPEN_BANKING`, indicates what type of authentication flow is used to access the data.",
                    "type": "string",
                    "enum": [
                        "EMBEDDED",
                        "REDIRECT",
                        "DECOUPLED"
                    ],
                    "readOnly": true,
                    "example": "REDIRECT"
                },
                "authenticationUserType": {
                    "description": "[DEPRECATED] Indicates if a user authenticates toward the bank as a person or a business.",
                    "type": "string",
                    "enum": [
                        "PERSONAL",
                        "BUSINESS",
                        "CORPORATE"
                    ],
                    "readOnly": true,
                    "example": "PERSONAL"
                },
                "capabilities": {
                    "description": "Indicates what this provider is capable of, in terms of financial data it can aggregate and if it can execute payments.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "TRANSFERS",
                            "EINVOICES",
                            "MORTGAGE_AGGREGATION",
                            "CHECKING_ACCOUNTS",
                            "SAVINGS_ACCOUNTS",
                            "CREDIT_CARDS",
                            "LOANS",
                            "INVESTMENTS",
                            "PAYMENTS",
                            "IDENTITY_DATA",
                            "CREATE_BENEFICIARIES",
                            "LIST_BENEFICIARIES",
                            "CREATE_BENEFICIARIES_IN_PAYMENT"
                        ]
                    },
                    "readOnly": true,
                    "example": "CHECKING_ACCOUNTS"
                },
                "credentialsType": {
                    "description": "When creating a new credential connected to the provider this will be the credentials type.",
                    "type": "string",
                    "enum": [
                        "PASSWORD",
                        "MOBILE_BANKID",
                        "KEYFOB",
                        "THIRD_PARTY_APP"
                    ],
                    "readOnly": true,
                    "example": "THIRD_PARTY_APP"
                },
                "currency": {
                    "description": "The default currency of the provider.",
                    "type": "string",
                    "readOnly": true,
                    "example": "SEK"
                },
                "displayDescription": {
                    "description": "Short displayable description of the authentication type used.",
                    "type": "string",
                    "readOnly": true,
                    "example": "Bink authentication app"
                },
                "displayName": {
                    "description": "The name displayed in the app and what implementors will most likely use to display the provider.",
                    "type": "string",
                    "readOnly": true,
                    "example": "Bink"
                },
                "fields": {
                    "description": "List of fields which need to be provided when creating a credential connected to the provider.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Field"
                    },
                    "readOnly": true,
                    "example": "{\n  \"name\": \"password\",\n  \"description\": \"PIN\",\n  \"sensitive\": true,\n  \"masked\": true\n}"
                },
                "financialInstitutionId": {
                    "description": "A unique identifier to group providers belonging the same financial institution.",
                    "type": "string",
                    "readOnly": true,
                    "example": "01234567-1234-1234-1234-123456789123"
                },
                "financialInstitutionName": {
                    "description": "A name to group providers belonging the same financial institution.",
                    "type": "string",
                    "readOnly": true,
                    "example": "Bink"
                },
                "financialServices": {
                    "description": "[BETA] Information about financial services covered with this provider.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FinancialService"
                    },
                    "readOnly": true
                },
                "groupDisplayName": {
                    "description": "The name of the group that several providers of the same bank can be placed in. Usually when a bank has branches and subsidiaries they are grouped under a single name.",
                    "type": "string",
                    "readOnly": true,
                    "example": "Bink Corp."
                },
                "hasAuthenticationOptions": {
                    "description": "[BETA] Indicates whether or not this provider has multiple authentication options available.",
                    "type": "boolean",
                    "default": false,
                    "readOnly": true
                },
                "images": {
                    "description": "Image urls for the provider.",
                    "$ref": "#/definitions/ImageUrls",
                    "readOnly": true
                },
                "keywords": {
                    "description": "An array of strings used for looking up a financial institution. For example, this field can include former names, informal names for the institution",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true
                },
                "loginHeaderColour": {
                    "description": "Sets the colour of the header of login screen.",
                    "type": "string",
                    "readOnly": true,
                    "example": "#FF0000"
                },
                "market": {
                    "description": "The market of the provider. Each provider is unique per market.",
                    "type": "string",
                    "readOnly": true,
                    "example": "SE"
                },
                "multiFactor": {
                    "description": "Indicates if the provider requires multi-factor authentication.",
                    "type": "boolean",
                    "default": false,
                    "readOnly": true,
                    "example": true
                },
                "name": {
                    "description": "The unique identifier of the provider. This is used when creating new credentials.",
                    "type": "string",
                    "readOnly": true,
                    "example": "se-bink-thirdpartyapp"
                },
                "passwordHelpText": {
                    "description": "Short description of how to authenticate when creating a new credential for connected to the provider.",
                    "type": "string",
                    "readOnly": true,
                    "example": "Use the same password as you would in your bank's mobile app."
                },
                "pisCapabilities": {
                    "description": "Indicates the Payments capabilities of this provider.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "PIS_SE_BG",
                            "PIS_SE_PG",
                            "PIS_SE_BANK_TRANSFERS",
                            "PIS_FUTURE_DATE",
                            "PIS_SEPA_RECURRING_PAYMENTS",
                            "PIS_SEPA_ICT_RECURRING_PAYMENTS",
                            "SEPA_CREDIT_TRANSFER",
                            "SEPA_INSTANT_CREDIT_TRANSFER",
                            "FASTER_PAYMENTS",
                            "CHAPS",
                            "BACS",
                            "NORWEGIAN_DOMESTIC_CREDIT_TRANSFER",
                            "INSTANT_NORWEGIAN_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                            "MULTIBANCO",
                            "PIS_BULK_PAYMENTS",
                            "PAYMENT_CANCELLATION",
                            "SWISS_DOMESTIC_CREDIT_TRANSFER",
                            "DANISH_DOMESTIC_CREDIT_TRANSFER",
                            "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                            "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_INTRADAG",
                            "POLISH_DOMESTIC_CREDIT_TRANSFER",
                            "INSTANT_POLISH_DOMESTIC_CREDIT_TRANSFER",
                            "VRP_SWEEPING",
                            "VRP_COMMERCIAL",
                            "PIS_MOBILE_AUTO_SIGN",
                            "PAYPAL",
                            "CZECH_INTERNAL_TRANSFER",
                            "CZECH_EXPRESS_INTERNAL_TRANSFER"
                        ]
                    },
                    "readOnly": true,
                    "example": "SEPA_CREDIT_TRANSFER"
                },
                "popular": {
                    "description": "Indicates if the provider is popular. This is normally set to true for the biggest financial institutions on a market.",
                    "type": "boolean",
                    "default": false,
                    "readOnly": true,
                    "example": false
                },
                "rank": {
                    "description": "Integer. Determines the relative position of the financial institution on the list shown to end users. Higher values should be displayed higher up in the list. API results are ranked based on this value. Currently only supported in the United States.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "releaseStatus": {
                    "description": "Indicates the Release Status of the provider",
                    "type": "string",
                    "enum": [
                        "BETA"
                    ],
                    "readOnly": true,
                    "example": "BETA"
                },
                "status": {
                    "description": "Indicates the current status of the provider. It is only possible to perform credentials create or refresh actions on providers which are enabled.",
                    "type": "string",
                    "enum": [
                        "ENABLED",
                        "TEMPORARY_DISABLED",
                        "DISABLED"
                    ],
                    "readOnly": true,
                    "example": "ENABLED"
                },
                "transactional": {
                    "description": "Indicates if Tink can aggregate transactions for this provider.",
                    "type": "boolean",
                    "default": false,
                    "readOnly": true,
                    "example": false
                },
                "type": {
                    "description": "Indicates what type of financial institution the provider represents.",
                    "type": "string",
                    "enum": [
                        "BANK",
                        "CREDIT_CARD",
                        "BROKER",
                        "TEST",
                        "OTHER"
                    ],
                    "readOnly": true,
                    "example": "BANK"
                }
            }
        },
        "Connectivity v1.Provider Consent": {
            "description": "The Provider Consent gives details about the state of a user's consents towards financial institutions.",
            "type": "object",
            "properties": {
                "accountIds": {
                    "description": "List of internal account-ids related to this credential associated with this provider consent",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": "[\"6696428766444944ab19f7756376d363\",\"9bdd7d50c1f14946b6d22b198d1696b4\"]"
                },
                "credentialsId": {
                    "description": "credentialsId of the credential associated with this provider consent.",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822"
                },
                "detailedError": {
                    "description": "Indicates the ConnectivityError on this provider consent if it exists.",
                    "$ref": "#/definitions/ConnectivityErrorResponse"
                },
                "providerName": {
                    "description": "The provider (financial institution) that the provider consent is connected to.",
                    "type": "string",
                    "example": "uk-demobank-open-banking-redirect"
                },
                "sessionExpiryDate": {
                    "description": "Indicates when the session for the credential associated with this provider consent will expire. The session can be renewed before or after this date by triggering either manual authentication of credentials or reconfirmation without authentication (for eligible credentials). After this date automatic refreshes for this credential will not be possible without new authentication or reconfirmation from the user.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1493379467000"
                },
                "sessionExtendable": {
                    "description": "[BETA] Used to determine whether the consent session can be extended (reconfirmed without authentication).",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "status": {
                    "description": "The status indicates the state of the provider consent.",
                    "type": "string",
                    "enum": [
                        "CREATED",
                        "AUTHENTICATING",
                        "AWAITING_MOBILE_BANKID_AUTHENTICATION",
                        "AWAITING_SUPPLEMENTAL_INFORMATION",
                        "UPDATING",
                        "UPDATED",
                        "AUTHENTICATION_ERROR",
                        "TEMPORARY_ERROR",
                        "PERMANENT_ERROR",
                        "AWAITING_THIRD_PARTY_APP_AUTHENTICATION",
                        "DELETED",
                        "SESSION_EXPIRED"
                    ],
                    "example": "UPDATED"
                },
                "statusUpdated": {
                    "description": "A timestamp of when the status of the credential associated with this provider consent was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1493379467000"
                }
            }
        },
        "Connectivity v2.Authorization": {
            "description": "The Authorization model represents an attempt to authorize a consent.",
            "type": "object",
            "title": "Connectivity v2.Authorization",
            "required": [
                "consentId",
                "createdAt",
                "id",
                "originatingUserIp",
                "state"
            ],
            "properties": {
                "appUri": {
                    "description": "The end user will be redirected to this URI after the authorization code has been delivered. This field is used for flows where we have third party redirects to financial institutions. There is a default value which is tink://open. It can be any type of URI (mobile deeplink, http address etc.)",
                    "type": "string"
                },
                "callbackUri": {
                    "description": "This URI will be used by the ASPSP to pass the authorization code. It corresponds to the redirect/callback URI in OAuth2/OpenId. This parameter is only applicable if you are a TPP.",
                    "type": "string"
                },
                "canceledAt": {
                    "description": "Timestamp at which the authorization was canceled.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-11-28T08:42:33.408Z"
                },
                "consentId": {
                    "description": "The consent unique id that the authorization is connected to.",
                    "type": "string",
                    "format": "uuid",
                    "example": "c63dc11e-b210-4a96-9461-2061389789e7"
                },
                "createdAt": {
                    "description": "Timestamp at which the authorization was created.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-11-28T08:42:33.408Z"
                },
                "detailedError": {
                    "$ref": "#/definitions/ConnectivityError"
                },
                "failedAt": {
                    "description": "Timestamp at which the authorization failed.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-11-28T08:42:33.408Z"
                },
                "id": {
                    "description": "Unique id of the authorization.",
                    "type": "string",
                    "format": "uuid",
                    "example": "c63dc11e-b210-4a96-9461-2061389789e7"
                },
                "originatingUserIp": {
                    "description": "The originating user's remote IP address of the corresponding HTTP request.",
                    "type": "string",
                    "example": "198.51.100.10"
                },
                "revokedAt": {
                    "description": "Timestamp at which the authorization was revoked.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-11-28T08:42:33.408Z"
                },
                "state": {
                    "description": "The current state of the authorization.",
                    "type": "string",
                    "enum": [
                        "ONGOING",
                        "AWAITING_INPUT",
                        "SUCCEEDED",
                        "FAILED",
                        "CANCELED",
                        "REVOKING",
                        "REVOKED"
                    ],
                    "example": "ONGOING"
                },
                "succeededAt": {
                    "description": "Timestamp at which the authorization succeeded.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-11-28T08:45:33.408Z"
                },
                "supplementalInformation": {
                    "$ref": "#/definitions/AuthorizationSupplementalInformation"
                }
            }
        },
        "Connectivity v2.Consent": {
            "description": "The Consent model represents all the data needed by Tink to be able to access end user data from a specific financial institution.",
            "type": "object",
            "title": "Connectivity v2.Consent",
            "required": [
                "appId",
                "createdAt",
                "financialService",
                "financialServiceParameters",
                "id",
                "providerId",
                "state",
                "userId"
            ],
            "properties": {
                "appId": {
                    "description": "The unique id of the app that the consent is connected to.",
                    "type": "string",
                    "example": "afae2e2a57b64009aa94f593d012b869"
                },
                "authorizedAt": {
                    "description": "Timestamp at which the consent was authorized",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-11-28T08:45:33.408Z"
                },
                "createdAt": {
                    "description": "Timestamp at which the consent was created",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-11-28T08:35:33.408Z"
                },
                "expiresAt": {
                    "description": "Timestamp at which the consent expires",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-12-28T08:35:33.408Z"
                },
                "financialService": {
                    "$ref": "#/definitions/Connectivity%20v2.FinancialService"
                },
                "financialServiceParameters": {
                    "$ref": "#/definitions/Connectivity%20v2.FinancialServiceParameters"
                },
                "id": {
                    "description": "Unique id of the consent.",
                    "type": "string",
                    "example": "c63dc11e-b210-4a96-9461-2061389789e7"
                },
                "providerId": {
                    "description": "The provider (financial institution) name that the consent is connected to.",
                    "type": "string",
                    "example": "se-nordea-ob"
                },
                "revokedAt": {
                    "description": "Timestamp at which the consent was revoked",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-12-24T08:35:33.408Z"
                },
                "state": {
                    "description": "The current state of the consent.",
                    "type": "string",
                    "enum": [
                        "INITIALIZED",
                        "ACTIVE",
                        "EXPIRED",
                        "REVOKED"
                    ],
                    "example": "INITIALIZED"
                },
                "userId": {
                    "description": "The user unique id that the consent is connected to.",
                    "type": "string",
                    "example": "7c41103806a011edb9390242ac120002"
                }
            }
        },
        "Connectivity v2.FinancialService": {
            "type": "object",
            "title": "Connectivity v2.FinancialService",
            "required": [
                "subtype",
                "type"
            ],
            "properties": {
                "subtype": {
                    "description": "Subtype of the financial service this consent is created for.",
                    "type": "string",
                    "enum": [
                        "VRP_SWEEPING",
                        "VRP_COMMERCIAL"
                    ],
                    "example": "VRP_SWEEPING"
                },
                "type": {
                    "description": "Type of financial service this consent is created for.",
                    "type": "string",
                    "enum": [
                        "MANDATE_PAYMENTS"
                    ],
                    "example": "MANDATE_PAYMENTS"
                }
            }
        },
        "Connectivity v2.FinancialServiceParameters": {
            "type": "object",
            "title": "Connectivity v2.FinancialServiceParameters",
            "required": [
                "userParameters",
                "version"
            ],
            "properties": {
                "userParameters": {
                    "description": "Parameters required when creating a consent of given type. Those parameters must be valid against the consent template schema. See [Get Consent Template](#connectivity-v2/consent-templates/get-consent-template).",
                    "type": "object",
                    "example": {
                        "controlParameters": {
                            "maximumIndividualAmount": {
                                "currency": "GBP",
                                "value": {
                                    "scale": 2,
                                    "unscaledValue": 199
                                }
                            },
                            "periodicLimits": [
                                {
                                    "amount": {
                                        "currency": "GBP",
                                        "value": {
                                            "scale": 2,
                                            "unscaledValue": 299
                                        }
                                    },
                                    "periodAlignment": "MANDATE",
                                    "periodType": "DAY"
                                },
                                {
                                    "amount": {
                                        "currency": "GBP",
                                        "value": {
                                            "scale": 2,
                                            "unscaledValue": 999
                                        }
                                    },
                                    "periodAlignment": "MANDATE",
                                    "periodType": "MONTH"
                                }
                            ],
                            "validFrom": "2022-07-25T10:10:38.850Z",
                            "validTo": "2022-12-25T10:10:38.850Z"
                        },
                        "merchantId": "9a1e5197-33ad-4f17-8338-0861a69ed1d0",
                        "payeeAccount": {
                            "name": "Tom John Savings Account",
                            "number": "10000031510604",
                            "type": "SORT_CODE"
                        },
                        "payerAccount": {
                            "holderName": "Tom John",
                            "number": "60092067037135",
                            "type": "SORT_CODE"
                        }
                    }
                },
                "version": {
                    "description": "Semantic version of the template for the given type and subtype.",
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "ConnectivityError": {
            "description": "When a problem occurs while attempting to connect to a bank, Tink's API returns a connectivity error.\nThere are different error types, each of them accompanied by a detailed reason for the error.\nThe tables below lists all related error reasons for each of the error types, along with their descriptions, to help diagnose and resolve any issues.\n\n##### TINK_SIDE_ERROR\n\n| Reason                              | Description                                                                                                                                    |\n|-------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------|\n| UNKNOWN_ERROR                       | Unknown unexpected error on Tink side                                                                                                          |\n| TINK_INTERNAL_SERVER_ERROR          | Explicit unexpected error on Tink side                                                                                                         |\n| AUTHENTICATION_METHOD_NOT_SUPPORTED | The authentication method that the user picked was not supported by Tink. Tink always tries to prevent this from happening in the first place. |\n\n##### PROVIDER_ERROR\n\n| Reason                                 | Description                                                                                                                       |\n|----------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| PROVIDER_UNAVAILABLE                   | Financial Service (provider/bank/ASPSP) is technically unavailable or doesn't respond when Tink is sending requests               |\n| LICENSED_PARTY_REJECTED                | Financial Service rejects the licenced party (TPP/OB registrate) or eIDAS certificate. This happens if Tink's license is rejected |\n| UNKNOWN_PROVIDER_ERROR                 | Financial Service returns an unknown or unexpected response                                                                       |\n\n##### USER_LOGIN_ERROR\n\n| Reason                                 | Description                                                                                                                                                                                                                                                                  |\n|----------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| THIRD_PARTY_AUTHENTICATION_UNAVAILABLE | Mobile BankID or any other required third-party is technically unavailable                                                                                                                                                                                                   |\n| STATIC_CREDENTIALS_INCORRECT           | Values of provided fields are rejected by the provider. Clarification: Refers to user credentials stored with Tink, that is, the static fields on credentials. To recover from this, customer needs to update the values in the user's Tink Credential field                 |\n| DYNAMIC_CREDENTIALS_INCORRECT          | OTPs/card-reader codes/third-party app codes are rejected by Provider. Examples: OTP entered after being redirected to bank’s page is incorrect, or OTP entered in Tink URL is incorrect                                                                                     |\n| DYNAMIC_CREDENTIALS_FLOW_CANCELLED     | Deliberate cancellation of dynamic authentication flow (multi-factor authentication). For example, when cancelling a Mobile Bank ID or OAuth2 journey on the Financial Service side                                                                                          |\n| DYNAMIC_CREDENTIALS_FLOW_TIMEOUT       | Financial Service has indicated that the dynamic flow (multi-factor authentication, for example, BankID and OTPs.)) has timed out, or the Tink deadline of 2, 3, or 9 min (Supplemental info, Mobile BankID respectively OB flows) times out before getting answer from bank |\n| USER_NOT_A_CUSTOMER                    | Financial Service responds that the identity used to authenticate is not a customer at the current provider, or has no engagement with the provider                                                                                                                          |\n| USER_BLOCKED                           | Financial Service responds that the identity used to authenticate is blocked and the user can not authenticate successfully                                                                                                                                                  |\n| USER_CONCURRENT_LOGINS                 | When Financial Service or third party app doesn’t allow to have parallel sessions                                                                                                                                                                                            |\n\n##### AUTHORIZATION_ERROR\n\n| Reason               | Description                                                                                                                                                                                                            |\n|----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ACTION_NOT_PERMITTED | Financial Service responds that the identity used to authenticate does not have permission to perform the operation                                                                                                    |\n| SESSION_EXPIRED      | Access/Refresh-token combo is expired, requires re-authentication. Should only happen if the user is not present. When user is in fact present, Tink automatically goes into re-authentication flow                    |\n| USER_ACTION_REQUIRED | User has successfully authenticated and is in a bank flow, but there is a step where they are required to take some manual action + that Tink cannot handle automatically (e.g. sign an agreement or change a setting) |\n\n##### ACCOUNT_INFORMATION_ERROR\n\n| Reason      | Description                                                                                                         |\n|-------------|---------------------------------------------------------------------------------------------------------------------|\n| NO_ACCOUNTS | User authentication was successful, but the end result was that no data was available to be stored on the Tink user |\n\n",
            "type": "object",
            "title": "ConnectivityError",
            "properties": {
                "details": {
                    "$ref": "#/definitions/ConnectivityErrorDetails"
                },
                "displayMessage": {
                    "description": "A message for the end-user.",
                    "type": "string",
                    "example": "The bank rejected the login credentials that you entered."
                },
                "type": {
                    "description": "Type of the error.",
                    "type": "string",
                    "enum": [
                        "UNKNOWN_ERROR",
                        "TINK_SIDE_ERROR",
                        "PROVIDER_ERROR",
                        "USER_LOGIN_ERROR",
                        "AUTHORIZATION_ERROR",
                        "ACCOUNT_INFORMATION_ERROR",
                        "PAYMENT_INITIATION_ERROR"
                    ],
                    "example": "USER_LOGIN_ERROR"
                }
            }
        },
        "ConnectivityErrorDetails": {
            "type": "object",
            "title": "ConnectivityErrorDetails",
            "properties": {
                "reason": {
                    "description": "A detailed error reason for the type specified.",
                    "type": "string",
                    "example": "STATIC_CREDENTIALS_INCORRECT"
                }
            }
        },
        "ConnectivityErrorDetailsResponse": {
            "type": "object",
            "properties": {
                "reason": {
                    "description": "Detailed reason for the error.",
                    "type": "string",
                    "example": "STATIC_CREDENTIALS_INCORRECT"
                },
                "retryable": {
                    "description": "[BETA] Indicates whether the operation is retryable.",
                    "type": "boolean",
                    "default": false,
                    "example": true
                }
            }
        },
        "ConnectivityErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Details of the error.",
                    "$ref": "#/definitions/ConnectivityErrorDetailsResponse"
                },
                "displayMessage": {
                    "description": "Display message for end-user.",
                    "type": "string",
                    "example": "The bank rejected the login credentials that you entered."
                },
                "type": {
                    "description": "General type of the error.",
                    "type": "string",
                    "enum": [
                        "UNKNOWN_ERROR",
                        "TINK_SIDE_ERROR",
                        "PROVIDER_ERROR",
                        "USER_LOGIN_ERROR",
                        "AUTHORIZATION_ERROR",
                        "ACCOUNT_INFORMATION_ERROR"
                    ],
                    "example": "USER_LOGIN_ERROR"
                }
            }
        },
        "ConnectorCounterparties": {
            "description": "[BETA] Available transaction counterparties.",
            "type": "object",
            "title": "ConnectorCounterparties",
            "properties": {
                "payee": {
                    "$ref": "#/definitions/ConnectorCounterpartyInformation"
                },
                "payer": {
                    "$ref": "#/definitions/ConnectorCounterpartyInformation"
                }
            }
        },
        "ConnectorCounterpartyInformation": {
            "description": "[BETA] Available payee information.",
            "type": "object",
            "title": "ConnectorCounterpartyInformation",
            "properties": {
                "identifiers": {
                    "$ref": "#/definitions/ConnectorIdentifiers"
                },
                "name": {
                    "description": "[BETA] Name of a transaction counterparty.",
                    "type": "string",
                    "example": "JOE DOE"
                }
            }
        },
        "ConnectorIdentifiers": {
            "description": "[BETA] Available identifiers.",
            "type": "object",
            "title": "ConnectorIdentifiers",
            "properties": {
                "financialInstitution": {
                    "$ref": "#/definitions/FinancialInstitution"
                }
            }
        },
        "CounterpartyFinancialInstitution": {
            "type": "object",
            "title": "CounterpartyFinancialInstitution",
            "properties": {
                "accountNumber": {
                    "description": "Transaction counterparty account number from financial institution.",
                    "type": "string",
                    "example": "SE3778591419782047144807",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "CounterpartyIdentifier": {
            "type": "object",
            "title": "CounterpartyIdentifier",
            "properties": {
                "financialInstitution": {
                    "description": "Internal identifiers from the financial institution.",
                    "$ref": "#/definitions/CounterpartyFinancialInstitution",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "CreateAuthorizationRequest": {
            "description": "Provide parameters used during this authorization attempt.",
            "type": "object",
            "title": "CreateAuthorizationRequest",
            "properties": {
                "appUri": {
                    "description": "The end user will be redirected to this URI after the authorization code has been delivered. This field is used for flows where we have third party redirects to financial institutions. There is a default value which is tink://open. It can be any type of URI (mobile deeplink, http address etc.)",
                    "type": "string",
                    "example": "https://my-customer-app.com/authentication"
                },
                "callbackUri": {
                    "description": "This URI will be used by the ASPSP to pass the authorization code. It corresponds to the redirect/callback URI in OAuth2/OpenId. This parameter is only applicable if you are a TPP.",
                    "type": "string",
                    "example": "http://my-customer-app.com/callback"
                }
            }
        },
        "CreateAuthorizationResponse": {
            "type": "object",
            "title": "CreateAuthorizationResponse",
            "properties": {
                "authorization": {
                    "$ref": "#/definitions/Connectivity%20v2.Authorization"
                }
            }
        },
        "CreateBudgetResponse": {
            "type": "object",
            "title": "CreateBudgetResponse",
            "properties": {
                "budgetSpecification": {
                    "$ref": "#/definitions/Finance%20Management.Budgets",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "CreateConsentRequest": {
            "description": "Provide the consent parameters.",
            "type": "object",
            "title": "CreateConsentRequest",
            "required": [
                "financialService",
                "financialServiceParameters",
                "providerId",
                "userId"
            ],
            "properties": {
                "financialService": {
                    "$ref": "#/definitions/Connectivity%20v2.FinancialService"
                },
                "financialServiceParameters": {
                    "$ref": "#/definitions/Connectivity%20v2.FinancialServiceParameters"
                },
                "providerId": {
                    "description": "The provider (financial institution) name that the consent is connected to.",
                    "type": "string",
                    "example": "se-nordea-ob"
                },
                "userId": {
                    "description": "The user unique id that the consent is connected to.",
                    "type": "string",
                    "example": "7c41103806a011edb9390242ac120002"
                }
            }
        },
        "CreateConsentResponse": {
            "type": "object",
            "title": "CreateConsentResponse",
            "properties": {
                "consent": {
                    "$ref": "#/definitions/Connectivity%20v2.Consent"
                }
            }
        },
        "CreateCredentialsRequest": {
            "type": "object",
            "required": [
                "fields",
                "providerName"
            ],
            "properties": {
                "appUri": {
                    "description": "The end user will be redirected to this URI after the authorization code has been delivered. This field is used for flows where we have third party redirects to financial institutions. There is a default value which is tink://open. It can be any type of URI (mobile deeplink, http address etc.)",
                    "type": "string",
                    "example": "https://my-customer-app.com/authentication"
                },
                "callbackUri": {
                    "description": "This URI will be used by the ASPSP to pass the authorization code. It corresponds to the redirect/callback URI in OAuth2/OpenId. This parameter is only applicable if you are a TPP.",
                    "type": "string",
                    "example": "http://my-customer-app.com/callback"
                },
                "fields": {
                    "description": "This is a key-value map of `Field` name and value found on the `Provider` to which the credentials belongs to. This parameter is required when creating credentials.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": "{\"username\":\"198410045701\"}"
                },
                "originatingUserIp": {
                    "description": "The originating user's remote IP address of the corresponding HTTP request.\n",
                    "type": "string",
                    "example": "198.51.100.10"
                },
                "providerName": {
                    "description": "The provider (financial institution) that the credentials is connected to.",
                    "type": "string",
                    "example": "handelsbanken-bankid"
                },
                "selectedAuthenticationOptions": {
                    "description": "[BETA] Specifies the selected authentication options for each available group when a provider has more than one authentication option available in any of the available groups.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/SelectedAuthenticationOption"
                    }
                },
                "triggerRefresh": {
                    "description": "Defines if the Credentials creation should cause a refresh on aggregated data. Defaults to `true`",
                    "type": "boolean",
                    "default": false,
                    "example": false
                }
            }
        },
        "CreateOneOffBudgetRequest": {
            "description": "The one off budget to be created.",
            "type": "object",
            "title": "CreateOneOffBudgetRequest",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "The name of the Budget.",
                    "type": "string",
                    "example": "Coffee budget",
                    "allowEmptyValue": null,
                    "position": null
                },
                "oneOffPeriodicity": {
                    "$ref": "#/definitions/BudgetOneOffPeriodicity",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "CreateRecurringBudgetRequest": {
            "description": "Create budget with the requested fields.",
            "type": "object",
            "title": "CreateRecurringBudgetRequest",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "The name of the Budget.",
                    "type": "string",
                    "example": "Coffee budget",
                    "allowEmptyValue": null,
                    "position": null
                },
                "recurringPeriodicity": {
                    "$ref": "#/definitions/BudgetRecurringPeriodicity",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "CreateTransactionAccountContainer": {
            "description": "Container of account and transactions.",
            "type": "object",
            "title": "CreateTransactionAccountContainer",
            "required": [
                "transactionAccounts",
                "type"
            ],
            "properties": {
                "autoBook": {
                    "description": "(DEPRECATED) This feature try to automatically match stored pending transactions to booked transactions in the incoming batch. This feature is disabled by default and deprecated",
                    "type": "boolean"
                },
                "overridePending": {
                    "description": "When enabled, all stored pending transactions will be replaced by the pending transactions in the batch. Stored pending transaction present in batch will be kept but not updated and new pending transactions will be stored. Already stored pending transactions not existing in batch will be removed, hence make sure all pending transaction already stored and to be kept are sent in the batch. It is a requirement to set EXPIRE date on pending transactions to maximum 30 days(pending transactions older than 30 days have no guarantee to be replaced). This feature should only be used when no known external-id relation between the pending and booked transactions exists. Please contact your Technical Project Manager to enable this option.",
                    "type": "boolean"
                },
                "transactionAccounts": {
                    "description": "The transaction accounts. All accounts accumulated may contain a maximum of 2500 transactions per request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CreateTransactionAccountEntity"
                    }
                },
                "type": {
                    "description": "Defines the priority of the ingestion request: `BATCH`: is recommended for non time critical ingestion requests in daily running batch jobs. Note: Should be used for backfilling users transaction history. `REAL_TIME`: is recommended for ingestion requests where it is time critical to minimize lag before transactions are available on the api. Note: This request type is designed for reflecting the most recent updates on a user's account, like ingesting or updating recently booked transactions. It is not intended for fulfilling larger requests such as backfilling a user's entire transaction history. `HISTORICAL`: is deprecated. Requests of type HISTORICAL are processed with same priority as BATCH but account balance will be ignored if this option is used. ",
                    "type": "string",
                    "enum": [
                        "REAL_TIME",
                        "HISTORICAL",
                        "BATCH",
                        "REAL_TIME, HISTORICAL, BATCH"
                    ],
                    "example": "BATCH"
                }
            }
        },
        "CreateTransactionAccountEntity": {
            "description": "The transaction accounts. All accounts accumulated may contain a maximum of 2500 transactions per request.",
            "type": "object",
            "title": "CreateTransactionAccountEntity",
            "required": [
                "balance",
                "externalId",
                "transactions"
            ],
            "properties": {
                "balance": {
                    "description": "The balance of the account at the time of the last transaction in the list.If a reserved amount is supplied will the accounts balance be set to the here supplied balance minus the reserved amount.",
                    "type": "number",
                    "format": "double",
                    "example": 7000
                },
                "externalId": {
                    "description": "External identifier for the account the transaction belongs to.",
                    "type": "string",
                    "example": "2d3bd65493b549e1927d97a2d0683ab9"
                },
                "payload": {
                    "description": "This property is deprecated and disabled as default. \n\nFor customers where it is still enabled observe that the payload may not exceed 200 chars.\n\nPlease contact your Technical Project Manager if your use case depend on this property.",
                    "type": "object",
                    "example": {}
                },
                "reservedAmount": {
                    "description": "The reserved amount of the account at the time of the last transaction in the list.The reserved amount is optional. If a reserved amount is supplied will the accounts balance be set to the supplied `balance` minus the supplied reserved amount.",
                    "type": "number",
                    "format": "double",
                    "example": 2000
                },
                "transactions": {
                    "description": "The transaction list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CreateTransactionEntity"
                    }
                }
            }
        },
        "CreateTransactionEntity": {
            "description": "The list with the single transaction to update.",
            "type": "object",
            "title": "CreateTransactionEntity",
            "required": [
                "amount",
                "date",
                "description",
                "externalId",
                "type"
            ],
            "properties": {
                "amount": {
                    "description": "The debited/credited amount in the currency of the account.",
                    "type": "number",
                    "format": "double",
                    "example": -98.5
                },
                "counterparties": {
                    "$ref": "#/definitions/ConnectorCounterparties"
                },
                "date": {
                    "description": "Date is when the transaction was executed, not when it was settled (except for scheduled transfers/payments, where the settling date is to be interpreted as the execution date). The date cannot be older than 10 years.",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "A merchant name if possible. If such value is not available, the description that is shown in the transaction list.",
                    "type": "string",
                    "example": "Riche Teatergrillen"
                },
                "externalId": {
                    "description": "External identifier for the transaction. Must be unique per user and account.",
                    "type": "string",
                    "example": "40dc04e5353547378c84f34ffc88f853"
                },
                "merchantCategoryCode": {
                    "description": "[BETA] Merchant category code (MCC) specified as ISO-18245 4-digit string.",
                    "type": "string",
                    "example": "5411"
                },
                "merchantName": {
                    "description": "Merchant name of the transaction.",
                    "type": "string",
                    "example": "Sainsbury's,"
                },
                "payload": {
                    "description": "The payload property is a key-value map. Maximum total size of payload data is 1000 chars. The key must be one the following supported ones:\u003cbr/\u003e\u003ccode\u003ePENDING_IDS\u003c/code\u003e: A list of pending transaction external IDs for which this transaction is a booking of. If the user has changed any of the pending transactions, this transaction will get the category of the pending transaction with the largest amount if it constitutes at least half of this transactions amount.\u003cbr/\u003e\u003ccode\u003ePENDING_TRANSACTION_EXPIRATION_DATE\u003c/code\u003e: A UNIX timestamp for when this transaction should be automatically removed from the database. The removal will happen when other transactions are sent in. Can only be set on transactions marked as pending.\u003cbr/\u003e \u003ccode\u003eTAGS\u003c/code\u003e: An array of strings that will be set as tags within the notes field of the transaction. Each tag must be alphanumeric without whitespace.",
                    "type": "object",
                    "example": {}
                },
                "pending": {
                    "description": "If the transaction is pending (reserved) or not (booked).",
                    "type": "boolean"
                },
                "tinkId": {
                    "description": "Ignored for new objects. Used to specify the id as given by Tink on when updating objects without an existing external ID.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the transaction.",
                    "type": "string",
                    "enum": [
                        "DEFAULT",
                        "CREDIT_CARD",
                        "TRANSFER",
                        "PAYMENT",
                        "WITHDRAWAL",
                        "TRAINING",
                        "DEFAULT, CREDIT_CARD, TRANSFER, PAYMENT, WITHDRAWAL"
                    ],
                    "example": "CREDIT_CARD"
                }
            }
        },
        "CreateUserRequest": {
            "type": "object",
            "required": [
                "market"
            ],
            "properties": {
                "external_user_id": {
                    "description": "Optional external user ID for the created user.",
                    "type": "string",
                    "example": "user_123_abc"
                },
                "locale": {
                    "description": "Locale for the user. Defaults to default locale for the user's market.",
                    "type": "string",
                    "example": "en_US"
                },
                "market": {
                    "description": "Market specific code for the user as a ISO 3166-1 country code.",
                    "type": "string",
                    "example": "SE"
                },
                "retention_class": {
                    "description": "[BETA] Determines whether Tink will retain the user until explicitly deleted, or automatically delete the user after 24 hours. Set with either \"permanent\" or \"temporary\". Defaults to the \u003ca href=\"https://docs.tink.com/glossary#permanent-users:~:text=our%20guide.-,Permanent%20users,-A%20Tink%20User\"\u003euser retention setting for your app\u003c/a\u003e.",
                    "type": "string",
                    "example": "permanent"
                }
            }
        },
        "CreateUserResponse": {
            "type": "object",
            "required": [
                "external_user_id",
                "user_id"
            ],
            "properties": {
                "external_user_id": {
                    "description": "The external user ID of the created user.",
                    "type": "string",
                    "example": "user_123_abc"
                },
                "user_id": {
                    "description": "The user ID of the created user.",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5823"
                }
            }
        },
        "CreatedTransferDTO": {
            "type": "object",
            "title": "CreatedTransferDTO",
            "required": [
                "amount",
                "currency",
                "id",
                "market",
                "providerName",
                "recipientName",
                "status",
                "recipient",
                "remittanceInformation"
            ],
            "properties": {
                "amount": {
                    "description": "The payment amount.",
                    "type": "number",
                    "example": 10
                },
                "created": {
                    "description": "The timestamp of creation of a bank transfer for the payment request.",
                    "type": "string",
                    "format": "date-time",
                    "example": 1553095951000
                },
                "currency": {
                    "description": "The currency of the payment amount.",
                    "type": "string",
                    "example": "SEK"
                },
                "destination": {
                    "description": "The destination object. Deprecated in favor of `recipient`. ",
                    "$ref": "#/definitions/PaymentDestinationDTO",
                    "example": {
                        "accountNumber": "33008808080808",
                        "reference": "3245928392092",
                        "type": "se"
                    }
                },
                "id": {
                    "description": "Transfer id.",
                    "type": "string",
                    "example": "40dc04e5353547378c84f34ffc88f853"
                },
                "market": {
                    "description": "The primary market of the payer. The market is usually the country code (in ISO 3166-1 alpha-2 format).",
                    "type": "string",
                    "example": "SE"
                },
                "merchantId": {
                    "description": "Id of the merchant to affiliate with this payment request.",
                    "type": "string",
                    "example": "c7f2de71-ad83-4eb7-b7df-5ed6445cb2af"
                },
                "metadata": {
                    "description": "A key-value dictionary with custom metadata for the payment request. All keys and values must be strings. For privacy protection, it is not allowed to use this dictionary for storing personal data (e.g. names and addresses).",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "custom key": "custom value",
                        "merchantReference": "17172137"
                    }
                },
                "paymentScheme": {
                    "description": "The payment scheme that was eventually used for the transfer.",
                    "type": "string",
                    "enum": [
                        "FASTER_PAYMENTS",
                        "INSTANT_NORWEGIAN_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                        "MULTIBANCO_SERVICE",
                        "NORWEGIAN_DOMESTIC_CREDIT_TRANSFER",
                        "SEPA_CREDIT_TRANSFER",
                        "SEPA_INSTANT_CREDIT_TRANSFER",
                        "SWISS_DOMESTIC_CREDIT_TRANSFER",
                        "DANISH_DOMESTIC_CREDIT_TRANSFER",
                        "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                        "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_INTRADAG"
                    ],
                    "example": "FASTER_PAYMENTS"
                },
                "providerName": {
                    "description": "The provider (financial institution) that the payer's account belongs to.",
                    "type": "string",
                    "example": "handelsbanken-bankid"
                },
                "recipient": {
                    "description": "Information about recipient receiving the payment including account data, business identifier code and address. This information might be needed to make a cross-border payment.",
                    "$ref": "#/definitions/RecipientDTO",
                    "example": {
                        "accountNumber": "31245678901234",
                        "accountType": "sort-code",
                        "businessIdentifierCode": "BOFAUS3NXXX"
                    }
                },
                "recipientName": {
                    "description": "The recipient name shown to the payer on signing payments.",
                    "type": "string",
                    "example": "Test AB"
                },
                "remittanceInformation": {
                    "description": "The structured or unstructured remittance information for the payment request. Use for reconciliation purposes.",
                    "$ref": "#/definitions/RemittanceInformationDTO",
                    "example": {
                        "type": "UNSTRUCTURED",
                        "value": "CREDITOR REFERENCE"
                    }
                },
                "sender": {
                    "description": "Sender pinned to this payment. If enabled, only this particular person will be able to initiate this payment.",
                    "$ref": "#/definitions/PinnedSenderDTO",
                    "example": {
                        "accountNumber": "33008808080808",
                        "accountType": "se",
                        "firstName": "John",
                        "lastName": "Smith,"
                    }
                },
                "source": {
                    "description": "The source object. Only returned if available from the bank response. Some fields, for example payerName, are not available for all customers and need to be enabled by Tink.",
                    "$ref": "#/definitions/PaymentSourceDTO",
                    "example": {
                        "accountNumber": "33008808080808",
                        "payerName": "John Smith",
                        "type": "se"
                    }
                },
                "sourceMessage": {
                    "description": "The transaction description on the payers account for the payment.",
                    "type": "string",
                    "example": "Payment for Gym Equipment"
                },
                "status": {
                    "description": "Current status of the payment. The value of this field changes during payment initiation according to \u003ca href=\"/resources/payments/one-time-payments/one-time-payments-status-transitions\"\u003epayment status transitions\u003c/a\u003e.",
                    "type": "string",
                    "enum": [
                        "AWAITING_CREDENTIALS",
                        "CANCELLED",
                        "CREATED",
                        "FAILED",
                        "SENT",
                        "SETTLED",
                        "SETTLED_PAYEE",
                        "SETTLED_PAYER"
                    ],
                    "example": "SENT"
                },
                "statusMessage": {
                    "description": "A message explaining the current status of the payment. This field is populated only if status is one of the \u003ca href=\"/resources/payments/one-time-payments/one-time-payments-status-transitions\"\u003eterminal statuses\u003c/a\u003e.",
                    "type": "string",
                    "example": "The payment has been sent to your bank"
                },
                "updated": {
                    "description": "The timestamp of update of a bank transfer for the payment request.",
                    "type": "string",
                    "format": "date-time",
                    "example": 1553169600000
                }
            }
        },
        "CredentialsListResponse": {
            "type": "object",
            "properties": {
                "credentials": {
                    "description": "A list of credentials",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Connectivity%20v1.Credentials"
                    }
                }
            }
        },
        "CurrencyDenominatedAmount": {
            "type": "object",
            "required": [
                "currencyCode",
                "scale",
                "unscaledValue"
            ],
            "properties": {
                "currencyCode": {
                    "description": "The ISO 4217 currency code of the amount",
                    "type": "string",
                    "example": "EUR"
                },
                "scale": {
                    "description": "The scale of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2
                },
                "unscaledValue": {
                    "description": "The unscaled value of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1050
                }
            }
        },
        "Data v1.Account": {
            "description": "The `Account` object represents a bank account. Features of the object may vary between different account types.",
            "type": "object",
            "required": [
                "accountExclusion",
                "accountNumber",
                "balance",
                "credentialsId",
                "excluded",
                "favored",
                "id",
                "name",
                "ownership",
                "type"
            ],
            "properties": {
                "accountExclusion": {
                    "description": "Indicates features this account should be excluded from. Possible values are: `NONE`: No features are excluded from this account, `PFM_DATA`: Personal Finance Management features, like statistics and activities are excluded, `PFM_AND_SEARCH`: Personal Finance Management features are excluded and transactions belonging to this account are not searchable. This is the equivalent of the, now deprecated, boolean flag 'excluded', `AGGREGATION`: No data will be aggregated for this account and all data associated with the account is removed (except account name and account number). This property can be updated in an update account request.",
                    "type": "string",
                    "enum": [
                        "AGGREGATION",
                        "PFM_AND_SEARCH",
                        "PFM_DATA",
                        "NONE"
                    ]
                },
                "accountNumber": {
                    "description": "The number that the user would typically recognize as their account number, for example when selecting their account in a list.For card-based accounts where the card number is also the unique account identifier, this field contains the masked PAN.For US accounts, this field would typically contain the last 4 digits of the full account number.",
                    "type": "string",
                    "example": "1234-123456789"
                },
                "balance": {
                    "description": "The current booked balance of the account. The type of booked balance may vary with bank integration and capabilities. In case the bank can provide multiple types of balances the prioritization will be as followed, Interim booked balance is prioritized first, then open and closed booked balance.\u003c/br\u003e`Interim Balance`: is booked balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day. The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\u003c/br\u003e`Open Balance`: is booked balance of the account at the beginning of the account reporting period. It always equals the closing book balance from the previous report.\u003c/br\u003e`Closed Balance`: is booked balance of the account at the end of the pre-agreed account reporting period. It is the sum of the opening booked balance at the beginning of the period and all entries booked to the account during the pre-agreed account reporting period.\u003c/br\u003e\u003c/br\u003eThe definition of the balance property differs between account types.\u003c/br\u003e`SAVINGS`, `CHECKING`: the balance represents the actual amount of cash in the account, \u003c/br\u003e`INVESTMENT`: the balance represents the value of the investments connected to this accounts including any available cash, \u003c/br\u003e`LOAN`: the balance represents the loan debt outstanding from this account, \u003c/br\u003e`CREDIT_CARD`: the balance represents the outstanding balance on the account, it does not include any available credit or purchasing power the user has with the credit provider.",
                    "type": "number",
                    "format": "double",
                    "example": 34567.5
                },
                "bankId": {
                    "description": "For Connector ingested accounts, the account `externalId` associated with the account during ingestion will be present in this field. Typically used as a unique key for each ingested account. All other usage of this field (e.g. aggregated accounts) is deprecated and highly discouraged.",
                    "type": "string",
                    "example": "DE239857295893485"
                },
                "closed": {
                    "description": "A closed account indicates that it was no longer available from the connected financial institution, most likely due to it having been closed by the user.",
                    "type": "boolean"
                },
                "credentialsId": {
                    "description": "The internal identifier of the credentials that the account belongs to.",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822"
                },
                "currencyDenominatedBalance": {
                    "description": "The current balance of the account. The definition of the balance property differs between account types. `SAVINGS`: the balance represents the actual amount of cash in the account, `INVESTMENT`: the balance represents the value of the investments connected to this account including any available cash, `MORTGAGE`: the balance represents the loan debt outstanding for this account, `CREDIT_CARD`: the balance represents the outstanding balance of the account, it does not include any available credit or purchasing power the user has with the credit provider. The balance is represented as a scale and unscaled value of the amount together with the ISO 4217 currency code.",
                    "$ref": "#/definitions/CurrencyDenominatedAmount",
                    "example": "{scale: 2, unscaledValue:3456750, currencyCode:EUR}"
                },
                "details": {
                    "description": "(DEPRECATED) Details contains information only applicable for accounts of the types `LOAN` and `MORTGAGE`. Not all banks offer detailed information about their loans and mortgages therefore details will not be present on some accounts.",
                    "$ref": "#/definitions/AccountDetails"
                },
                "excluded": {
                    "description": "Indicates if the user has excluded the account. Categorization and PFM Features are excluded, and transactions belonging to this account are not searchable. This property can be updated in an update account request.",
                    "type": "boolean",
                    "example": false
                },
                "favored": {
                    "description": "Indicates if the user has favored the account. This property can be updated in an update account request.",
                    "type": "boolean",
                    "example": false
                },
                "financialInstitutionId": {
                    "description": "Unique identifier to group accounts belonging the same financial institution. Available for aggregated accounts only.",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822"
                },
                "firstSeen": {
                    "description": "The UNIX epoch timestamp of when the account was first seen by Tink, e.g. when the account was aggregated for the first time.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455009102000"
                },
                "flags": {
                    "description": "List of flags specifying attributes of the account.",
                    "type": "string",
                    "enum": [
                        "BUSINESS",
                        "MANDATE"
                    ],
                    "example": "[\"MANDATE\"]"
                },
                "holderName": {
                    "description": "The name of the account holder.",
                    "type": "string",
                    "example": "Thomas Alan Waits"
                },
                "iban": {
                    "description": "IBAN account identifier for the account. This field is based on the value of the identifiers field.",
                    "type": "string",
                    "example": "SE7921000813610123456789"
                },
                "id": {
                    "description": "Internal account identifier.",
                    "type": "string",
                    "example": "a6bb87e57a8c4dd4874b241471a2b9e8"
                },
                "identifiers": {
                    "description": "All possible ways to uniquely identify this `Account`. An se-identifier is built up like: `se://{clearingnumber}{accountnumber}`.",
                    "type": "string",
                    "example": "[\"se://9999111111111111\"]"
                },
                "name": {
                    "description": "Name of the account assigned by the account holder or by the financial institution.\nThis field is typically what the user recognises in their online banking app.",
                    "type": "string",
                    "example": "My account"
                },
                "ownership": {
                    "description": "Ownership ratio indicating how much of the account is owned by the user. The ownership determine the percentage of the amounts on transactions belonging to this account, that should be attributed to the user when statistics are calculated. This property has a default value, and it can only be updated by you in an update account request.",
                    "type": "number",
                    "format": "double",
                    "example": 0.5
                },
                "refreshed": {
                    "description": "The UNIX epoch timestamp of when the account was last refreshed.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "type": {
                    "description": "The type of the account. This property can be updated in an update account request.",
                    "type": "string",
                    "enum": [
                        "CHECKING",
                        "SAVINGS",
                        "INVESTMENT",
                        "MORTGAGE",
                        "CREDIT_CARD",
                        "LOAN",
                        "PENSION",
                        "OTHER",
                        "EXTERNAL"
                    ]
                }
            }
        },
        "Data v1.Account Verification": {
            "description": "The Account Verification Report API is used to verify a user's bank account and provide account details.\n\nThis API is e.g. used in the [Account Check](https://docs.tink.com/resources/account-check) flow, as a way to retrieve the account information.\n\n*Note:* The report is a temporary resource that will be available for retrieval for 1h after creation.\n\n",
            "type": "object",
            "required": [
                "created",
                "id",
                "userDataByProvider"
            ],
            "properties": {
                "created": {
                    "description": "The UNIX epoch timestamp represents the creation date and time of the report.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1455740874875
                },
                "externalReference": {
                    "description": "An external reference identifier given by the client in the Account Check Tink Link session or Tink Link query.",
                    "type": "string",
                    "example": "ext-abc-123"
                },
                "id": {
                    "description": "Tink unique identifier for the account report. Generated at the moment of report creation.",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822"
                },
                "userDataByProvider": {
                    "description": "The user data returned by the provider.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProviderUserData"
                    }
                }
            }
        },
        "Data v1.Identity": {
            "description": "The identity model represents personal information of a user which can be used to identify the person. To get as much identity data as possible the information is collected per provider.",
            "type": "object",
            "title": "Data v1.Identity",
            "properties": {
                "dateOfBirth": {
                    "description": "Date of birth of the user. The date will follow ISO 8601 with format yyyy-MM-dd.",
                    "type": "string",
                    "example": "1970-01-01",
                    "allowEmptyValue": true
                },
                "name": {
                    "description": "Full name of the user",
                    "type": "string",
                    "example": "Jane Doe",
                    "allowEmptyValue": true
                },
                "providerName": {
                    "description": "The provider from where the data was collected.",
                    "type": "string",
                    "example": "se-bankname-bankid",
                    "allowEmptyValue": true
                },
                "ssn": {
                    "description": "Social security number of the user.",
                    "type": "string",
                    "example": "19700101-1234",
                    "allowEmptyValue": true
                }
            }
        },
        "Data v1.Investment": {
            "description": "Investments represent a user's financial engagement with products such as stocks or funds. They are structured as investment portfolios containing financial instruments, where a user can have multiple different types of portfolios with multiple different types of instruments.",
            "type": "object",
            "properties": {
                "portfolios": {
                    "description": "A list of the user's portfolios.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Portfolio"
                    }
                }
            }
        },
        "Data v1.Loan": {
            "description": "Loans represent a user's loan towards a financial institution, such as a mortgage or a student loan. Technically, they can be seen as accounts, but also contain additional details such as interest rate, amortization, loan securities and applicants.",
            "type": "object",
            "properties": {
                "accountId": {
                    "description": "The internal identifier of the account which has the portfolio.",
                    "type": "string",
                    "format": "uuid",
                    "example": "a7b67265-8030-4d65-aa42-a8f4bd287a72"
                },
                "amortized": {
                    "description": "Amount amortized to date.",
                    "type": "number",
                    "format": "double",
                    "example": 1000
                },
                "balance": {
                    "description": "The current loan account balance.",
                    "type": "number",
                    "format": "double",
                    "example": -9000
                },
                "id": {
                    "description": "The internal identifier of the loan.",
                    "type": "string",
                    "format": "uuid",
                    "example": "65bc7a41-a66e-4ad1-aad1-99bbfb3c5098"
                },
                "initialBalance": {
                    "description": "The initial loan account balance.",
                    "type": "number",
                    "format": "double",
                    "example": -10000
                },
                "initialDate": {
                    "description": "Loan issue date.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "interest": {
                    "description": "Interest rate.",
                    "type": "number",
                    "format": "double",
                    "example": 0.025
                },
                "loanDetails": {
                    "$ref": "#/definitions/LoanDetails"
                },
                "loanNumber": {
                    "description": "The provider's internal identifier for the loan.",
                    "type": "string",
                    "example": "01-123456-234567"
                },
                "monthlyAmortization": {
                    "description": "Fixed monthly amortization amount.",
                    "type": "number",
                    "format": "double",
                    "example": 100
                },
                "name": {
                    "description": "Descriptive label for the loan.",
                    "type": "string",
                    "example": "Car Loan"
                },
                "nextDayOfTermsChange": {
                    "description": "Reset date for the interest rate fixation period.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "numMonthsBound": {
                    "description": "Length of the interest rate fixation period expressed in number of months.",
                    "type": "integer",
                    "format": "int32",
                    "example": 36
                },
                "providerName": {
                    "description": "Identifier for the loan provider.",
                    "type": "string",
                    "example": "handelsbanken-bankid"
                },
                "type": {
                    "description": "The type of loan.",
                    "type": "string",
                    "enum": [
                        "MORTGAGE",
                        "BLANCO",
                        "MEMBERSHIP",
                        "VEHICLE",
                        "LAND",
                        "STUDENT",
                        "CREDIT",
                        "OTHER"
                    ],
                    "example": "MORTGAGE"
                },
                "updated": {
                    "description": "Loan details last updated timestamp.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1553169600000"
                },
                "userId": {
                    "description": "The internal identifier of the user which owns the portfolio.",
                    "type": "string",
                    "format": "uuid",
                    "example": "53559ef7-4508-4048-b322-2b175cdaab23"
                }
            }
        },
        "Data v1.Transaction": {
            "description": "An account usually contains multiple transactions (except for certain types of accounts where Tink can't access the underlying transactions, for example, certain `INVESTMENT` accounts). The transaction model represents any operation on an account, and could represent both the actual credit-card purchase on a `CREDIT_CARD` account, but also represent the transaction when you paid your credit-card bill. Most commonly, the transactions in an account should represent what the end-user typically regards as a transaction with its amount, description and date, etc.",
            "type": "object",
            "required": [
                "accountId",
                "amount",
                "categoryId",
                "categoryType",
                "credentialsId",
                "date",
                "description",
                "id",
                "lastModified",
                "notes",
                "originalAmount",
                "originalDate",
                "originalDescription",
                "pending",
                "timestamp",
                "type",
                "userId"
            ],
            "properties": {
                "accountId": {
                    "description": "The internal identifier of the account that the transaction belongs to.",
                    "type": "string",
                    "example": "3fe2d96efacd4dc5994404a950f238a9"
                },
                "amount": {
                    "description": "The amount of the transaction. This can be modified by the user.",
                    "type": "number",
                    "format": "double",
                    "example": 34.5
                },
                "categoryId": {
                    "description": "The category of the transaction. This can be modified by the user.",
                    "type": "string",
                    "example": "0e1bade6a7e3459eb794f27b7ba4cea0"
                },
                "categoryType": {
                    "description": "The category type of the transaction.",
                    "type": "string",
                    "enum": [
                        "INCOME",
                        "EXPENSES",
                        "TRANSFERS"
                    ],
                    "example": "EXPENSES"
                },
                "credentialsId": {
                    "description": "(DEPRECATED) The internal identifier of the credentials that the transaction belongs to. This is deprecated and will soon be removed. This information can instead be accessed through the account. Account can be located with the transactions accountId. ",
                    "type": "string",
                    "example": "65bc7a41a66e4ad1aad199bbfb3c5098"
                },
                "currencyDenominatedAmount": {
                    "description": "The amount of the transaction represented as a scale and unscaled value together with the ISO 4217 currency code of the amount. The amount can be modified by the user but not the currency code.",
                    "$ref": "#/definitions/CurrencyDenominatedAmount",
                    "example": "{scale: 2, unscaledValue:2000, currencyCode:EUR}"
                },
                "currencyDenominatedOriginalAmount": {
                    "description": "The original amount that was received from the provider, before the user changed it. The amount is represented as a scale and unscaled value together with the ISO 4217 currency code of the amount.",
                    "$ref": "#/definitions/CurrencyDenominatedAmount",
                    "example": "{scale: 2, unscaledValue:2000, currencyCode:EUR}"
                },
                "date": {
                    "description": "The date the transaction was executed. This can be modified by the user.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "description": {
                    "description": "The description of the transaction. This can be modified by the user.",
                    "type": "string",
                    "example": "Stadium Sergelg Stockholm"
                },
                "dispensableAmount": {
                    "description": "(DEPRECATED) The dispensable amount of the transaction.",
                    "type": "number"
                },
                "formattedDescription": {
                    "description": "(DEPRECATED) Formatted version of the original description.",
                    "type": "string",
                    "example": "Stadium Sergelgatan Stockholm"
                },
                "id": {
                    "description": "The internal identifier of the transaction.",
                    "type": "string",
                    "example": "79c6c9c27d6e42489e888e08d27205a1"
                },
                "identifiers": {
                    "description": "Identifiers coming from the provider",
                    "$ref": "#/definitions/TransactionIdentifiers",
                    "example": "{providerExternalId: \"600aca79-23f2-4476-ac3a-5f1893b3b844\"}"
                },
                "inserted": {
                    "description": "(DEPRECATED) The timestamp representing when Tink stored the transaction.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1455740874875
                },
                "lastModified": {
                    "description": "The date the transaction was last modified by the user.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "notes": {
                    "description": "A free-text field modifiable by the user. Any 'word' (whitespace separated), prefixed with a #, is considered a tag. These tags become searchable.",
                    "type": "string",
                    "example": "Delicious #cake #wedding"
                },
                "originalAmount": {
                    "description": "The original amount that was received from the provider, before the user changed it.",
                    "type": "number",
                    "format": "double",
                    "example": 34.5
                },
                "originalDate": {
                    "description": "The original date that was received from the provider, before the user changed it. The date cannot be older than 10 years.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "originalDescription": {
                    "description": "The original description that was received from the provider, before the user changed it.",
                    "type": "string",
                    "example": "Stadium Sergelg Stockholm"
                },
                "partnerPayload": {
                    "description": "The payload that was previously ingested on the Connector API.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    },
                    "example": "{}"
                },
                "parts": {
                    "description": "(DEPRECATED) Available transaction parts. Populated when transaction is divided into more than one part.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionPart"
                    }
                },
                "payload": {
                    "description": "Arbitrary metadata in key value format with strings, provided by the financial institution in question. It can be used either for deep-linking back to the financial institution's app, for displaying additional information about the transaction, or for backend purposes such as automatic categorization improvement. It can also include metadata generated by Tink, for example transfer transactions that are automatically flagged as transfers based on the identification of the corresponding transaction on the other account and which includes the primary identifier of the peer transaction for easy access. Max total size of payload data is 10M chars.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": "{}"
                },
                "pending": {
                    "description": "Indicates if this transaction has been settled or is still pending.",
                    "type": "boolean",
                    "default": false
                },
                "timestamp": {
                    "description": "The timestamp of when the transaction was first saved to database.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1464543093494
                },
                "type": {
                    "description": "The type of the transaction.",
                    "type": "string",
                    "enum": [
                        "DEFAULT",
                        "CREDIT_CARD",
                        "TRANSFER",
                        "PAYMENT",
                        "WITHDRAWAL"
                    ],
                    "example": "CREDIT_CARD"
                },
                "upcoming": {
                    "description": "Indicates if this is an upcoming transaction not booked yet.",
                    "type": "boolean",
                    "default": false
                },
                "userId": {
                    "description": "The internal identifier of the user that the transaction belongs to.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "userModified": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "DeleteTransactionAccountEntity": {
            "description": "The transaction accounts.",
            "type": "object",
            "title": "DeleteTransactionAccountEntity",
            "required": [
                "balance",
                "externalId",
                "transactions"
            ],
            "properties": {
                "balance": {
                    "description": "The balance of the account for the time of the last transaction in the list.",
                    "type": "number",
                    "format": "double",
                    "example": 7000
                },
                "externalId": {
                    "description": "External identifier for the account the transaction belong to.",
                    "type": "string",
                    "example": "2d3bd65493b549e1927d97a2d0683ab9"
                },
                "payload": {
                    "description": "The payload property can include arbitrary metadata provided by the financial institution in question that can be used either for deep-linking back to the app of the financial institution, for displaying additional information about the account, or for backend purposes such as automatic categorization improvement, etc. The format is key-value, where key is a String and value any object.",
                    "type": "object",
                    "example": {}
                },
                "reservedAmount": {
                    "description": "The reserved amount of the account for the time of the last transaction in the list.",
                    "type": "number",
                    "format": "double",
                    "example": 2000
                },
                "transactions": {
                    "description": "The transaction list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeleteTransactionEntity"
                    }
                }
            }
        },
        "DeleteTransactionAccountsContainer": {
            "description": "Container of account and transactions.",
            "type": "object",
            "title": "DeleteTransactionAccountsContainer",
            "required": [
                "transactionAccounts",
                "type"
            ],
            "properties": {
                "transactionAccounts": {
                    "description": "The transaction accounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeleteTransactionAccountEntity"
                    }
                },
                "type": {
                    "description": "Defines the priority of the delete request. Only `REAL_TIME` is supported for reflecting the most recent updates on a user's account. For deleting whole account with transactions use [Delete account](https://docs.tink.com/api#connector/account/delete-account) instead. Please use [Delete user](https://docs.tink.com/api#general/user/delete-user) for deleting all user data with transactions.",
                    "type": "string",
                    "enum": [
                        "REAL_TIME",
                        "HISTORICAL",
                        "BATCH",
                        "REAL_TIME"
                    ],
                    "example": "REAL_TIME"
                }
            }
        },
        "DeleteTransactionEntity": {
            "description": "The transaction list.",
            "type": "object",
            "title": "DeleteTransactionEntity",
            "required": [
                "externalId"
            ],
            "properties": {
                "externalId": {
                    "description": "External identifier for the transaction.",
                    "type": "string",
                    "example": "40dc04e5353547378c84f34ffc88f853"
                }
            }
        },
        "DeleteTransactionPartResponse": {
            "type": "object",
            "required": [
                "transaction"
            ],
            "properties": {
                "counterpartTransaction": {
                    "description": "Counterpart transaction affected due to bilateral link being removed.",
                    "$ref": "#/definitions/Data%20v1.Transaction"
                },
                "transaction": {
                    "description": "The transaction to which the part belonged.",
                    "$ref": "#/definitions/Data%20v1.Transaction"
                }
            }
        },
        "EmptyResponse": {
            "type": "object",
            "title": "EmptyResponse",
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Request": {
            "description": "Request for on-demand enrichment.",
            "type": "object",
            "title": "Enrichment.As a Service.Request",
            "required": [
                "enrichments",
                "input"
            ],
            "properties": {
                "enrichments": {
                    "description": "The enrichments to perform.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "description": "The type of enrichment to perform.",
                        "type": "string",
                        "enum": [
                            "CATEGORIZATION",
                            "BRAND",
                            "BRAND_AND_MERCHANT"
                        ],
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "example": [
                        "CATEGORIZATION",
                        "BRAND_AND_MERCHANT"
                    ],
                    "allowEmptyValue": null,
                    "position": null
                },
                "input": {
                    "description": "The input to enrich.",
                    "type": "array",
                    "maxItems": 2500,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/Enrichment.As%20a%20Service.Request.Data%20Point",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Request.Data Point": {
            "description": "A transaction to enrich.",
            "type": "object",
            "title": "Enrichment.As a Service.Request.Data Point",
            "required": [
                "description",
                "id",
                "timestamp",
                "userMarket"
            ],
            "properties": {
                "amount": {
                    "description": "The amount of the transaction.\u003cbr/\u003eRequired in the case of \u003ccode\u003eCATEGORIZATION\u003c/code\u003e",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Request.Data%20Point.Amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "description": {
                    "description": "The description of the transaction.",
                    "type": "string",
                    "example": "Payment XXXX, Sensitive...",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "The ID of the transaction.",
                    "type": "string",
                    "example": "Transaction_1",
                    "allowEmptyValue": null,
                    "position": null
                },
                "merchant": {
                    "description": "The merchant of the transaction.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Request.Data%20Point.Merchant",
                    "allowEmptyValue": null,
                    "position": null
                },
                "timestamp": {
                    "description": "The timestamp of the transaction as ISO 8601 Zoned Instant.\u003cbr/\u003e\nPattern: \u003ccode\u003eyyyy-MM-dd'T'HH:mm:ss[.SSS]Z\u003c/code\u003e.\n",
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-02-27T13:48:43Z",
                    "allowEmptyValue": null,
                    "position": null
                },
                "transactionType": {
                    "description": "The type of transaction.",
                    "type": "string",
                    "enum": [
                        "AUTHORIZED",
                        "CLEARED"
                    ],
                    "example": "AUTHORIZED",
                    "allowEmptyValue": null,
                    "position": null
                },
                "userMarket": {
                    "description": "The user's market. ISO 3166-1 alpha-2 format.\u003cbr/\u003e\nExample: \u003ccode\u003eSE\u003c/code\u003e for Sweden.\u003cbr/\u003e\n",
                    "type": "string",
                    "example": "SE",
                    "allowEmptyValue": null,
                    "position": null
                },
                "visaTransactionId": {
                    "description": "The Visa transaction ID.",
                    "type": "string",
                    "example": "0123456789",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Request.Data Point.Amount": {
            "description": "The ISO 4217 amount of the transaction.",
            "type": "object",
            "title": "Enrichment.As a Service.Request.Data Point.Amount",
            "required": [
                "currencyCode",
                "valueInMinorUnit"
            ],
            "properties": {
                "currencyCode": {
                    "description": "The currency code as specified in ISO 4217.",
                    "type": "string",
                    "example": "SEK",
                    "allowEmptyValue": null,
                    "position": null
                },
                "valueInMinorUnit": {
                    "description": "The value in minor units as specified in ISO 4217.\u003cbr/\u003e\n\u003cstrong\u003eNOTE:\u003c/strong\u003e value is specified in minor units.\u003cbr/\u003e\ne.g. For EUR, 1 EUR = 100 cents. \u003cstrong\u003evalueInMinorUnits: 100\u003c/strong\u003e\n",
                    "type": "integer",
                    "format": "int64",
                    "example": 100,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Request.Data Point.Merchant": {
            "description": "The merchant of the transaction.",
            "type": "object",
            "title": "Enrichment.As a Service.Request.Data Point.Merchant",
            "properties": {
                "cardAcceptorId": {
                    "description": "Card Acceptor ID of the merchant.",
                    "type": "string",
                    "example": "0123456789",
                    "allowEmptyValue": null,
                    "position": null
                },
                "location": {
                    "description": "The location of the merchant.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Request.Data%20Point.Merchant.Location",
                    "allowEmptyValue": null,
                    "position": null
                },
                "merchantCategoryCode": {
                    "description": "The merchant category code, ISO 18245.",
                    "type": "string",
                    "pattern": "\\d{4}",
                    "example": "1711",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "The name of the merchant.",
                    "type": "string",
                    "example": "Tink",
                    "allowEmptyValue": null,
                    "position": null
                },
                "nationalIdentificationNumber": {
                    "description": "The tax ID of the merchant.",
                    "type": "string",
                    "example": "0123456789",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Request.Data Point.Merchant.Location": {
            "description": "The location of the merchant.",
            "type": "object",
            "title": "Enrichment.As a Service.Request.Data Point.Merchant.Location",
            "properties": {
                "address": {
                    "description": "The address of the merchant.",
                    "type": "string",
                    "example": "Tink Street",
                    "allowEmptyValue": null,
                    "position": null
                },
                "city": {
                    "description": "The city of the merchant.",
                    "type": "string",
                    "example": "Stockholm",
                    "allowEmptyValue": null,
                    "position": null
                },
                "country": {
                    "description": "The country of the merchant.",
                    "type": "string",
                    "example": "Sweden",
                    "allowEmptyValue": null,
                    "position": null
                },
                "zipCode": {
                    "description": "The ZIP code of the merchant.",
                    "type": "string",
                    "example": "11122",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response": {
            "description": "Response for on-demand enrichment.",
            "type": "object",
            "title": "Enrichment.As a Service.Response",
            "properties": {
                "output": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point": {
            "description": "An enriched transaction.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point",
            "required": [
                "id"
            ],
            "properties": {
                "categories": {
                    "description": "The categorization enrichment.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point.Categories",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "The transaction ID from the request.",
                    "type": "string",
                    "example": "Transaction_1",
                    "allowEmptyValue": null,
                    "position": null
                },
                "merchantInformation": {
                    "description": "The merchant information enrichment.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point.Merchant%20Information",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point.Categories": {
            "description": "Categorisation enrichment.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point.Categories",
            "properties": {
                "pfm": {
                    "description": "Personal financial management category.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point.Categories.Pfm",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point.Categories.Pfm": {
            "description": "Personal financial management category.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point.Categories.Pfm",
            "properties": {
                "categoryId": {
                    "description": "Category ID.",
                    "type": "string",
                    "example": "075fab3ec31f43aa9d39675475c1fb1a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "formattedDescription": {
                    "description": "Formatted description.",
                    "type": "string",
                    "example": "Payment XXXX",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point.Merchant Information": {
            "description": "Merchant information enrichment.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point.Merchant Information",
            "properties": {
                "brand": {
                    "description": "Brand enrichment.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point.Merchant%20Information.Brand",
                    "allowEmptyValue": null,
                    "position": null
                },
                "merchant": {
                    "description": "Merchant enrichment.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point.Merchant%20Information.Merchant",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point.Merchant Information.Brand": {
            "description": "Brand enrichment.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point.Merchant Information.Brand",
            "properties": {
                "contact": {
                    "description": "Brand contact information.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point.Merchant%20Information.Brand.Contact",
                    "allowEmptyValue": null,
                    "position": null
                },
                "iconUri": {
                    "description": "Brand icon URI.",
                    "type": "string",
                    "example": "https://...",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Brand ID.",
                    "type": "string",
                    "example": "02820044-69f5-4170-a516-fbeae6450f7a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "logoUri": {
                    "description": "Brand logo URI.",
                    "type": "string",
                    "example": "https://...",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "Brand name.",
                    "type": "string",
                    "example": "Tink",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point.Merchant Information.Brand.Contact": {
            "description": "Brand contact.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point.Merchant Information.Brand.Contact",
            "properties": {
                "website": {
                    "description": "Website location.",
                    "type": "string",
                    "example": "https://...",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point.Merchant Information.Merchant": {
            "description": "Merchant enrichment.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point.Merchant Information.Merchant",
            "properties": {
                "contact": {
                    "description": "Merchant contact information.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point.Merchant%20Information.Merchant.Contact",
                    "allowEmptyValue": null,
                    "position": null
                },
                "iconUri": {
                    "description": "Merchant icon URI.",
                    "type": "string",
                    "example": "https://...",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Merchant ID.",
                    "type": "string",
                    "example": "02820044-69f5-4170-a516-fbeae6450f7a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "location": {
                    "description": "Merchant location.",
                    "$ref": "#/definitions/Enrichment.As%20a%20Service.Response.Data%20Point.Merchant%20Information.Merchant.Location",
                    "allowEmptyValue": null,
                    "position": null
                },
                "logoUri": {
                    "description": "Merchant logo URI.",
                    "type": "string",
                    "example": "https://...",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "Merchant name.",
                    "type": "string",
                    "example": "Tink",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point.Merchant Information.Merchant.Contact": {
            "description": "Merchant contact.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point.Merchant Information.Merchant.Contact",
            "properties": {
                "phone": {
                    "description": "Merchant phone number.",
                    "type": "string",
                    "example": "+46....",
                    "allowEmptyValue": null,
                    "position": null
                },
                "website": {
                    "description": "Merchant website location.",
                    "type": "string",
                    "example": "https://...",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.As a Service.Response.Data Point.Merchant Information.Merchant.Location": {
            "description": "Merchant location.",
            "type": "object",
            "title": "Enrichment.As a Service.Response.Data Point.Merchant Information.Merchant.Location",
            "properties": {
                "city": {
                    "description": "Merchant city.",
                    "type": "string",
                    "example": "Stockholm",
                    "allowEmptyValue": null,
                    "position": null
                },
                "coordinates": {
                    "description": "Merchant coordinates.",
                    "type": "string",
                    "example": "59.33282, 18.05669",
                    "allowEmptyValue": null,
                    "position": null
                },
                "country": {
                    "description": "Merchant country.",
                    "type": "string",
                    "example": "Sweden",
                    "allowEmptyValue": null,
                    "position": null
                },
                "googlePlacesId": {
                    "description": "Merchant Google Places ID.",
                    "type": "string",
                    "example": "ChIJs5ydyTiuEmsR0fRSlU0C7k0",
                    "allowEmptyValue": null,
                    "position": null
                },
                "postalCode": {
                    "description": "Merchant postal code.",
                    "type": "string",
                    "example": "11122",
                    "allowEmptyValue": null,
                    "position": null
                },
                "street": {
                    "description": "Merchant street address.",
                    "type": "string",
                    "example": "Tink Street",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Brand Identification": {
            "description": "Enriched data for a transaction.",
            "type": "object",
            "title": "Enrichment.Brand Identification",
            "properties": {
                "id": {
                    "description": "Brand ID.",
                    "type": "string",
                    "example": "8948045b-d163-4d03-b9ec-3d5237a4550a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "logoUri": {
                    "description": "Logo URI.",
                    "type": "string",
                    "example": "https://tink.com/tesco/logo.png",
                    "allowEmptyValue": null,
                    "position": null
                },
                "merchant": {
                    "$ref": "#/definitions/Enrichment.Merchant",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "Brand name.",
                    "type": "string",
                    "example": "Tesco Stores",
                    "allowEmptyValue": null,
                    "position": null
                },
                "status": {
                    "$ref": "#/definitions/Enrichment.Enrichment%20Status",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Categories": {
            "description": "Enriched Categories",
            "type": "object",
            "title": "Enrichment.Categories",
            "properties": {
                "pfm": {
                    "$ref": "#/definitions/PFMCategory",
                    "allowEmptyValue": null,
                    "position": null
                },
                "status": {
                    "$ref": "#/definitions/Enrichment.Enrichment%20Status",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Category.Category": {
            "type": "object",
            "title": "Enrichment.Category.Category",
            "properties": {
                "childName": {
                    "description": "The child name of this category, or empty string.",
                    "type": "string",
                    "example": "Hobby \u0026 Sports Equipment",
                    "allowEmptyValue": null,
                    "position": null
                },
                "code": {
                    "description": "Category code.",
                    "type": "string",
                    "example": "expenses:shopping.hobby",
                    "allowEmptyValue": null,
                    "position": null
                },
                "defaultChild": {
                    "description": "Indicates if this is the default child to be used when categorizing to a primary level category.",
                    "type": "boolean",
                    "example": false,
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "The internal identifier of the category.",
                    "type": "string",
                    "example": "002129e58ca24923bccc60979eaa63cd",
                    "allowEmptyValue": null,
                    "position": null
                },
                "parent": {
                    "description": "The parent internal identifier of this category.",
                    "type": "string",
                    "example": "4e9b5f78d58640a787fd9efa7b5e58c0",
                    "allowEmptyValue": null,
                    "position": null
                },
                "parentName": {
                    "description": "The parent name of this category.",
                    "type": "string",
                    "example": "Shopping",
                    "allowEmptyValue": null,
                    "position": null
                },
                "sortOrder": {
                    "description": "Sort order for nicer display for the user.",
                    "type": "integer",
                    "format": "int32",
                    "example": 53,
                    "allowEmptyValue": null,
                    "position": null
                },
                "typeName": {
                    "description": "Type name of the category.",
                    "type": "string",
                    "example": "Expenses",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Category.List All Categories": {
            "description": "Response object contains the list of all available categories.",
            "type": "object",
            "title": "Enrichment.Category.List All Categories",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Category.Category",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Counterparties": {
            "type": "object",
            "title": "Enrichment.Counterparties",
            "properties": {
                "payee": {
                    "description": "Available payee information.",
                    "$ref": "#/definitions/Enrichment.Counterparty",
                    "allowEmptyValue": null,
                    "position": null
                },
                "payer": {
                    "description": "Available payer information.",
                    "$ref": "#/definitions/Enrichment.Counterparty",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Counterparty": {
            "type": "object",
            "title": "Enrichment.Counterparty",
            "properties": {
                "identifiers": {
                    "description": "Available identifiers.",
                    "$ref": "#/definitions/CounterpartyIdentifier",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "Name of a transaction counterparty from financial institution.",
                    "type": "string",
                    "example": "Idun Eriksson",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Currency Denominated Amount": {
            "description": "A sum of the variable spend for the category/period.",
            "type": "object",
            "title": "Enrichment.Currency Denominated Amount",
            "properties": {
                "currencyCode": {
                    "description": "The currency code which follows ISO-4217 standard.",
                    "type": "string",
                    "example": "GBP",
                    "allowEmptyValue": null,
                    "position": null
                },
                "value": {
                    "$ref": "#/definitions/ExactNumber",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Dates": {
            "type": "object",
            "title": "Enrichment.Dates",
            "properties": {
                "booked": {
                    "description": "For BOOKED transactions indicates the date when the transaction was posted on the financial institution’s books. For PENDING transactions indicates the expected booking date. Specified as a ISO-8601 date string (YYYY-MM-DD). Corresponds to the date displayed to the financial institution end user on their bank statement or transaction list in their online bank in the bank’s local time.",
                    "type": "string",
                    "example": "2020-12-15",
                    "allowEmptyValue": null,
                    "position": null
                },
                "value": {
                    "description": "The date when assets either become available or cease to be available to the account owner. Specified as a ISO-8601 date string (YYYY-MM-DD). Corresponds to the date displayed to the financial institution end user on their bank statement or transaction list in their online bank in the bank’s local time.",
                    "type": "string",
                    "example": "2020-12-15",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Description": {
            "type": "object",
            "title": "Enrichment.Description",
            "properties": {
                "detailed": {
                    "$ref": "#/definitions/TransactionInformation",
                    "allowEmptyValue": null,
                    "position": null
                },
                "display": {
                    "description": "Formatted and cleaned description intended to be shown to the end user when displaying a transactions list.",
                    "type": "string",
                    "example": "Tesco",
                    "allowEmptyValue": null,
                    "position": null
                },
                "original": {
                    "description": "Original unmodified description from the financial institution.",
                    "type": "string",
                    "example": "TESCO 123#52",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Enriched Data": {
            "type": "object",
            "title": "Enrichment.Enriched Data",
            "properties": {
                "brandIdentification": {
                    "$ref": "#/definitions/Enrichment.Brand%20Identification",
                    "allowEmptyValue": null,
                    "position": null
                },
                "categories": {
                    "$ref": "#/definitions/Enrichment.Categories",
                    "allowEmptyValue": null,
                    "position": null
                },
                "sustainability": {
                    "$ref": "#/definitions/Enrichment.Sustainability",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Enriched Transactions.Enriched Transaction": {
            "type": "object",
            "title": "Enrichment.Enriched Transactions.Enriched Transaction",
            "properties": {
                "accountId": {
                    "description": "Tink unique identifier for the account the transaction belongs to.",
                    "type": "string",
                    "example": "8927a317da2042f1a36949bed28575e4",
                    "allowEmptyValue": null,
                    "position": null
                },
                "amount": {
                    "$ref": "#/definitions/Enrichment.Currency%20Denominated%20Amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "bookedDateTime": {
                    "description": "For BOOKED transactions indicates the date and time when the transaction was posted on the financial institution’s books. For PENDING transactions indicates the expected booking date and time. Specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z) or with time zone offset (e.g. 2020-12-15T10:25:12+01:00). This field is only returned when a valid timestamp is provided by the financial institution.",
                    "type": "string",
                    "example": "2020-12-15T09:25:12Z",
                    "allowEmptyValue": null,
                    "position": null
                },
                "counterparties": {
                    "$ref": "#/definitions/Enrichment.Counterparties",
                    "allowEmptyValue": null,
                    "position": null
                },
                "dates": {
                    "$ref": "#/definitions/Enrichment.Dates",
                    "allowEmptyValue": null,
                    "position": null
                },
                "descriptions": {
                    "$ref": "#/definitions/Enrichment.Description",
                    "allowEmptyValue": null,
                    "position": null
                },
                "enrichedData": {
                    "$ref": "#/definitions/Enrichment.Enriched%20Data",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Tink unique identifier for the transaction.",
                    "type": "string",
                    "example": "d8f37f7d19c240abb4ef5d5dbebae4ef",
                    "allowEmptyValue": null,
                    "position": null
                },
                "identifiers": {
                    "$ref": "#/definitions/Enrichment.Identifiers",
                    "allowEmptyValue": null,
                    "position": null
                },
                "merchantInformation": {
                    "$ref": "#/definitions/Enrichment.Merchant%20Information",
                    "allowEmptyValue": null,
                    "position": null
                },
                "providerMutability": {
                    "description": "Transaction mutability status as indicated by the financial institution.",
                    "type": "string",
                    "enum": [
                        "MUTABILITY_UNDEFINED",
                        "MUTABLE",
                        "IMMUTABLE"
                    ],
                    "example": "MUTABILITY_UNDEFINED",
                    "allowEmptyValue": null,
                    "position": null
                },
                "reference": {
                    "description": "Transaction reference as provided by the financial institution.",
                    "type": "string",
                    "example": "RF12310007894321",
                    "allowEmptyValue": null,
                    "position": null
                },
                "status": {
                    "description": "Enumeration representing the status of a transaction.",
                    "type": "string",
                    "enum": [
                        "UNDEFINED",
                        "PENDING",
                        "BOOKED"
                    ],
                    "example": "BOOKED",
                    "allowEmptyValue": null,
                    "position": null
                },
                "transactionDateTime": {
                    "description": "The time and date when the transaction event was first initiated. For example when a payment card was authorized at the point of sale (before it was booked) or when a money transfer was first initiated (before it was executed). Specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z) or with time zone offset (e.g. 2020-12-15T10:25:12+01:00). This field is only returned when a valid timestamp is provided by the financial institution.",
                    "type": "string",
                    "example": "2020-12-15T09:25:12Z",
                    "allowEmptyValue": null,
                    "position": null
                },
                "types": {
                    "$ref": "#/definitions/Enrichment.Financial%20Types",
                    "allowEmptyValue": null,
                    "position": null
                },
                "valueDateTime": {
                    "description": "The date and time when assets either become available or cease to be available to the account owner. Specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z) or with time zone offset (e.g. 2020-12-15T10:25:12+01:00). This field is only returned when a valid timestamp is provided by the financial institution.",
                    "type": "string",
                    "example": "2020-12-15T09:25:12Z",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Enriched Transactions.Enriched Transactions Response": {
            "type": "object",
            "title": "Enrichment.Enriched Transactions.Enriched Transactions Response",
            "properties": {
                "nextPageToken": {
                    "description": "The nextPageToken value returned from a previous List request, if any.",
                    "type": "string",
                    "example": "AQ==",
                    "allowEmptyValue": null,
                    "position": null
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Enriched%20Transactions.Enriched%20Transaction",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Enriched Transactions.Similar Transactions Response": {
            "type": "object",
            "title": "Enrichment.Enriched Transactions.Similar Transactions Response",
            "properties": {
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Enriched%20Transactions.Enriched%20Transaction",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Enriched Transactions.Update Transactions Request": {
            "description": "List of transactions to be updated. \u003cb\u003eNOTE\u003c/b\u003e: \u003cu\u003eActual request is an array of the request example\u003c/u\u003e.",
            "type": "object",
            "title": "Enrichment.Enriched Transactions.Update Transactions Request",
            "required": [
                "enrichedData",
                "id"
            ],
            "properties": {
                "enrichedData": {
                    "$ref": "#/definitions/Enrichment.Enriched%20Transactions.Update%20Transactions%20RequestEnriched%20Data",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Tink transaction ID.",
                    "type": "string",
                    "example": "d8f37f7d19c240abb4ef5d5dbebae4ef",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "example": [
                {
                    "enrichedData": {
                        "categories": {
                            "pfm": {
                                "id": "string"
                            }
                        }
                    },
                    "id": "banana"
                },
                {
                    "enrichedData": {
                        "categories": {
                            "pfm": {
                                "id": "string"
                            }
                        }
                    },
                    "id": "apple"
                }
            ],
            "allowEmptyValue": null
        },
        "Enrichment.Enriched Transactions.Update Transactions RequestEnriched Data": {
            "description": "List of transactions to be updated. \u003cb\u003eNOTE\u003c/b\u003e: \u003cu\u003eActual request is an array of the request example\u003c/u\u003e.",
            "type": "object",
            "title": "Enrichment.Enriched Transactions.Update Transactions RequestEnriched Data",
            "required": [
                "categories"
            ],
            "properties": {
                "categories": {
                    "$ref": "#/definitions/Enrichment.Enriched%20Transactions.Update%20Transactions%20RequestEnriched%20Data.Categories",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Enriched Transactions.Update Transactions RequestEnriched Data.Categories": {
            "description": "List of transactions to be updated. \u003cb\u003eNOTE\u003c/b\u003e: \u003cu\u003eActual request is an array of the request example\u003c/u\u003e.",
            "type": "object",
            "title": "Enrichment.Enriched Transactions.Update Transactions RequestEnriched Data.Categories",
            "required": [
                "pfm"
            ],
            "properties": {
                "pfm": {
                    "$ref": "#/definitions/Pfm",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Enrichment Status": {
            "type": "object",
            "title": "Enrichment.Enrichment Status",
            "properties": {
                "code": {
                    "description": "    SUCCESS: enrichment was successful.\n    FAILURE: temporary unknown failure.\n    PRODUCT_NOT_PERMITTED: the product is not permitted.\n    PRODUCT_NOT_AVAILABLE: the product is not available.\n",
                    "type": "string",
                    "enum": [
                        "SUCCESS",
                        "FAILURE",
                        "PRODUCT_NOT_PERMITTED",
                        "PRODUCT_NOT_AVAILABLE"
                    ],
                    "example": "SUCCESS",
                    "allowEmptyValue": null,
                    "position": null
                },
                "message": {
                    "description": "Error message in case of failure..",
                    "type": "string",
                    "example": "\u003conly on failure\u003e",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Error Response": {
            "description": "Generic error response containing information about what happened.",
            "type": "object",
            "title": "Enrichment.Error Response",
            "properties": {
                "code": {
                    "description": "Error code.",
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "allowEmptyValue": null,
                    "position": null
                },
                "detailCode": {
                    "description": "More specific error code.",
                    "$ref": "#/definitions/Enrichment.Error%20Response.Error%20Code",
                    "allowEmptyValue": null,
                    "position": null
                },
                "details": {
                    "description": "List of details.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "example": "[...]",
                    "allowEmptyValue": null,
                    "position": null
                },
                "message": {
                    "description": "Error message.",
                    "type": "string",
                    "example": "Something went wrong.",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Error Response.Error Code": {
            "description": "More specific error codes that can be found as `detailCode` in the error response. NON_SPECIFIED (0), NOT_AUTHORIZED (1), INVALID_TOKEN (2), CATEGORIES_NOT_FOUND (3), UUID_INVALID (4), ENTITY_NOT_FOUND (5).",
            "type": "string",
            "allowEmptyValue": null
        },
        "Enrichment.Financial Types": {
            "type": "object",
            "title": "Enrichment.Financial Types",
            "properties": {
                "financialInstitutionTypeCode": {
                    "description": "The financial institution's proprietary transaction type code.",
                    "type": "string",
                    "example": "075fab3ec31f43aa9d39675475c1fb1a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "type": {
                    "description": "Tink transaction type.",
                    "type": "string",
                    "enum": [
                        "UNDEFINED",
                        "CREDIT_CARD",
                        "PAYMENT",
                        "WITHDRAWAL",
                        "DEFAULT",
                        "TRANSFER"
                    ],
                    "example": "CREDIT_CARD",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Identifiers": {
            "type": "object",
            "title": "Enrichment.Identifiers",
            "properties": {
                "providerTransactionId": {
                    "description": "The transaction ID given by the transaction provider.",
                    "type": "string",
                    "example": "500015d3-acf3-48cc-9918-9e53738d3692",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.List Refinement Questions Response": {
            "description": "List of refinement questions for the transaction.",
            "type": "object",
            "title": "Enrichment.List Refinement Questions Response",
            "properties": {
                "language": {
                    "description": "Language of the refinement questions.",
                    "type": "string",
                    "example": "en",
                    "allowEmptyValue": null,
                    "position": null
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.RefinementQuestions",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "transactionId": {
                    "description": "Transaction ID.",
                    "type": "string",
                    "example": "4df3b236c81640b18741d7cdd1fc0e45",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant": {
            "type": "object",
            "title": "Enrichment.Merchant",
            "properties": {
                "id": {
                    "description": "Merchant ID.",
                    "type": "string",
                    "example": "8948045b-d163-4d03-b9ec-3d5237a4550a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "logoUri": {
                    "description": "Logo URI.",
                    "type": "string",
                    "example": "https://tink.com/tesco/logo.png",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "Merchant name.",
                    "type": "string",
                    "example": "Tesco Store 2nd Street",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information": {
            "type": "object",
            "title": "Enrichment.Merchant Information",
            "properties": {
                "merchantCategoryCode": {
                    "description": "Merchant category code (MCC), as indicated by the financial institution.",
                    "type": "string",
                    "example": 5462,
                    "allowEmptyValue": null,
                    "position": null
                },
                "merchantName": {
                    "description": "Name of merchant, as indicated by the financial institution.",
                    "type": "string",
                    "example": "Artisanal Bakery Shops",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information.Brand.Brand": {
            "description": "Response object contains the brad's name, logo and contact information",
            "type": "object",
            "title": "Enrichment.Merchant Information.Brand.Brand",
            "properties": {
                "contact": {
                    "description": "Brand contact information.",
                    "$ref": "#/definitions/Enrichment.Merchant%20Information.Brand.Brand%20Contact",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Brand ID.",
                    "type": "string",
                    "example": "02820044-69f5-4170-a516-fbeae6450f7a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "logoUri": {
                    "description": "Brand logo URI.",
                    "type": "string",
                    "example": "https://....",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "Brand name.",
                    "type": "string",
                    "example": "Tink",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information.Brand.Brand Contact": {
            "description": "Response object contains brand contact information.",
            "type": "object",
            "title": "Enrichment.Merchant Information.Brand.Brand Contact",
            "properties": {
                "website": {
                    "description": "Website location.",
                    "type": "string",
                    "example": "www.tink.se",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information.Brand.Brand Response": {
            "description": "Response object contains the brand's name, logo and contact information",
            "type": "object",
            "title": "Enrichment.Merchant Information.Brand.Brand Response",
            "properties": {
                "brand": {
                    "description": "Brand information.",
                    "$ref": "#/definitions/Enrichment.Merchant%20Information.Brand.Brand",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information.Merchant.Merchant": {
            "description": "Response object contains the merchant's name, logo, location and contact information.",
            "type": "object",
            "title": "Enrichment.Merchant Information.Merchant.Merchant",
            "properties": {
                "contact": {
                    "description": "Merchant contact information.",
                    "$ref": "#/definitions/Enrichment.Merchant%20Information.Merchant.Merchant%20Contact",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Merchant ID.",
                    "type": "string",
                    "example": "02820044-69f5-4170-a516-fbeae6450f7a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "location": {
                    "description": "Merchant location information.",
                    "$ref": "#/definitions/Enrichment.Merchant%20Information.Merchant.Merchant%20Location",
                    "allowEmptyValue": null,
                    "position": null
                },
                "logoUri": {
                    "description": "Merchant logo URI.",
                    "type": "string",
                    "example": "https://....",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "Merchant name.",
                    "type": "string",
                    "example": "Tink",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information.Merchant.Merchant Address": {
            "description": "Response object contains merchant address information.",
            "type": "object",
            "title": "Enrichment.Merchant Information.Merchant.Merchant Address",
            "properties": {
                "city": {
                    "description": "City name.",
                    "type": "string",
                    "example": "Stockholm",
                    "allowEmptyValue": null,
                    "position": null
                },
                "country": {
                    "description": "Country name.",
                    "type": "string",
                    "example": "Sweden",
                    "allowEmptyValue": null,
                    "position": null
                },
                "postalCode": {
                    "description": "Postal code.",
                    "type": "string",
                    "example": "11122",
                    "allowEmptyValue": null,
                    "position": null
                },
                "street": {
                    "description": "Street address.",
                    "type": "string",
                    "example": "Tink Street",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information.Merchant.Merchant Contact": {
            "description": "Response object contains merchant contact information.",
            "type": "object",
            "title": "Enrichment.Merchant Information.Merchant.Merchant Contact",
            "properties": {
                "phone": {
                    "description": "Phone number.",
                    "type": "string",
                    "example": "+46...",
                    "allowEmptyValue": null,
                    "position": null
                },
                "website": {
                    "description": "Website location.",
                    "type": "string",
                    "example": "www.tink.se",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information.Merchant.Merchant Location": {
            "description": "Response object contains location information",
            "type": "object",
            "title": "Enrichment.Merchant Information.Merchant.Merchant Location",
            "properties": {
                "address": {
                    "description": "Merchant address information.",
                    "$ref": "#/definitions/Enrichment.Merchant%20Information.Merchant.Merchant%20Address",
                    "allowEmptyValue": null,
                    "position": null
                },
                "coordinates": {
                    "description": "Location coordinates (latitude, longitude).",
                    "type": "string",
                    "example": "59.33282, 18.05669",
                    "allowEmptyValue": null,
                    "position": null
                },
                "googlePlacesId": {
                    "description": "A place ID is a textual identifier that uniquely identifies a place. It is used to retrieve place information on Google Maps Platform.",
                    "type": "string",
                    "example": "ChIJs5ydyTiuEmsR0fRSlU0C7k0",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Merchant Information.Merchant.Merchant Response": {
            "description": "Response object contains the merchant's name, logo, location and contact information",
            "type": "object",
            "title": "Enrichment.Merchant Information.Merchant.Merchant Response",
            "properties": {
                "merchant": {
                    "description": "Merchant information.",
                    "$ref": "#/definitions/Enrichment.Merchant%20Information.Merchant.Merchant",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Amount": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Amount",
            "properties": {
                "currencyCode": {
                    "description": "The currency used for transactions in the group.",
                    "type": "string",
                    "example": "EUR",
                    "allowEmptyValue": null,
                    "position": null
                },
                "latest": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.ExactNumber",
                    "allowEmptyValue": null,
                    "position": null
                },
                "maximum": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.ExactNumber",
                    "allowEmptyValue": null,
                    "position": null
                },
                "mean": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.ExactNumber",
                    "allowEmptyValue": null,
                    "position": null
                },
                "median": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.ExactNumber",
                    "allowEmptyValue": null,
                    "position": null
                },
                "minimum": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.ExactNumber",
                    "allowEmptyValue": null,
                    "position": null
                },
                "standardDeviation": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.ExactNumber",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Amounts": {
            "description": "The predicted amounts of the transaction.",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Amounts",
            "properties": {
                "predicted": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Currency%20Denominated%20Amount",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Currency Denominated Amount": {
            "description": "The amount of the transaction represented as a scale and an unscaled value, including an ISO-4217 currency code.",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Currency Denominated Amount",
            "properties": {
                "currencyCode": {
                    "description": "The currency code which follows ISO-4217 standard.",
                    "type": "string",
                    "example": "EUR",
                    "allowEmptyValue": null,
                    "position": null
                },
                "value": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.ExactNumber",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Day Of Month": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Day Of Month",
            "properties": {
                "maximum": {
                    "description": "The latest day of the month that the recurring transaction has occurred.",
                    "type": "integer",
                    "format": "int32",
                    "example": 5,
                    "allowEmptyValue": null,
                    "position": null
                },
                "mean": {
                    "description": "The average day of the month that the recurring transactions occur.",
                    "type": "number",
                    "format": "double",
                    "example": 5,
                    "allowEmptyValue": null,
                    "position": null
                },
                "median": {
                    "description": "The median of which day of the month that the recurring transactions occur.",
                    "type": "integer",
                    "format": "int32",
                    "example": 5,
                    "allowEmptyValue": null,
                    "position": null
                },
                "minimum": {
                    "description": "The earliest day of the month that the recurring transaction has occurred.",
                    "type": "integer",
                    "format": "int32",
                    "example": 5,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Day Of Week": {
            "description": "Optional. Statistics of which day of the week the transaction occurs. Days are represented as an integer between 1-7. Will be empty for groups with a period longer than two weeks. Mutually exclusive with DayOfMonth.",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Day Of Week",
            "properties": {
                "maximum": {
                    "description": "The latest day of the week that the recurring transaction has occurred.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "allowEmptyValue": null,
                    "position": null
                },
                "mean": {
                    "description": "The average day of the week that the recurring transactions occur.",
                    "type": "number",
                    "format": "double",
                    "example": 2,
                    "allowEmptyValue": null,
                    "position": null
                },
                "median": {
                    "description": "The median of which day of the week that the recurring transactions occur.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "allowEmptyValue": null,
                    "position": null
                },
                "minimum": {
                    "description": "The earliest day of the week that the recurring transaction has occurred.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Descriptions": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Descriptions",
            "properties": {
                "display": {
                    "description": "The formatted and prettified description of the recurring transaction.",
                    "type": "string",
                    "example": "Netflix",
                    "allowEmptyValue": null,
                    "position": null
                },
                "original": {
                    "description": "The raw (original and unprettified) description of the recurring transaction.",
                    "type": "string",
                    "example": "netflix",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Duration": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Duration",
            "properties": {
                "maximum": {
                    "description": "The longest interval between two recurring transactions in the group.",
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "allowEmptyValue": null,
                    "position": null
                },
                "mean": {
                    "description": "The average number of days between two recurring transactions in the group.",
                    "type": "number",
                    "format": "double",
                    "example": 30,
                    "allowEmptyValue": null,
                    "position": null
                },
                "minimum": {
                    "description": "The shortest interval between two recurring transactions in the group.",
                    "type": "integer",
                    "format": "int32",
                    "example": 30,
                    "allowEmptyValue": null,
                    "position": null
                },
                "standardDeviation": {
                    "description": "The population standard deviation of the days between two recurring transactions in the group.",
                    "type": "number",
                    "format": "double",
                    "example": 30,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.ExactNumber": {
            "description": "The value representation of the monetary amount.",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.ExactNumber",
            "properties": {
                "scale": {
                    "description": "The scale of the numeric value. `unscaledValue` is used with `scale` to accurately represent floating point values. The formula is `unscaledValue * (10^-scale)`. For example, if `scale` is 1 and `unscaledValue` is 1230, the end result would be 123.0.",
                    "type": "string",
                    "example": 1,
                    "allowEmptyValue": null,
                    "position": null
                },
                "unscaledValue": {
                    "description": "The unscaled numeric value. `unscaledValue` is used with `scale` to accurately represent floating point values. The formula is `unscaledValue * (10^-scale)`. For example, if `scale` is 1 and `unscaledValue` is 1230, the end result would be 123.0.",
                    "type": "string",
                    "example": 100,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.List Predicted Recurring Transactions Response": {
            "description": "Response containing a list of predicted recurring transactions",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.List Predicted Recurring Transactions Response",
            "properties": {
                "nextPageToken": {
                    "description": "An ID specifying the next page of results. If empty, it means that no more results remain.",
                    "type": "string",
                    "example": "AQ==",
                    "allowEmptyValue": null,
                    "position": null
                },
                "predictedRecurringTransactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Predicted%20Recurring%20Transaction",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.List Recurring Transactions Groups Response": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.List Recurring Transactions Groups Response",
            "properties": {
                "nextPageToken": {
                    "description": "An id specifying the next page of results. If empty, it means that no more results remain.",
                    "type": "string",
                    "example": "AQ==",
                    "allowEmptyValue": null,
                    "position": null
                },
                "recurringTransactionsGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Recurring%20Transactions%20Group",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.List Recurring Transactions Response": {
            "description": "List Recurring Transactions Response",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.List Recurring Transactions Response",
            "properties": {
                "nextPageToken": {
                    "description": "An ID specifying the next page of results. If empty, it means that no more results remain.",
                    "type": "string",
                    "example": "AQ==",
                    "allowEmptyValue": null,
                    "position": null
                },
                "recurringTransactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Recurring%20Transaction",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Occurrences": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Occurrences",
            "properties": {
                "count": {
                    "description": "The number of occurrences in the group.",
                    "type": "integer",
                    "format": "int32",
                    "example": 3,
                    "allowEmptyValue": null,
                    "position": null
                },
                "dayOfMonth": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Day%20Of%20Month",
                    "allowEmptyValue": null,
                    "position": null
                },
                "dayOfWeek": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Day%20Of%20Week",
                    "allowEmptyValue": null,
                    "position": null
                },
                "firstDate": {
                    "description": "The first date of the occurrence.",
                    "type": "string",
                    "example": "2020-07-05",
                    "allowEmptyValue": null,
                    "position": null
                },
                "latestDate": {
                    "description": "The latest date of the occurrence.",
                    "type": "string",
                    "example": "2020-09-05",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Period": {
            "description": "The periodicity of the group and periodicity statistics.",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Period",
            "properties": {
                "duration": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Duration",
                    "allowEmptyValue": null,
                    "position": null
                },
                "label": {
                    "description": "The periodicity of the group.",
                    "type": "string",
                    "enum": [
                        "WEEKLY",
                        "BI_WEEKLY",
                        "MONTHLY",
                        "BI_MONTHLY",
                        "QUARTERLY",
                        "HALF_YEARLY",
                        "YEARLY"
                    ],
                    "example": "MONTHLY",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Predicted Recurring Transaction": {
            "description": "A predicted recurring transaction",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Predicted Recurring Transaction",
            "properties": {
                "accountId": {
                    "description": "The id of the account that the predicted transaction belongs to. This id matches the account ids from the account endpoint.",
                    "type": "string",
                    "example": "c0e9225a12084bcbb7df794e786ebeaf",
                    "allowEmptyValue": null,
                    "position": null
                },
                "amount": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Amounts",
                    "allowEmptyValue": null,
                    "position": null
                },
                "date": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Transaction%20Date",
                    "allowEmptyValue": null,
                    "position": null
                },
                "description": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Descriptions",
                    "allowEmptyValue": null,
                    "position": null
                },
                "groupId": {
                    "description": "The id of the related recurring transactions group.",
                    "type": "string",
                    "example": "3bc213c6-743d-4b3b-9fb9-0a43f63e162c",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Recurring Transaction": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Recurring Transaction",
            "properties": {
                "accountId": {
                    "description": "The user's account's Tink id.",
                    "type": "string",
                    "example": "c0e9225a12084bcbb7df794e786ebeaf",
                    "allowEmptyValue": null,
                    "position": null
                },
                "amount": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Currency%20Denominated%20Amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "categoryId": {
                    "description": "The category id of the recurring transaction. This id matches category ids from the category endpoint.",
                    "type": "string",
                    "example": "075fab3ec31f43aa9d39675475c1fb1a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "date": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Transaction%20Dates",
                    "allowEmptyValue": null,
                    "position": null
                },
                "description": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Descriptions",
                    "allowEmptyValue": null,
                    "position": null
                },
                "groupId": {
                    "description": "The id of the related recurring transactions group.",
                    "type": "string",
                    "example": "3bc213c6-743d-4b3b-9fb9-0a43f63e162c",
                    "allowEmptyValue": null,
                    "position": null
                },
                "transactionId": {
                    "description": "The ID of the transaction.",
                    "type": "string",
                    "example": "1356d14958f746928233d6568ffa8828",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Recurring Transactions Group": {
            "description": "A recurring transactions group.",
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Recurring Transactions Group",
            "properties": {
                "accountIds": {
                    "description": "List of account ids that are used for payments in this group.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "example": [
                        "c0e9225a12084bcbb7df794e786ebeaf"
                    ],
                    "allowEmptyValue": null,
                    "position": null
                },
                "amount": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "categoryId": {
                    "description": "The category id of the recurring transactions group. This id matches category ids from the category endpoint.",
                    "type": "string",
                    "example": "075fab3ec31f43aa9d39675475c1fb1a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "The unique identifier of the recurring transactions group.",
                    "type": "string",
                    "example": "3bc213c6-743d-4b3b-9fb9-0a43f63e162c",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "The name of the group.",
                    "type": "string",
                    "example": "Netflix",
                    "allowEmptyValue": null,
                    "position": null
                },
                "occurrences": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Occurrences",
                    "allowEmptyValue": null,
                    "position": null
                },
                "period": {
                    "$ref": "#/definitions/Enrichment.Recurring%20Transactions.Period",
                    "allowEmptyValue": null,
                    "position": null
                },
                "status": {
                    "description": "Activity status of the group.",
                    "type": "string",
                    "enum": [
                        "UNDEFINED",
                        "ACTIVE",
                        "INACTIVE"
                    ],
                    "example": "ACTIVE",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Transaction Date": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Transaction Date",
            "properties": {
                "predicted": {
                    "description": "The ISO-8601 date that the recurring transaction is predicted to occur. Uses the format YYYY-MM-DD. Date is in UTC timezone.",
                    "type": "string",
                    "example": "2020-10-05",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Recurring Transactions.Transaction Dates": {
            "type": "object",
            "title": "Enrichment.Recurring Transactions.Transaction Dates",
            "properties": {
                "booked": {
                    "description": "The ISO-8601 date that the transaction was received by the bank. Uses the format YYYY-MM-DD. Date is in UTC timezone.",
                    "type": "string",
                    "example": "2020-05-18",
                    "allowEmptyValue": null,
                    "position": null
                },
                "value": {
                    "description": "The ISO-8601 date that the transaction will be executed. Uses the format YYYY-MM-DD. Date is in UTC timezone.",
                    "type": "string",
                    "example": "2020-05-18",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability": {
            "type": "object",
            "title": "Enrichment.Sustainability",
            "properties": {
                "co2InGrams": {
                    "description": "Co2 in grams.",
                    "type": "string",
                    "example": 1044,
                    "allowEmptyValue": null,
                    "position": null
                },
                "status": {
                    "$ref": "#/definitions/Enrichment.Enrichment%20Status",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Answer": {
            "description": "User's answer to a question.",
            "type": "object",
            "title": "Enrichment.Sustainability.Answer",
            "required": [
                "accountId",
                "answerId"
            ],
            "properties": {
                "accountId": {
                    "description": "Account ID.",
                    "type": "string",
                    "example": "3f1db1214aba46efbbc26023e7e569ee",
                    "allowEmptyValue": null,
                    "position": null
                },
                "answerId": {
                    "description": "Answer ID.",
                    "type": "string",
                    "example": "02820044-69f5-4170-a516-fbeae6450f7a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "input": {
                    "description": "Free text input. \u003cb\u003eREQUIRED\u003c/b\u003e only when answering INPUT question.",
                    "type": "string",
                    "example": "I am not a fan of meat!",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Answer Error": {
            "description": "Error description for incorrectly answered questions.",
            "type": "object",
            "title": "Enrichment.Sustainability.Answer Error",
            "properties": {
                "accountId": {
                    "description": "Account ID.",
                    "type": "string",
                    "example": "3f1db1214aba46efbbc26023e7e569ee",
                    "allowEmptyValue": null,
                    "position": null
                },
                "answerId": {
                    "description": "Answer ID.",
                    "type": "string",
                    "example": "02820044-69f5-4170-a516-fbeae6450f7a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "code": {
                    "description": "Status code of the error.",
                    "type": "string",
                    "example": "NOT_FOUND",
                    "allowEmptyValue": null,
                    "position": null
                },
                "description": {
                    "description": "Description of what caused the error.",
                    "type": "string",
                    "example": "Answer ID not found.",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Answer Response": {
            "description": "Statuses of the specific answer.",
            "type": "object",
            "title": "Enrichment.Sustainability.Answer Response",
            "properties": {
                "accountId": {
                    "description": "Account ID.",
                    "type": "string",
                    "example": "3f1db1214aba46efbbc26023e7e569ee",
                    "allowEmptyValue": null,
                    "position": null
                },
                "answerId": {
                    "description": "Answer ID.",
                    "type": "string",
                    "example": "525a075e-4dac-4bd4-80c9-5a8e3a0da126",
                    "allowEmptyValue": null,
                    "position": null
                },
                "questionId": {
                    "description": "Question ID.",
                    "type": "string",
                    "example": "db9c7050-ba76-4c76-a0b5-6de83e71eac6",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Answers Response": {
            "description": "Response containing status of all answers.",
            "type": "object",
            "title": "Enrichment.Sustainability.Answers Response",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Answer%20Error",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "requestId": {
                    "description": "Request ID that can be used for troubleshooting.",
                    "type": "string",
                    "example": "f5810cb4-f422-45d2-8f2b-2915b18b3010",
                    "allowEmptyValue": null,
                    "position": null
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Answer%20Response",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Error Response": {
            "description": "Generic error response containing information about what happened.",
            "type": "object",
            "title": "Enrichment.Sustainability.Error Response",
            "properties": {
                "detail": {
                    "description": "Error detail.",
                    "type": "string",
                    "example": "Invalid bearer token provided (has it expired?)",
                    "allowEmptyValue": null,
                    "position": null
                },
                "status": {
                    "description": "Error status.",
                    "type": "integer",
                    "format": "int32",
                    "example": 401,
                    "allowEmptyValue": null,
                    "position": null
                },
                "title": {
                    "description": "Error title.",
                    "type": "string",
                    "example": "Unauthorized",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Input": {
            "description": "Contains an description of how to input free text values.",
            "type": "object",
            "title": "Enrichment.Sustainability.Input",
            "properties": {
                "datatype": {
                    "description": "Type of the input. Example is STRING, which means that the input needs to be free text.",
                    "type": "string",
                    "enum": [
                        "STRING",
                        "INTEGER",
                        "NUMBER"
                    ],
                    "example": "STRING",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Answer ID.",
                    "type": "string",
                    "example": "858daeab-79a2-4ae7-949f-61250bc771de",
                    "allowEmptyValue": null,
                    "position": null
                },
                "validation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Validation",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Insights Response": {
            "description": "Insight content.",
            "type": "object",
            "title": "Enrichment.Sustainability.Insights Response",
            "properties": {
                "text": {
                    "description": "Insight text.",
                    "type": "string",
                    "example": "If every human on the planet followed a completely animal-free diet, food-related greenhouse gas emissions would be reduced by 49%.",
                    "allowEmptyValue": null,
                    "position": null
                },
                "title": {
                    "description": "Insight title.",
                    "type": "string",
                    "example": "What if we all became vegetarians?",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.List Profiling Questions": {
            "description": "Response object contains the list of questions for the account in question.",
            "type": "object",
            "title": "Enrichment.Sustainability.List Profiling Questions",
            "properties": {
                "accountId": {
                    "description": "Account ID to which this question belongs.",
                    "type": "string",
                    "example": "3f1db1214aba46efbbc26023e7e569ee",
                    "allowEmptyValue": null,
                    "position": null
                },
                "language": {
                    "description": "Language of the content.",
                    "type": "string",
                    "example": "en",
                    "allowEmptyValue": null,
                    "position": null
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Questions",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.List Relatable Comparisons": {
            "description": "List of relatable comparisons corresponding to the CO2 emission value.",
            "type": "object",
            "title": "Enrichment.Sustainability.List Relatable Comparisons",
            "properties": {
                "co2InGrams": {
                    "description": "CO2 emission value in grams.",
                    "type": "string",
                    "example": 42324.3,
                    "allowEmptyValue": null,
                    "position": null
                },
                "comparables": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "language": {
                    "description": "Language of the comparison.",
                    "type": "string",
                    "example": "en",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Market Average Response": {
            "description": "Annual market average CO2 footprint for the supplied market.",
            "type": "object",
            "title": "Enrichment.Sustainability.Market Average Response",
            "properties": {
                "averageCo2FootprintInGrams": {
                    "description": "CO2 emission value in grams.",
                    "type": "string",
                    "example": 42324.3,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Profiling Answers Request": {
            "description": "Contains the list of answers to chosen questions.",
            "type": "object",
            "title": "Enrichment.Sustainability.Profiling Answers Request",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Answer",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Questions": {
            "description": " Questions that can be answered.",
            "type": "object",
            "title": "Enrichment.Sustainability.Questions",
            "properties": {
                "answerId": {
                    "description": "The ID of the selected answer the end user has picked, if answered",
                    "type": "string",
                    "example": "db9c7050-ba76-4c76-a0b5-6de83e71eac6",
                    "allowEmptyValue": null,
                    "position": null
                },
                "answerText": {
                    "description": "The free text end user answer, if answered",
                    "type": "string",
                    "example": "Vegetarian",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Question ID.",
                    "type": "string",
                    "example": "db9c7050-ba76-4c76-a0b5-6de83e71eac6",
                    "allowEmptyValue": null,
                    "position": null
                },
                "input": {
                    "description": "Contains an description of how to input free text values.",
                    "$ref": "#/definitions/Enrichment.Sustainability.Input",
                    "allowEmptyValue": null,
                    "position": null
                },
                "selectable": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Selectable",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "text": {
                    "description": "Question content.",
                    "type": "string",
                    "example": "What is your diet during a normal week?",
                    "allowEmptyValue": null,
                    "position": null
                },
                "type": {
                    "description": "Specifies if the question is of type SELECTABLE or INPUT.",
                    "type": "string",
                    "enum": [
                        "SELECTABLE",
                        "INPUT"
                    ],
                    "example": "SELECTABLE",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Refinement Answer": {
            "description": "User's answer to a question.",
            "type": "object",
            "title": "Enrichment.Sustainability.Refinement Answer",
            "required": [
                "answerId",
                "transactionId"
            ],
            "properties": {
                "answerId": {
                    "description": "Answer ID.",
                    "type": "string",
                    "example": "02820044-69f5-4170-a516-fbeae6450f7a",
                    "allowEmptyValue": null,
                    "position": null
                },
                "input": {
                    "description": "Free text input. \u003cb\u003eREQUIRED\u003c/b\u003e only when answering INPUT question.",
                    "type": "string",
                    "example": "I am not a fan of meat!",
                    "allowEmptyValue": null,
                    "position": null
                },
                "transactionId": {
                    "description": "Transaction ID.",
                    "type": "string",
                    "example": "4df3b236c81640b18741d7cdd1fc0e45",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Refinement Answers Request": {
            "description": "Contains the list of answers to chosen questions.",
            "type": "object",
            "title": "Enrichment.Sustainability.Refinement Answers Request",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Refinement%20Answer",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.RefinementQuestions": {
            "description": " Questions that can be answered.",
            "type": "object",
            "title": "Enrichment.Sustainability.RefinementQuestions",
            "properties": {
                "answerId": {
                    "description": "The ID of the answer, if available",
                    "type": "string",
                    "example": "db9c7050-ba76-4c76-a0b5-6de83e71eac6",
                    "allowEmptyValue": null,
                    "position": null
                },
                "answerText": {
                    "description": "The body of the answer, if available",
                    "type": "string",
                    "example": "Vegetarian",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Question ID.",
                    "type": "string",
                    "example": "db9c7050-ba76-4c76-a0b5-6de83e71eac6",
                    "allowEmptyValue": null,
                    "position": null
                },
                "input": {
                    "description": "Contains an description of how to input free text values.",
                    "$ref": "#/definitions/Enrichment.Sustainability.Input",
                    "allowEmptyValue": null,
                    "position": null
                },
                "selectable": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Selectable",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "text": {
                    "description": "Question content.",
                    "type": "string",
                    "example": "What is your diet during a normal week?",
                    "allowEmptyValue": null,
                    "position": null
                },
                "type": {
                    "description": "Specifies if the question is of type SELECTABLE or INPUT.",
                    "type": "string",
                    "enum": [
                        "SELECTABLE",
                        "INPUT"
                    ],
                    "example": "SELECTABLE",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Selectable": {
            "description": "Selectable answers.",
            "type": "object",
            "title": "Enrichment.Sustainability.Selectable",
            "properties": {
                "id": {
                    "description": "Answer ID.",
                    "type": "string",
                    "example": "525a075e-4dac-4bd4-80c9-5a8e3a0da126",
                    "allowEmptyValue": null,
                    "position": null
                },
                "text": {
                    "description": "User readable description of the answer.",
                    "type": "string",
                    "example": "Fish based diet.",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Transaction Error": {
            "description": "Representation of the error during refinement.",
            "type": "object",
            "title": "Enrichment.Sustainability.Transaction Error",
            "properties": {
                "errorCode": {
                    "description": "Status code of the error.",
                    "type": "string",
                    "example": "NOT_FOUND",
                    "allowEmptyValue": null,
                    "position": null
                },
                "errorDescription": {
                    "description": "Description of what caused the error.",
                    "type": "string",
                    "example": "Answer ID not found.",
                    "allowEmptyValue": null,
                    "position": null
                },
                "transactionId": {
                    "description": "Transaction ID.",
                    "type": "string",
                    "example": "4df3b236c81640b18741d7cdd1fc0e45",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Transaction Result": {
            "description": "CO2 result of the transaction after refinement.",
            "type": "object",
            "title": "Enrichment.Sustainability.Transaction Result",
            "properties": {
                "co2InGrams": {
                    "description": "New CO2 value in grams after refinement.",
                    "type": "string",
                    "example": 42324.3,
                    "allowEmptyValue": null,
                    "position": null
                },
                "transactionId": {
                    "description": "Transaction ID which was refined.",
                    "type": "string",
                    "example": "4df3b236c81640b18741d7cdd1fc0e45",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Transactions Response": {
            "description": "User's answer to a question.",
            "type": "object",
            "title": "Enrichment.Sustainability.Transactions Response",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Transaction%20Error",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "requestId": {
                    "description": "Request ID that can be used for troubleshooting.",
                    "type": "string",
                    "example": "f5810cb4-f422-45d2-8f2b-2915b18b3010",
                    "allowEmptyValue": null,
                    "position": null
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Transaction%20Result",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Sustainability.Validation": {
            "description": "Validation with the type and explanation. Example: GREATER, 10.",
            "type": "object",
            "title": "Enrichment.Sustainability.Validation",
            "properties": {
                "condition": {
                    "description": "Validation condition. If the name was MAX_LENGTH, this might be 100.",
                    "type": "string",
                    "example": 100,
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "In the case the input is a STRING, the user can be asked for the input to be of a specific size.",
                    "type": "string",
                    "enum": [
                        "GREATER",
                        "LESS",
                        "MIN_LENGTH",
                        "MAX_LENGTH"
                    ],
                    "example": "MAX_LENGTH",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Enrichment.Transaction Sustainability Info": {
            "description": "Transaction sustainability information.",
            "type": "object",
            "title": "Enrichment.Transaction Sustainability Info",
            "properties": {
                "co2InGrams": {
                    "description": "CO2 emission value in grams.",
                    "type": "string",
                    "example": 42324.3,
                    "allowEmptyValue": null,
                    "position": null
                },
                "comparable": {
                    "description": "Relatable comparisons corresponding to the CO2 emission.",
                    "type": "string",
                    "example": "Equal to approximately 52 km of driving in a car.",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "Transaction ID.",
                    "type": "string",
                    "example": "4df3b236c81640b18741d7cdd1fc0e45",
                    "allowEmptyValue": null,
                    "position": null
                },
                "insight": {
                    "description": "Insight content.",
                    "$ref": "#/definitions/Enrichment.Sustainability.Insights%20Response",
                    "allowEmptyValue": null,
                    "position": null
                },
                "language": {
                    "description": "Language of the response.",
                    "type": "string",
                    "example": "en",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "ErrorResponse": {
            "type": "object",
            "required": [
                "success"
            ],
            "properties": {
                "message": {
                    "description": "Error message.",
                    "type": "string"
                },
                "success": {
                    "description": "Success indicator, always false in this case.",
                    "type": "boolean"
                }
            }
        },
        "ErrorResponseDto": {
            "type": "object",
            "title": "ErrorResponseDto",
            "required": [
                "success"
            ],
            "properties": {
                "message": {
                    "description": "Error message.",
                    "type": "string"
                },
                "success": {
                    "description": "Success indicator, always false in this case.",
                    "type": "boolean"
                }
            }
        },
        "Events v1.Webhook": {
            "description": "A webhook can be set up to listen to certain events. The webhook itself consists of the desired events to listen to and a desired URL where the information should be received. Every time an event occurs of the desired type(s), a POST request will be sent to the URL. You can read more about webhooks and the available events in our [guide](https://docs.tink.com/resources/getting-started/webhooks).",
            "type": "object",
            "required": [
                "clientId",
                "events",
                "global",
                "id",
                "secret",
                "url"
            ],
            "properties": {
                "clientId": {
                    "description": "The ID of the client that owns the webhook.",
                    "type": "string",
                    "example": "fa59c4ecc8d44904979133f4fe46616e"
                },
                "events": {
                    "description": "A list of events to register webhooks for. Read more about available events [here](https://docs.tink.com/resources/getting-started/webhooks).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "example": "[\"signable-operation:update\"]"
                },
                "global": {
                    "description": "A flag indicating if the webhook concerns all users. This feature is not generally available.",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "id": {
                    "description": "The internal Tink ID of the webhook.",
                    "type": "string",
                    "example": "6c4aceb62cd146ee99da310dfc10395d"
                },
                "secret": {
                    "description": "A secret chosen by the consumer. This secret can be used when getting the actual webhook executed back to verify it is a valid one.",
                    "type": "string",
                    "example": "67abc1e08fb64c92b450a13e0876330b"
                },
                "url": {
                    "description": "The URL that will receive the webhook. HTTPS is required.",
                    "type": "string",
                    "example": "https://www.clienturl.com/webhook"
                },
                "userId": {
                    "description": "The ID of the user for which the webhook is triggered.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                }
            }
        },
        "ExactNumber": {
            "description": "Enrichment.Value",
            "type": "object",
            "title": "ExactNumber",
            "properties": {
                "scale": {
                    "description": "The scale of the numeric value. `unscaledValue` is used with `scale` to accurately represent floating point values. The formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "string",
                    "example": 1,
                    "allowEmptyValue": null,
                    "position": null
                },
                "unscaledValue": {
                    "description": "The unscaled numeric value. `unscaledValue` is used with `scale` to accurately represent floating point values.\nThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "string",
                    "example": -170,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "example": "The value representation of the monetary amount.",
            "allowEmptyValue": null
        },
        "Field": {
            "type": "object",
            "properties": {
                "additionalInfo": {
                    "description": "A serialized JSON containing additional information that could be useful.",
                    "type": "string"
                },
                "checkbox": {
                    "description": "Display boolean value as checkbox.",
                    "type": "boolean"
                },
                "description": {
                    "description": "A short description of what the field is used for.",
                    "type": "string"
                },
                "group": {
                    "description": "Identifies which fields should be gathered in the group.",
                    "type": "string"
                },
                "helpText": {
                    "description": "Text displayed next to the input field.",
                    "type": "string"
                },
                "hint": {
                    "description": "Gray text in the input view (Similar to a placeholder).",
                    "type": "string"
                },
                "immutable": {
                    "description": "Controls whether or not the field values entered are immutable.",
                    "type": "boolean"
                },
                "masked": {
                    "description": "Controls whether or not the field should be shown masked, like a password field.",
                    "type": "boolean"
                },
                "maxLength": {
                    "description": "Integer value of the maximum accepted characters of input.",
                    "type": "integer",
                    "format": "int32"
                },
                "minLength": {
                    "description": "Integer value of the minimum accepted characters of input.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the input field.",
                    "type": "string"
                },
                "numeric": {
                    "description": "Controls whether or not the field should only accept numeric values.",
                    "type": "boolean"
                },
                "oneOf": {
                    "description": "Identifies if only one field within group should be filled.",
                    "type": "boolean"
                },
                "optional": {
                    "description": "Controls whether or not the field should be optional.",
                    "type": "boolean"
                },
                "pattern": {
                    "description": "A regex pattern that can be evaluated on the input.",
                    "type": "string"
                },
                "patternError": {
                    "description": "An error message that can be displayed if the provided pattern does not validate.",
                    "type": "string"
                },
                "selectOptions": {
                    "description": "A list of options where the user should select one.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SelectOption"
                    }
                },
                "sensitive": {
                    "description": "Controls whether or not the field should be sensitive.",
                    "type": "boolean"
                },
                "style": {
                    "description": "Information about style of 2FA screen.",
                    "type": "string"
                },
                "type": {
                    "description": "Stores information about field type.",
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Finance Management.Actionable Insight": {
            "description": "An actionable insight represent some kind of actionable event or insight derived from user data. It could for instance be that a user has low balance on one of their bank accounts where the action could be to transfer money to that account. Another example could be to encourage a user to save more money by creating a budget for a specific category. Read more about it [here](https://docs.tink.com/resources/money-manager/money-manager-api/present-your-first-actionable-insight).",
            "type": "object",
            "required": [
                "userId"
            ],
            "properties": {
                "createdTime": {
                    "description": "The epoch timestamp in milliseconds in UTC when the insight was created.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1549976786000
                },
                "data": {
                    "description": "The data that describes the basis for why this Insight was created. The content is determined by the Type. Read more about it [here](https://docs.tink.com/resources/money-manager/money-manager-api/list-of-available-insights).",
                    "$ref": "#/definitions/InsightData"
                },
                "description": {
                    "description": "The description of the insight which can be shown to the user. This field is configurable, read more about it [here](https://docs.tink.com/resources/money-manager/money-manager-api/configure-actionable-insights).",
                    "type": "string",
                    "example": "The balance on your bank account x is low. \nDo you want to transfer money to this account?"
                },
                "id": {
                    "description": "The unique identifier of the insight.",
                    "type": "string",
                    "example": "e2b746ed27c542ce846a8d693474df21"
                },
                "insightActions": {
                    "description": "A list of proposed actions that the user can take in response to the insight.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InsightProposedAction"
                    }
                },
                "title": {
                    "description": "The title of the insight which can be shown to the user. This field is configurable, read more about it [here](https://docs.tink.com/resources/money-manager/money-manager-api/configure-actionable-insights).",
                    "type": "string",
                    "example": "Your balance on bank account x is low"
                },
                "type": {
                    "description": "Conveys the meaning of the Insight. The type will also indicate the structure of the data field",
                    "type": "string",
                    "example": "ACCOUNT_BALANCE_LOW"
                },
                "userId": {
                    "description": "The unique identifier of the user that the insight belongs to.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                }
            }
        },
        "Finance Management.Amount": {
            "description": "The amount of the transaction, including currency",
            "type": "object",
            "title": "Finance Management.Amount",
            "required": [
                "currencyCode",
                "value"
            ],
            "properties": {
                "currencyCode": {
                    "description": "The ISO 4217 currency code of the amount",
                    "type": "string",
                    "example": "EUR"
                },
                "value": {
                    "$ref": "#/definitions/Finance%20Management.Amount.AmountValue"
                }
            },
            "example": {
                "currencyCode": "GBP",
                "value": {
                    "scale": "2",
                    "unscaledValue": "2000"
                }
            }
        },
        "Finance Management.Amount.AmountValue": {
            "type": "object",
            "title": "Finance Management.Amount.AmountValue",
            "required": [
                "scale",
                "unscaledValue"
            ],
            "properties": {
                "scale": {
                    "description": "The scale of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2
                },
                "unscaledValue": {
                    "description": "The unscaled value of the amount. \u003cbr/\u003eThe `unscaledValue` is used with `scale` to accurately represent floating point values. \u003cbr/\u003eThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 1050
                }
            },
            "example": {
                "currencyCode": "GBP",
                "value": {
                    "scale": "2",
                    "unscaledValue": "2000"
                }
            }
        },
        "Finance Management.Budgets": {
            "description": "A budget represents a financial target for a defined period. The\nbudget itself is identified by certain filter/criteria (such as\naccounts, categories, tags or free-text) to target expenses. Defining\nmultiple filter properties will yield an `AND` operation, and specifying\nmultiple values of a filter property will yield an OR operation.\n\nDepending on the use case a budget can either be recurring (`WEEK`,\n`MONTH` or `YEAR`) or be seen as a one-off budget (fixed `start` and `end`\ntime period). The amount of the budget will relate to the recurring\nperiod defined by the periodicity unit for recurring budgets, or the\nfixed time window for a one-off budget. A budget could for example be\nthe goal to spend at maximum 10 euros weekly on coffee.\n",
            "type": "object",
            "title": "Finance Management.Budgets",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "archived": {
                    "description": "Indicates if the budget has state archived or not.",
                    "type": "boolean",
                    "example": true,
                    "allowEmptyValue": null,
                    "position": null
                },
                "created": {
                    "description": "The creation time of the budget expressed as UTC epoch timestamp in milliseconds",
                    "type": "integer",
                    "format": "int32",
                    "example": 1552395986000,
                    "allowEmptyValue": null,
                    "position": null
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "The ID of the Budget",
                    "type": "string",
                    "example": "e2b746ed27c542ce846a8d693474df21",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "The name of the budget",
                    "type": "string",
                    "example": "Coffee budget",
                    "allowEmptyValue": null,
                    "position": null
                },
                "oneOffPeriodicity": {
                    "$ref": "#/definitions/BudgetOneOffPeriodicity",
                    "allowEmptyValue": null,
                    "position": null
                },
                "periodicityType": {
                    "description": "Tells whether the budget is recurring or one off type. Using this\nfield it's possible to see which of the field recurringPeriodicity or\noneOffPeriodicity is set.\n",
                    "type": "string",
                    "enum": [
                        "ONE_OFF",
                        "RECURRING"
                    ],
                    "allowEmptyValue": null,
                    "position": null
                },
                "recurringPeriodicity": {
                    "$ref": "#/definitions/BudgetRecurringPeriodicity",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Finance Management.CostOfLiving": {
            "description": "List of all transactions belonging to cost of living.",
            "type": "object",
            "title": "Finance Management.CostOfLiving",
            "properties": {
                "costOfLivingId": {
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "nextPageToken": {
                    "description": "Next page token to be used for pagination, use it with the next request parameter \u003ccode\u003epage_token\u003c/code\u003e to request the next page of the list.",
                    "type": "string",
                    "example": "MQ=="
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Finance%20Management.Transaction"
                    }
                }
            }
        },
        "Finance Management.List Subscriptions": {
            "description": "List of user's subscriptions.",
            "type": "object",
            "title": "Finance Management.List Subscriptions",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token to be used for pagination, use it with the next request parameter \u003ccode\u003epage_token\u003c/code\u003e to request the next page of the list.",
                    "type": "string",
                    "example": "MQ=="
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Finance%20Management.Subscriptions"
                    }
                }
            }
        },
        "Finance Management.List Transactions": {
            "description": "List of all transactions belonging to a subscription.",
            "type": "object",
            "title": "Finance Management.List Transactions",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token to be used for pagination, use it with the next request parameter \u003ccode\u003epage_token\u003c/code\u003e to request the next page of the list.",
                    "type": "string",
                    "example": "MQ=="
                },
                "subscriptionId": {
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Finance%20Management.Transaction"
                    }
                }
            }
        },
        "Finance Management.ListCostOfLiving": {
            "description": "List of user's cost of living.",
            "type": "object",
            "title": "Finance Management.ListCostOfLiving",
            "properties": {
                "costOfLiving": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Finance%20Management.CostOfLiving"
                    }
                },
                "nextPageToken": {
                    "description": "Next page token to be used for pagination, use it with the next request parameter \u003ccode\u003epage_token\u003c/code\u003e to request the next page of the list.",
                    "type": "string",
                    "example": "MQ=="
                }
            }
        },
        "Finance Management.Notification": {
            "description": "A notification represents some type of information which a user can be notified about. It could for example be to notify the user of the fact that they have spent more than usual on restaurants this month.",
            "type": "object",
            "required": [
                "date",
                "generated",
                "groupable",
                "key",
                "message",
                "sensitiveMessage",
                "sensitiveTitle",
                "status",
                "title",
                "type",
                "url"
            ],
            "properties": {
                "date": {
                    "description": "The date for which the notification was generated",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "generated": {
                    "description": "The date when the notification was generated",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "groupable": {
                    "description": "Flag indicating whether or not the notification is groupable.",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "key": {
                    "description": "The identifying key.",
                    "type": "string",
                    "example": "unusual-category-high.2016-05.18bb1f4636894f3bba8ddcd567d22fbd"
                },
                "message": {
                    "description": "The notification message.",
                    "type": "string",
                    "example": "You have spent more than usual on restaurants this month."
                },
                "sensitiveMessage": {
                    "description": "The notification message if the notification is delivered encrypted.",
                    "type": "string",
                    "example": "You had an expense charged by H\u0026M."
                },
                "sensitiveTitle": {
                    "description": "The notification title if the notification is delivered encrypted. Used on Android as title and concatenated with the message on iOS.",
                    "type": "string",
                    "example": "Expense"
                },
                "status": {
                    "description": "The notification status.",
                    "type": "string",
                    "enum": [
                        "CREATED",
                        "SENT",
                        "SENT_ENCRYPTED",
                        "RECEIVED",
                        "READ"
                    ],
                    "example": "READ"
                },
                "title": {
                    "description": "The notification title. Used on Android as title and concatenated with the message on iOS.",
                    "type": "string",
                    "example": "More than usual"
                },
                "type": {
                    "description": "The notification type",
                    "type": "string",
                    "example": "unusual-category-high"
                },
                "url": {
                    "description": "The deep-link URL",
                    "type": "string",
                    "example": "tink://transactions/953c4eda24554a61a9653a479e70fc96"
                }
            }
        },
        "Finance Management.Savings Goals Request": {
            "description": "The Savings Goal fields to update",
            "type": "object",
            "title": "Finance Management.Savings Goals Request",
            "required": [
                "account",
                "name",
                "periodicityType"
            ],
            "properties": {
                "account": {
                    "description": "The ID of the Account connected to the Savings Goal.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "categories": {
                    "description": "A set of predefined categories that applies to the Savings Goal.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "description": "A set of predefined categories that applies to the Savings Goal.",
                        "type": "string",
                        "example": "[\"wedding\",\"trip\"]"
                    },
                    "example": [
                        "wedding",
                        "trip"
                    ]
                },
                "createTime": {
                    "description": "Date and time in UTC in which the Savings Goal was created.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "example": "2020-05-14T13:30:45Z"
                },
                "description": {
                    "description": "A longer description of the Savings Goal.",
                    "type": "string",
                    "example": "The savings goal for our big wedding. Including wedding-singers."
                },
                "id": {
                    "description": "The ID of the Savings Goal.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "name": {
                    "description": "The name of the Savings Goal.",
                    "type": "string",
                    "example": "Wedding"
                },
                "oneOffPeriodicity": {
                    "$ref": "#/definitions/SavingsGoalsOneOffPeriodicity"
                },
                "periodicityType": {
                    "description": "Type of savings goals periodicity. Can be one-off or recurring.",
                    "type": "string",
                    "enum": [
                        "ONE_OFF",
                        "RECURRING"
                    ],
                    "example": "ONE_OFF"
                },
                "recurringPeriodicity": {
                    "$ref": "#/definitions/SavingsGoalsRecurringPeriodicity"
                },
                "savedAmount": {
                    "$ref": "#/definitions/Amount"
                },
                "savingsPurpose": {
                    "description": "A set of predefined savings purposes that applies to the Savings Goal.\nIf purpose is not set it will be default \"UNKNOWN\".",
                    "type": "string",
                    "enum": [
                        "INVESTMENTS",
                        "PENSION_BUFFER",
                        "SPECIFIC_PURCHASE",
                        "HOUSING",
                        "UNKNOWN"
                    ],
                    "example": "INVESTMENTS"
                },
                "tags": {
                    "description": "Custom user-tags for this Savings Goal.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "description": "Custom user-tags for this Savings Goal.",
                        "type": "string",
                        "example": "[\"icon:blue\",\"priority:10\"]"
                    },
                    "example": [
                        "icon:blue",
                        "priority:10"
                    ]
                }
            }
        },
        "Finance Management.Savings Goals Response": {
            "description": "A Savings Goal represents a financial savings target for a user.\u003cbr /\u003eThe Savings Goal itself is defined by either a target date or a target amount, or both.\u003cbr /\u003eThe Savings Goal is directly bound to \u003ccode\u003eone\u003c/code\u003e Account, which can have multiple Savings Goals connected to it. Then user can allocate to her goals by keeping track of how much funds left on the account.",
            "type": "object",
            "title": "Finance Management.Savings Goals Response",
            "required": [
                "account",
                "name"
            ],
            "properties": {
                "account": {
                    "description": "The ID of the Account connected to the Savings Goal.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "categories": {
                    "description": "A set of predefined categories that applies to the Savings Goal.",
                    "type": "array",
                    "items": {
                        "description": "A set of predefined categories that applies to the Savings Goal.",
                        "type": "string",
                        "example": "[\"wedding\",\"trip\"]"
                    },
                    "example": [
                        "wedding",
                        "trip"
                    ]
                },
                "createTime": {
                    "description": "Date and time in UTC in which the Savings Goal was created.",
                    "type": "string",
                    "readOnly": true,
                    "example": "2020-05-14T13:30:45Z"
                },
                "description": {
                    "description": "A longer description of the Savings Goal.",
                    "type": "string",
                    "example": "The savings goal for our big wedding. Including wedding-singers."
                },
                "id": {
                    "description": "The ID of the Savings Goal.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "name": {
                    "description": "The name of the Savings Goal.",
                    "type": "string",
                    "example": "Wedding"
                },
                "oneOffPeriodicity": {
                    "$ref": "#/definitions/SavingsGoalsOneOffPeriodicity"
                },
                "periodicityType": {
                    "description": "Type of savings goals periodicity. Can be one-off or recurring.",
                    "type": "string",
                    "enum": [
                        "ONE_OFF",
                        "RECURRING"
                    ],
                    "example": "ONE_OFF"
                },
                "recurringPeriodicity": {
                    "$ref": "#/definitions/SavingsGoalsRecurringPeriodicity"
                },
                "savedAmount": {
                    "$ref": "#/definitions/Amount"
                },
                "savingsPurpose": {
                    "description": "A set of predefined savings purposes that applies to the Savings Goal.",
                    "type": "string",
                    "example": "[\"Investments\",\"Housing\"]"
                },
                "status": {
                    "description": "The current status of the Savings Goal.\u003cbr /\u003e- CREATED: Savings goal is created, nothing have been allocated to it yet.\u003cbr /\u003e- IN_PROGRESS: Savings goal is in progress, at least one allocation have been done.\u003cbr /\u003e- COMPLETED: Manual action, completed/inactive savings goal, funds are still allocated but no more allocations is possible.\u003cbr /\u003e- ARCHIVED: Archived savings-goal (when setting archived all funds will be unallocated).",
                    "type": "string",
                    "enum": [
                        "CREATED",
                        "IN_PROGRESS",
                        "COMPLETED",
                        "ARCHIVED"
                    ],
                    "readOnly": true
                },
                "tags": {
                    "description": "Custom user-tags for this Savings Goal.",
                    "type": "array",
                    "items": {
                        "description": "Custom user-tags for this Savings Goal.",
                        "type": "string",
                        "example": "[\"icon:blue\",\"priority:10\"]"
                    },
                    "example": [
                        "icon:blue",
                        "priority:10"
                    ]
                }
            }
        },
        "Finance Management.Statistic": {
            "description": "Statistics contain derived data from different types of information which is available for a user. It could be based on information such as expenses, incomes or balances. As an example, statistics could be a time series of travel expenses calculated monthly for the last six months.\n",
            "type": "object",
            "title": "Finance Management.Statistic",
            "properties": {
                "description": {
                    "description": "Identifier of the data the statistic represents.",
                    "type": "string",
                    "example": "fe9e199c2ca94c12baf1f3eb4a4122de"
                },
                "payload": {
                    "description": "Secondary identifier of the data the statistic represent.",
                    "type": "string",
                    "example": "690667930d7e4f2ba0d9aa5f7d2a1941"
                },
                "period": {
                    "description": "The statistic's period, depends on its resolution. One of: year, month, quarter, week or day. Format: `2014`, `2014-02`, `2014-Q2`, `2014:45` or `2014-02-12`.\n",
                    "type": "string",
                    "example": "2014-12-15"
                },
                "resolution": {
                    "description": "Resolution for the statistics.",
                    "type": "string",
                    "enum": [
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY",
                        "MONTHLY_ADJUSTED",
                        "QUARTERLY",
                        "YEARLY"
                    ],
                    "example": "DAILY"
                },
                "type": {
                    "description": "The statistic's type.",
                    "type": "string",
                    "example": "expenses-by-category"
                },
                "userId": {
                    "description": "Resolution for the statistics. ",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "value": {
                    "description": "The value of the statistics for this type, period, and description.",
                    "type": "number",
                    "format": "double",
                    "example": -1298.5
                }
            }
        },
        "Finance Management.StatisticQuery": {
            "description": "The query object",
            "type": "object",
            "title": "Finance Management.StatisticQuery",
            "properties": {
                "accountIdIn": {
                    "description": "List of accounts that should be included when calculating statistics. Passing empty list or omitting this parameter will include all available accounts in the query. Account exclusion flags will not be checked for accounts specified this way - that is the responsibility of the caller.\n",
                    "type": "array",
                    "items": {
                        "description": "List of accounts that should be included when calculating statistics. Passing empty list or omitting this parameter will include all available accounts in the query. Account exclusion flags will not be checked for accounts specified this way - that is the responsibility of the caller.\n",
                        "type": "string",
                        "example": "[\"7eb910d23fc247d99e9d2ee103605518\",\"fc46bd02042b4cc6bac8de9951bcdd58\"]"
                    },
                    "example": [
                        "7eb910d23fc247d99e9d2ee103605518",
                        "fc46bd02042b4cc6bac8de9951bcdd58"
                    ]
                },
                "description": {
                    "description": "Identifier of the data the statistic represents, used with conjunction with `types` field. For example when `types` field is set to `expenses-by-category` this field contain a category ID.\n",
                    "type": "string",
                    "example": "fe9e199c2ca94c12baf1f3eb4a4122de"
                },
                "padResultUntilToday": {
                    "description": "Indicates if the result should be flat filled until the period of today.",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "periodGte": {
                    "description": "Date of the earliest period to be returned. ISO8601 format: `YYYY-MM-DD`. If the date is in the middle of the period specified by the resolution, it will be adjusted to the start of the period. NOTE: this is mutually exclusive with `periods` field and needs to be used in conjunction with 'periodLte'\n",
                    "type": "string",
                    "example": "2021-01-01"
                },
                "periodLte": {
                    "description": "Date of the latest period to be returned. ISO8601 format: `YYYY-MM-DD`. If the date is in the middle of the period specified by the resolution, it will be adjusted to the start of the period. NOTE: this is mutually exclusive with `periods` field and needs to be used in conjunction with 'periodGte'\n",
                    "type": "string",
                    "example": "2021-01-01"
                },
                "periods": {
                    "description": "Time periods for the statistics: year, month, quarter, week or day. Format: `2014`, `2014-02`, `2014-Q2`, `2014:45` or `2014-02-12`. NOTE: this is mutually exclusive with `periodGte` and `periodLte` query fields.\n",
                    "type": "array",
                    "items": {
                        "description": "Time periods for the statistics: year, month, quarter, week or day. Format: `2014`, `2014-02`, `2014-Q2`, `2014:45` or `2014-02-12`. NOTE: this is mutually exclusive with `periodGte` and `periodLte` query fields.\n",
                        "type": "string",
                        "example": "[\"2014-02-11\",\"2014-02-12\"]"
                    },
                    "example": [
                        "2014-02-11",
                        "2014-02-12"
                    ]
                },
                "resolution": {
                    "description": "Resolution for the statistics. Note that monthly statistics will be calculated only with the resolution that the user has in the user settings (`MONTHLY`, `MONTHLY_ADJUSTED`), and not for both.\n",
                    "type": "string",
                    "enum": [
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY",
                        "MONTHLY_ADJUSTED",
                        "QUARTERLY",
                        "YEARLY"
                    ],
                    "example": "DAILY"
                },
                "tags": {
                    "description": "Tag list that will be used as a filter for transactions.",
                    "type": "array",
                    "items": {
                        "description": "Tag list that will be used as a filter for transactions.",
                        "type": "string",
                        "example": "[\"entertainment\",\"groceries\"]"
                    },
                    "example": [
                        "entertainment",
                        "groceries"
                    ]
                },
                "types": {
                    "description": "A list of types of statistics. Default: `expenses-by-category`, `income-by-category`, `left-to-spend`, `left-to-spend-average`. Read more about statistics for type\" information.\n",
                    "type": "array",
                    "items": {
                        "description": "A list of types of statistics. Default: `expenses-by-category`, `income-by-category`, `left-to-spend`, `left-to-spend-average`. Read more about statistics for type\" information.\n",
                        "type": "string",
                        "example": "[\"expenses-by-category\"]"
                    },
                    "example": [
                        "expenses-by-category"
                    ]
                }
            }
        },
        "Finance Management.Subscriptions": {
            "description": "A high level representation of a subscription. It a summary of user's subscription.",
            "type": "object",
            "title": "Finance Management.Subscriptions",
            "properties": {
                "accountId": {
                    "description": "The ID of the account connected to the subscription.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "brand": {
                    "$ref": "#/definitions/Brand"
                },
                "categoryId": {
                    "description": "Subscription category ID.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "description": {
                    "description": "Description of the subscription",
                    "type": "string",
                    "example": "Netflix"
                },
                "startDate": {
                    "description": "Starting date of the subscription.",
                    "type": "string",
                    "example": "2024-07-01"
                },
                "subscriptionCost": {
                    "$ref": "#/definitions/Finance%20Management.Amount"
                },
                "subscriptionId": {
                    "description": "The ID of the subscription.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "totalSubscriptionSpend": {
                    "$ref": "#/definitions/Finance%20Management.Amount"
                }
            }
        },
        "Finance Management.Transaction": {
            "description": "A single transaction made.",
            "type": "object",
            "title": "Finance Management.Transaction",
            "properties": {
                "amount": {
                    "$ref": "#/definitions/Finance%20Management.Amount"
                },
                "date": {
                    "description": "The date of a transaction, ISO 8601 formatted date (yyyy-MM-dd).",
                    "type": "string",
                    "example": "2024-07-10"
                },
                "id": {
                    "description": "The ID of the transaction.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                }
            }
        },
        "FinancialInstitution": {
            "description": "[BETA] Internal identifiers from the financial institution.",
            "type": "object",
            "title": "FinancialInstitution",
            "properties": {
                "accountNumber": {
                    "description": "[BETA] Transaction counterparty account number.",
                    "type": "string",
                    "example": "SE6930000000011273547693"
                }
            }
        },
        "FinancialService": {
            "type": "object",
            "required": [
                "segment",
                "shortName"
            ],
            "properties": {
                "segment": {
                    "description": "[BETA] Indicates which segment the financial service belongs to.",
                    "type": "string",
                    "enum": [
                        "BUSINESS",
                        "PERSONAL"
                    ],
                    "readOnly": true,
                    "example": "PERSONAL"
                },
                "shortName": {
                    "description": "[BETA] Short name of the financial service.",
                    "type": "string",
                    "readOnly": true,
                    "example": "Personal Banking"
                }
            }
        },
        "FinancialServiceTemplate": {
            "type": "object",
            "title": "FinancialServiceTemplate",
            "required": [
                "deprecated",
                "schema",
                "subtype",
                "type"
            ],
            "properties": {
                "deprecated": {
                    "description": "If true it means there is a newer template version for the given type/subtype and that it should be used instead of this one.",
                    "type": "boolean"
                },
                "schema": {
                    "description": "Consent template JSON schema. Represents required parameters during creation of a chosen consent type.",
                    "type": "object",
                    "example": {
                        "$defs": {
                            "AccountType": {
                                "const": "SORT_CODE",
                                "type": "string"
                            },
                            "CurrencyDenominatedAmount": {
                                "properties": {
                                    "currency": {
                                        "description": "The currency code which follows ISO-4217 standard.",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "Maximum allowed amount.",
                                        "properties": {
                                            "scale": {
                                                "minimum": 0,
                                                "type": "integer"
                                            },
                                            "unscaledValue": {
                                                "minimum": 1,
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "scale",
                                            "unscaledValue"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "currency",
                                    "value"
                                ],
                                "type": "object"
                            }
                        },
                        "$schema": "https://json-schema.org/draft/2019-09/schema",
                        "properties": {
                            "controlParameters": {
                                "description": "Control parameters.",
                                "properties": {
                                    "periodicLimits": {
                                        "description": "List of periodic limits.",
                                        "items": {
                                            "properties": {
                                                "periodAlignment": {
                                                    "const": "MANDATE",
                                                    "description": "Period alignment.",
                                                    "type": "string"
                                                },
                                                "periodType": {
                                                    "description": "List of allowed period types for periodic limits.",
                                                    "enum": [
                                                        "DAY",
                                                        "WEEK",
                                                        "FORTNIGHT",
                                                        "MONTH",
                                                        "HALF_YEAR",
                                                        "YEAR"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "amount",
                                                "periodAlignment",
                                                "periodType"
                                            ],
                                            "type": "object"
                                        },
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "validFrom": {
                                        "description": "Time from which mandate is valid.",
                                        "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
                                        "type": "string"
                                    },
                                    "validTo": {
                                        "description": "Time to which mandate is valid.",
                                        "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "maximumIndividualAmount",
                                    "periodicLimits"
                                ],
                                "type": "object"
                            },
                            "merchantId": {
                                "description": "The merchant id for a mandate.",
                                "type": "string"
                            },
                            "remittanceInformation": {
                                "description": "Information supplied to enable the matching of an entry.",
                                "properties": {
                                    "reference": {
                                        "description": "The structured remittance information.",
                                        "maxLength": 18,
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "unstructured": {
                                        "description": "The unstructured remittance information.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "reference"
                                ],
                                "type": "object"
                            }
                        },
                        "required": [
                            "controlParameters",
                            "payeeAccount",
                            "remittanceInformation"
                        ],
                        "type": "object"
                    }
                },
                "subtype": {
                    "description": "Subtype of the financial service.",
                    "type": "string",
                    "enum": [
                        "VRP_SWEEPING",
                        "VRP_COMMERCIAL"
                    ],
                    "example": "VRP_SWEEPING"
                },
                "supportedUntil": {
                    "description": "Expected date at which this version of the template will not be supported anymore.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-12-31T23:59:59.999Z"
                },
                "type": {
                    "description": "Type of the financial service.",
                    "type": "string",
                    "enum": [
                        "MANDATE_PAYMENTS"
                    ],
                    "example": "MANDATE_PAYMENTS"
                },
                "version": {
                    "description": "Version of the template.",
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "General.Calendar": {
            "description": "API data is periodized into pre-computed and date-based buckets. Use the Calendar endpoint to get or query data from a period of time. For more information on periods for Money Manager, see the [Configure periods](https://docs.tink.com/resources/money-manager/money-manager-api/configure-periods) article.",
            "type": "object",
            "title": "General.Calendar",
            "properties": {
                "endDate": {
                    "description": "Timestamp at the end of the period",
                    "type": "integer",
                    "format": "int64",
                    "example": 1464739199000
                },
                "name": {
                    "type": "string",
                    "example": "2016-05"
                },
                "resolution": {
                    "description": "Resolution for the statistics. ",
                    "type": "string",
                    "enum": [
                        "MONTHLY",
                        "MONTHLY_ADJUSTED"
                    ],
                    "example": "MONTHLY"
                },
                "startDate": {
                    "description": "Timestamp at the start of the period",
                    "type": "integer",
                    "format": "int64",
                    "example": 1462060800000
                }
            }
        },
        "General.Category": {
            "description": "Categories are used for categorization of transactions. They are structured as a category tree, and are available as a flat list of categories with parent/child relationships using their id and parent fields. Category information is used for pre-computed statistics, making aggregated spending and income data available for all the different nodes in the category tree. However, a transaction itself, can only be assigned to a leaf category. Both the `INCOME` and `EXPENSES` categories represent users' regular income and spending, while the `TRANSFER` categories are special in the sense that they represent transfers between accounts (potentially across banks), such as regular bank transfers,credit-card payments, mortgage amortizations and other transactions that should not add to the users' actual spending.\n",
            "type": "object",
            "title": "General.Category",
            "required": [
                "code",
                "defaultChild",
                "id",
                "sortOrder",
                "type",
                "typeName"
            ],
            "properties": {
                "code": {
                    "description": "Machine readable category code.\n",
                    "type": "string",
                    "example": "expenses:food.restaurants",
                    "allowEmptyValue": null,
                    "position": null
                },
                "defaultChild": {
                    "description": "Indicates if this is the default child to be used when categorizing to a primary level category.\n",
                    "type": "boolean",
                    "example": false,
                    "allowEmptyValue": null,
                    "position": null
                },
                "id": {
                    "description": "The internal identifier of the category, referenced by e.g. a transaction.\n",
                    "type": "string",
                    "format": "uuid",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "allowEmptyValue": null,
                    "position": null
                },
                "parent": {
                    "description": "The parent internal identifier of this category, or null.\n",
                    "type": "string",
                    "format": "uuid",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "allowEmptyValue": null,
                    "position": null
                },
                "primaryName": {
                    "description": "The primary name of this category.\n",
                    "type": "string",
                    "example": "Food \u0026 Drinks",
                    "allowEmptyValue": null,
                    "position": null
                },
                "searchTerms": {
                    "description": "Used by the search engine to find transactions with this category.\n",
                    "type": "string",
                    "example": "food,lunch,snacks",
                    "allowEmptyValue": null,
                    "position": null
                },
                "secondaryName": {
                    "description": "The secondary name of this category.\n",
                    "type": "string",
                    "example": "Restaurants",
                    "allowEmptyValue": null,
                    "position": null
                },
                "sortOrder": {
                    "description": "Sort order for nicer display for the user.\n",
                    "type": "integer",
                    "format": "int32",
                    "example": 45,
                    "allowEmptyValue": null,
                    "position": null
                },
                "type": {
                    "description": "  Type of the category.\n",
                    "type": "string",
                    "enum": [
                        "INCOME",
                        "EXPENSES",
                        "TRANSFERS",
                        "UNKNOWN"
                    ],
                    "example": "EXPENSES",
                    "allowEmptyValue": null,
                    "position": null
                },
                "typeName": {
                    "description": "Type name of the category.\n",
                    "type": "string",
                    "example": "Expenses",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "General.User": {
            "description": "The user model represents a unique Tink end-user and includes properties that defines the user, user profile information and user-modifiable settings. The user information can primarily be used whenever a Tink user signs up for a 3rd party service using her Tink account, or when user-modifiable settings, such as locale or currency, are needed in order to display or calculate the correct data in the 3rd party service.",
            "type": "object",
            "required": [
                "appId",
                "created",
                "id",
                "profile"
            ],
            "properties": {
                "appId": {
                    "description": "The internal identifier of the app that the user belongs to.",
                    "type": "string",
                    "readOnly": true,
                    "example": "56a33be25eb9443fbb696f7c61eabd94"
                },
                "created": {
                    "description": "The date when the user was created.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "externalUserId": {
                    "description": "The external identifier of the user, where you can use your own ID to associate with this user. This value will be unique within your app, and is an alternative way to identify users when performing API requests, instead of the user's `id`. This can be modified by the user. Avoid using personal information (PI); we recommend using a generated alphanumeric ID.",
                    "type": "string",
                    "example": "2d3bd65493b549e1927d97a2d0683ab8"
                },
                "flags": {
                    "description": "The user-specific feature flags assigned to the user.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "example": "[\"TRANSFERS\", \"TEST_PINK_ONBOARDING\"]"
                },
                "id": {
                    "description": "The internal identifier of the user, which is a globally unique value that's generated by Tink upon user creation. This can identify users when performing API requests. See also `externalUserId`.",
                    "type": "string",
                    "readOnly": true,
                    "example": "6e68cc6287704273984567b3300c5822"
                },
                "nationalId": {
                    "description": "Detected national identification number of the end-user.",
                    "type": "string",
                    "readOnly": true,
                    "example": "198410045701"
                },
                "profile": {
                    "description": "The profile of the user. Refer to the [UserProfile model](#general/user/the-user-model/userprofile) for which fields are modifiable. To modify fields, see [Update user profile](#general/user/update-user-profile).",
                    "$ref": "#/definitions/UserProfile",
                    "readOnly": true
                },
                "username": {
                    "description": "The username of the user. This can be modified by the user. Only usable by older integrations. Otherwise, see `externalUserId` for an equivalent field.",
                    "type": "string",
                    "example": "tinker@example.com"
                }
            }
        },
        "GetAuthenticationOptionsResponse": {
            "type": "object",
            "properties": {
                "authenticationOptionsGroups": {
                    "type": "array",
                    "title": "List of authentication options groups available",
                    "items": {
                        "$ref": "#/definitions/AuthenticationOptionsGroup"
                    }
                },
                "providerName": {
                    "type": "string",
                    "title": "The provider name of the provider that has the following authentication options groups available"
                }
            },
            "example": {
                "authenticationOptionsGroups": [
                    {
                        "authenticationOptions": [
                            {
                                "default": false,
                                "displayText": "Open Mobile Bank ID app in another device.",
                                "fields": [],
                                "helpText": "Indicates the user wants to open use the Mobile Bank ID application in another device.",
                                "name": "SE_MOBILE_BANKID_OTHER_DEVICE",
                                "supportedChannels": [
                                    "SUPPORTED_CHANNEL_MOBILE",
                                    "SUPPORTED_CHANNEL_DESKTOP"
                                ]
                            },
                            {
                                "default": true,
                                "displayText": "Open Mobile Bank ID app.",
                                "fields": [
                                    {
                                        "description": "Social security number",
                                        "hint": "YYYYMMDDNNNN",
                                        "immutable": true,
                                        "maxLength": 12,
                                        "minLength": 12,
                                        "name": "username",
                                        "numeric": true,
                                        "pattern": "^(?:(?:(?:(?:19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229|(?:(?:19|20)[0-9]{2}(?:(?:(?:0[13578]|1[02])(?:[123]0|[012][1-9]|31))|(?:(?:0[469]|11)(?:[123]0|[012][1-9]))|02(?:[12]0|[012][1-8]|[01]9))))[0-9]{4}$",
                                        "patternError": "Please enter a valid social security number."
                                    }
                                ],
                                "helpText": "Indicates the user wants to use the Mobile Bank ID application in their current device.",
                                "name": "SE_MOBILE_BANKID_SAME_DEVICE",
                                "supportedChannels": [
                                    "SUPPORTED_CHANNEL_MOBILE"
                                ]
                            }
                        ],
                        "displayText": "Choose where do you want to authenticate.",
                        "helpText": "Used to specify in which device the user wants to open their Mobile Bank ID app.",
                        "name": "SE_MOBILE_BANKID_DEVICE_CHOICE"
                    }
                ],
                "providerName": "se-swedbank-ob"
            }
        },
        "GetAuthorizationResponse": {
            "type": "object",
            "title": "GetAuthorizationResponse",
            "properties": {
                "authorization": {
                    "$ref": "#/definitions/Connectivity%20v2.Authorization"
                }
            }
        },
        "GetAuthorizationsResponse": {
            "type": "object",
            "title": "GetAuthorizationsResponse",
            "properties": {
                "authorizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Connectivity%20v2.Authorization"
                    }
                },
                "nextPageToken": {
                    "description": "Base64 encoded string pointing to the next page that should be listed. All filtering parameters should be equal to this request when using this token to fetch the next page of authorizations.",
                    "type": "string",
                    "example": "ZDU0N2M0YTVkZTk3NGIxODkxMjNmZWVmYzEwNjQxZDg="
                }
            }
        },
        "GetBudgetDetailsResponse": {
            "type": "object",
            "title": "GetBudgetDetailsResponse",
            "required": [
                "averageSpentAmount",
                "totalSpentAmount"
            ],
            "properties": {
                "averageSpentAmount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "budgetPeriods": {
                    "description": "List of budget periods.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BudgetPeriod",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "budgetSpecification": {
                    "$ref": "#/definitions/Finance%20Management.Budgets",
                    "allowEmptyValue": null,
                    "position": null
                },
                "end": {
                    "description": "Last period end expressed as UTC epoch timestamp in milliseconds.",
                    "type": "integer",
                    "format": "int32",
                    "example": 1549976786000,
                    "allowEmptyValue": null,
                    "position": null
                },
                "start": {
                    "description": "First period start expressed as UTC epoch timestamp in milliseconds.",
                    "type": "integer",
                    "format": "int32",
                    "example": 1549976786000,
                    "allowEmptyValue": null,
                    "position": null
                },
                "totalSpentAmount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "GetConsentFinancialServiceParametersTemplatesResponse": {
            "type": "object",
            "title": "GetConsentFinancialServiceParametersTemplatesResponse",
            "properties": {
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FinancialServiceTemplate"
                    }
                }
            }
        },
        "GetConsentResponse": {
            "type": "object",
            "title": "GetConsentResponse",
            "properties": {
                "consent": {
                    "$ref": "#/definitions/Connectivity%20v2.Consent"
                }
            }
        },
        "GetConsentsResponse": {
            "type": "object",
            "title": "GetConsentsResponse",
            "properties": {
                "consents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Connectivity%20v2.Consent"
                    }
                },
                "nextPageToken": {
                    "description": "Base64 encoded string pointing to the next page that should be listed. All filtering parameters should be equal to this request when using this token to fetch the next page of consents.",
                    "type": "string",
                    "example": "ZDU0N2M0YTVkZTk3NGIxODkxMjNmZWVmYzEwNjQxZDg="
                }
            }
        },
        "GetProvidersWithAuthenticationOptionsResponse": {
            "type": "object",
            "properties": {
                "providerNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "IbanAccountIdentifier": {
            "type": "object",
            "required": [
                "bban",
                "iban"
            ],
            "properties": {
                "bban": {
                    "description": "BBAN represents a country-specific bank account number.",
                    "type": "string",
                    "example": "21000813610123456789"
                },
                "bic": {
                    "description": "BIC bank number. This can be inferred from the IBAN, but some banks might require it for adding a beneficiary or will display it for existing accounts owned by the user.",
                    "type": "string",
                    "example": "DABASESX"
                },
                "iban": {
                    "description": "IBAN represents an international bank account number.",
                    "type": "string",
                    "example": "SE7921000813610123456789"
                }
            }
        },
        "Identifier": {
            "description": "The identifiers that matched the query.",
            "type": "object",
            "required": [
                "market",
                "type",
                "value"
            ],
            "properties": {
                "market": {
                    "description": "The ISO 3166-1 alpha-2 market code.",
                    "type": "string",
                    "example": "SE"
                },
                "providerName": {
                    "description": "The name of the provider.",
                    "type": "string",
                    "example": "string"
                },
                "type": {
                    "description": "The type of identifier represented by the mapping.",
                    "type": "string",
                    "enum": [
                        "BLZ",
                        "BIC",
                        "SE_CLEARINGNUMBER"
                    ],
                    "example": "BLZ, BIC"
                },
                "value": {
                    "description": "The value of the identifier mapping.",
                    "type": "string",
                    "example": "27240004"
                }
            }
        },
        "Identifiers": {
            "type": "object",
            "properties": {
                "providerExternalId": {
                    "description": "External identifier given by the provider",
                    "type": "string"
                }
            }
        },
        "Identities.v1.ListIdentitiesResponse": {
            "type": "object",
            "title": "Identities.v1.ListIdentitiesResponse",
            "properties": {
                "availableIdentityData": {
                    "description": "A list of all available identity data for the user",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Data%20v1.Identity"
                    }
                }
            }
        },
        "Identities.v2.Identity": {
            "type": "object",
            "title": "Identities.v2.Identity",
            "required": [
                "providerName"
            ],
            "properties": {
                "dateOfBirth": {
                    "description": "Date of birth of the user, ISO 8601 date format (YYYY-MM-DD).",
                    "type": "string",
                    "example": "1967-02-20",
                    "allowEmptyValue": true
                },
                "financialInstitutionId": {
                    "description": "A unique identifier to group providers belonging the same financial institution.",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822",
                    "allowEmptyValue": true
                },
                "name": {
                    "description": "Full name of the user.",
                    "type": "string",
                    "example": "John Doe",
                    "allowEmptyValue": true
                },
                "providerName": {
                    "description": "The provider from where the data was collected.",
                    "type": "string",
                    "example": "se-bank-oauth"
                },
                "ssn": {
                    "description": "Social security number or national identification number of the user.",
                    "type": "string",
                    "example": "19670220-1234",
                    "allowEmptyValue": true
                }
            }
        },
        "Identities.v2.ListIdentitiesResponse": {
            "type": "object",
            "title": "Identities.v2.ListIdentitiesResponse",
            "properties": {
                "identities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Identities.v2.Identity"
                    }
                }
            }
        },
        "Identity": {
            "type": "object",
            "properties": {
                "name": {
                    "description": " Name of the party.",
                    "type": "string",
                    "example": "John Doe"
                },
                "ssn": {
                    "description": "Social security number or national identification number of the user.",
                    "type": "string",
                    "example": "19670220-1234"
                }
            }
        },
        "IdentitySummary": {
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "Addresses of the user.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AVRAddress"
                    }
                },
                "dateOfBirth": {
                    "description": "Date of birth of the user, ISO 8601 date format (YYYY-MM-DD).",
                    "type": "string",
                    "example": "1967-02-20"
                },
                "emails": {
                    "description": "Email addresses of the user.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AVREmail"
                    }
                },
                "name": {
                    "description": "Full name of the user.",
                    "type": "string",
                    "example": "John Doe"
                },
                "phoneNumbers": {
                    "description": "Phone numbers of the user.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AVRPhoneNumber"
                    }
                },
                "ssn": {
                    "description": "Social security number or national identification number of the user.",
                    "type": "string",
                    "example": "19670220-1234"
                }
            }
        },
        "ImageUrls": {
            "type": "object",
            "properties": {
                "banner": {
                    "description": "A image url for the banner.",
                    "type": "string",
                    "example": "https://cdn.tink.se/provider-images/banners/tink.png"
                },
                "icon": {
                    "description": "A image url for the icon.",
                    "type": "string",
                    "example": "https://cdn.tink.se/provider-images/tink.png"
                }
            }
        },
        "InsightActionData": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The action type. Read more about it \u003ca href=\"https://docs.tink.com/resources/money-manager/money-manager-api/list-of-available-insights#insight-action\"\u003ehere\u003c/a\u003e.",
                    "type": "string",
                    "example": "CREATE_TRANSFER"
                }
            }
        },
        "InsightData": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The insight type. Read more about it \u003ca href=\"https://docs.tink.com/resources/money-manager/money-manager-api/list-of-available-insights\"\u003ehere\u003c/a\u003e.",
                    "type": "string",
                    "example": "ACCOUNT_BALANCE_LOW"
                }
            }
        },
        "InsightProposedAction": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "The data that describes the action.The content is determined by the Type. Read more about it [here](https://docs.tink.com/resources/money-manager/money-manager-api/list-of-available-insights#insight-action).",
                    "$ref": "#/definitions/InsightActionData"
                },
                "label": {
                    "description": "The action label which can be shown to the user. This field is configurable, read more about it [here](https://docs.tink.com/resources/money-manager/money-manager-api/configure-actionable-insights).",
                    "type": "string",
                    "example": "Make transfer"
                }
            }
        },
        "Instrument": {
            "type": "object",
            "properties": {
                "averageAcquisitionPrice": {
                    "description": "An instrument can be traded multiple times and this is the average acquisition price calculated over all trades.",
                    "type": "number",
                    "format": "double",
                    "example": 53.41
                },
                "currency": {
                    "description": "The currency that the instrument is traded in.",
                    "type": "string",
                    "example": "SEK"
                },
                "id": {
                    "description": "The internal identifier of the instrument.",
                    "type": "string",
                    "format": "uuid",
                    "example": "50c3e10233ed4048bd48f3a55b5d062a"
                },
                "isin": {
                    "description": "An International Securities Identification Number (ISIN) uniquely identifies a security.",
                    "type": "string",
                    "example": "US0378331005"
                },
                "marketPlace": {
                    "description": "The market where the instrument is traded.",
                    "type": "string",
                    "example": "NASDAQ"
                },
                "marketValue": {
                    "description": "The current market value of the whole instrument. That is, not for a single share but for the entire instrument.",
                    "type": "number",
                    "format": "double",
                    "example": 22917
                },
                "name": {
                    "description": "The name of the instrument, which can be different on different markets.",
                    "type": "string",
                    "example": "Apple Inc."
                },
                "portfolioId": {
                    "description": "The internal identifier of the portfolio which the instrument belongs to.",
                    "type": "string",
                    "format": "uuid",
                    "example": "01f21bc10f2b46abb9b25fccd3dc64eb"
                },
                "price": {
                    "description": "The current market price for one share of the instrument.",
                    "type": "number",
                    "format": "double",
                    "example": 76.39
                },
                "profit": {
                    "description": "The total profit for this instrument over all trades.",
                    "type": "number",
                    "format": "double",
                    "example": 6894
                },
                "quantity": {
                    "description": "The number of underlying shares that the user owns of this instrument.",
                    "type": "number",
                    "format": "double",
                    "example": 300
                },
                "ticker": {
                    "description": "A ticker symbol is an abbreviation used to uniquely identify a stock on a particular stock market.",
                    "type": "string",
                    "example": "AAPL"
                },
                "type": {
                    "description": "The instrument type.",
                    "type": "string",
                    "enum": [
                        "FUND",
                        "STOCK",
                        "OTHER"
                    ],
                    "example": "STOCK"
                },
                "userId": {
                    "description": "The internal identifier of the user which owns the instrument.",
                    "type": "string",
                    "format": "uuid",
                    "example": "a52e9890520d4ec38cc0d4526a4cdcbe"
                }
            }
        },
        "InvalidParameter": {
            "type": "object",
            "title": "InvalidParameter",
            "properties": {
                "name": {
                    "type": "string",
                    "allowEmptyValue": null,
                    "position": null
                },
                "reason": {
                    "type": "string",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Investments.v2.AccountIdentifiers": {
            "type": "object",
            "title": "Investments.v2.AccountIdentifiers",
            "required": [
                "accountNumber"
            ],
            "properties": {
                "accountNumber": {
                    "description": "Bank account number (local to the bank in question).",
                    "type": "string"
                },
                "iban": {
                    "description": "IBAN data of the account.",
                    "$ref": "#/definitions/Investments.v2.Iban"
                }
            }
        },
        "Investments.v2.Amount": {
            "type": "object",
            "title": "Investments.v2.Amount",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "description": "Object containing amount in a currency.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                }
            }
        },
        "Investments.v2.Balances": {
            "type": "object",
            "title": "Investments.v2.Balances",
            "properties": {
                "available": {
                    "description": "Object containing available balanced of the account.",
                    "$ref": "#/definitions/Investments.v2.Amount"
                },
                "booked": {
                    "description": "Object containing booked balanced of the account.",
                    "$ref": "#/definitions/Investments.v2.Amount"
                }
            }
        },
        "Investments.v2.Dates": {
            "type": "object",
            "title": "Investments.v2.Dates",
            "required": [
                "lastRefreshed"
            ],
            "properties": {
                "lastRefreshed": {
                    "description": "Last refreshed time of this account, ISO 8601 date and time format in UTC (YYYY-MM-DDThh:mm:ssZ).",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "Investments.v2.FinancialInstrument": {
            "type": "object",
            "title": "Investments.v2.FinancialInstrument",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "expenseRatio": {
                    "description": "Expense ratio of the financial instrument, in decimal form, e.g. 0.2% is expressed as 0.002.",
                    "type": "number",
                    "example": 0.002
                },
                "expirationDate": {
                    "description": "Date when bond expires. Only returned for Bonds.",
                    "type": "string",
                    "example": "2024-03-10"
                },
                "identifiers": {
                    "description": "Object containing financial instrument identifiers.",
                    "$ref": "#/definitions/Investments.v2.FinancialInstrumentIdentifiers"
                },
                "interestRate": {
                    "description": "Interest rate of the financial instrument in decimal form, e.g. 0.3% is expressed as 0.003.",
                    "type": "number",
                    "example": 0.003
                },
                "marketIdentifierCode": {
                    "description": "Market identifier code(MIC) of the financial instrument, as per ISO 10383.",
                    "type": "string",
                    "example": "XNAS"
                },
                "name": {
                    "description": "Name of the financial instrument.",
                    "type": "string",
                    "example": "Company Inc."
                },
                "nativeIsoCurrencyCode": {
                    "description": "The ISO 4217 currency code that the financial instrument is traded in.",
                    "type": "string",
                    "example": "USD"
                },
                "tickerSymbol": {
                    "description": "Ticker symbol of the financial instrument.",
                    "type": "string",
                    "example": "MSFT"
                },
                "type": {
                    "description": "Type of the financial instrument. \u003c/br\u003eNote: Since new types can be added as the product evolves, make sure your implementation is resiliently handling any unrecognized value returned in the API response.\u003c/br\u003ePossible investment types are: \u003c/br\u003e`FUND`, `BOND`, `EQUITY`, `PENSION_PLAN`",
                    "type": "string",
                    "example": "EQUITY"
                }
            }
        },
        "Investments.v2.FinancialInstrumentIdentifiers": {
            "type": "object",
            "title": "Investments.v2.FinancialInstrumentIdentifiers",
            "properties": {
                "isin": {
                    "description": "An International Securities Identification Number (ISIN) uniquely identifies a security. Represented as per ISO 6166.",
                    "type": "string",
                    "example": "US92826C8394"
                },
                "pensionPlanIdentifier": {
                    "description": "Specific pension plan or fund in some markets.",
                    "type": "string"
                }
            }
        },
        "Investments.v2.Holding": {
            "type": "object",
            "title": "Investments.v2.Holding",
            "required": [
                "accountId",
                "financialInstrument",
                "holdingValue",
                "quantity"
            ],
            "properties": {
                "accountId": {
                    "description": "The owning account id.",
                    "type": "string",
                    "example": "014851786434422dbe5abec1bc648a5c"
                },
                "averageAcquisitionPrice": {
                    "description": "Average acquisition price of the holding.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "financialInstrument": {
                    "description": "Object describing the owned holding.",
                    "$ref": "#/definitions/Investments.v2.FinancialInstrument"
                },
                "holdingPercentageReturn": {
                    "description": "Holdings value return in percentage, expressed in decimal form, e.g. 6% is expressed as 0.06 (means we have rise of 6%)",
                    "type": "number",
                    "example": 0.06
                },
                "holdingReturn": {
                    "description": "Amount of money returned by the holding.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "holdingValue": {
                    "description": "Total value of the holding.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "quantity": {
                    "description": "Number of shares owned of the holding. Can be returned in fractions",
                    "type": "number",
                    "example": 10.38
                }
            }
        },
        "Investments.v2.HoldingValue": {
            "type": "object",
            "title": "Investments.v2.HoldingValue",
            "required": [
                "total"
            ],
            "properties": {
                "bond": {
                    "description": "Object containing the total held value of bonds.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "equity": {
                    "description": "Object containing the total held value of your equities.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "fund": {
                    "description": "Object containing the total held value of your funds.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "pensionPlan": {
                    "description": "Object containing the total held value of your pension plans.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "total": {
                    "description": "Object containing the total value of all holdings on your account. Note that if new holding types are introduced this value can change unexpectedly. Use at your own risk.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                }
            }
        },
        "Investments.v2.Iban": {
            "type": "object",
            "title": "Investments.v2.Iban",
            "required": [
                "bban",
                "iban"
            ],
            "properties": {
                "bban": {
                    "description": "BBAN represents a country-specific bank account number.",
                    "type": "string",
                    "example": 50000000050000000000
                },
                "bic": {
                    "description": "BIC bank number. This can be inferred from the IBAN, but some banks might require it for adding a beneficiary or will display it for existing accounts owned by the user",
                    "type": "string",
                    "example": "SWEDSESSXXX"
                },
                "iban": {
                    "description": "IBAN account identifier.",
                    "type": "string",
                    "example": "SE4750000000050000000002"
                }
            }
        },
        "Investments.v2.Identity": {
            "type": "object",
            "title": "Investments.v2.Identity",
            "properties": {
                "name": {
                    "type": "string"
                },
                "ssn": {
                    "type": "string"
                }
            }
        },
        "Investments.v2.InvestmentAccount": {
            "type": "object",
            "title": "Investments.v2.InvestmentAccount",
            "required": [
                "dates",
                "financialInstitutionId",
                "financialProduct",
                "holdingValue",
                "id",
                "identifiers",
                "parties"
            ],
            "properties": {
                "accountName": {
                    "description": "Account name as seen in the financial institution.",
                    "type": "string",
                    "example": "My account"
                },
                "balances": {
                    "description": "Balances of the account. Absence of balances indicates that the account has no cash depository capability.",
                    "$ref": "#/definitions/Investments.v2.Balances"
                },
                "dates": {
                    "description": "Object containing important dates for this account.",
                    "$ref": "#/definitions/Investments.v2.Dates"
                },
                "financialInstitutionId": {
                    "description": "ID of the financial institution.",
                    "type": "string",
                    "example": "1ff0f75b01f94fcd9c0760ebea7443e2"
                },
                "financialProduct": {
                    "description": "Identifies the financial product on the bank side. Uniformly defined for different banks within the same market. Different products may imply different tax schemes and other regulations.\u003c/br\u003eNote: Since new types can be added as the product evolves, make sure your implementation is resiliently handling any unrecognized value returned in the API response.\u003c/br\u003eProducts: \u003c/br\u003e`ES_INVESTMENT` Spanish investment account.\u003c/br\u003e`ES_PENSION` Spanish pension account.\u003c/br\u003e`SE_ISK` Investeringssparkonto (Swedish investment savings account).\u003c/br\u003e`SE_KF` Kapitalförsäkring (Swedish endowment insurance account).\u003c/br\u003e`SE_AF` Aktie- och fondkonto (Swedish investment fund account).\u003c/br\u003e`SE_PENSION` Swedish pension account.",
                    "type": "string",
                    "example": "ES_INVESTMENT"
                },
                "holdingValue": {
                    "description": "Object containing holding values owned by the account.",
                    "$ref": "#/definitions/Investments.v2.HoldingValue"
                },
                "id": {
                    "description": "Internal account identifier.",
                    "type": "string",
                    "example": "efad4be863db4d6f9388a6adc148ac5c"
                },
                "identifiers": {
                    "description": "Account identifiers.",
                    "$ref": "#/definitions/Investments.v2.AccountIdentifiers"
                },
                "monetaryAccountIdentifiers": {
                    "description": "If this investment account is linked to a checking account there will be identifiers of that linked account here.",
                    "$ref": "#/definitions/Investments.v2.MonetaryAccountIdentifiers"
                },
                "parties": {
                    "description": "List of parties. A party is a person or company associated with the account. An empty list will be returned when no parties are available for the account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Investments.v2.Party"
                    }
                }
            }
        },
        "Investments.v2.ListHoldingsResponse": {
            "type": "object",
            "title": "Investments.v2.ListHoldingsResponse",
            "required": [
                "holdings"
            ],
            "properties": {
                "holdings": {
                    "description": "Holdings associated with the account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Investments.v2.Holding"
                    }
                },
                "nextPageToken": {
                    "description": "Next page token to be used for pagination, use it with the next request parameter pageToken to request the next page of the list",
                    "type": "string"
                }
            }
        },
        "Investments.v2.ListInvestmentAccountsResponse": {
            "type": "object",
            "title": "Investments.v2.ListInvestmentAccountsResponse",
            "required": [
                "investmentAccounts"
            ],
            "properties": {
                "investmentAccounts": {
                    "description": "List of investment account objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Investments.v2.InvestmentAccount"
                    }
                }
            }
        },
        "Investments.v2.MonetaryAccountIdentifiers": {
            "type": "object",
            "title": "Investments.v2.MonetaryAccountIdentifiers",
            "properties": {
                "iban": {
                    "description": "IBAN data of the owning account.",
                    "$ref": "#/definitions/Investments.v2.Iban"
                }
            }
        },
        "Investments.v2.Party": {
            "type": "object",
            "title": "Investments.v2.Party",
            "required": [
                "identity",
                "role"
            ],
            "properties": {
                "identity": {
                    "description": "Object containing identity data.",
                    "$ref": "#/definitions/Investments.v2.Identity"
                },
                "role": {
                    "description": "Role of the party in question.",
                    "type": "string",
                    "enum": [
                        "HOLDER",
                        "AUTHORIZED_USER",
                        "OTHER",
                        "UNKNOWN"
                    ],
                    "example": "HOLDER"
                }
            }
        },
        "LinkTransactionsRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "The amount of the transaction part. Must be same sign as the transaction. If not specified the common disposable amount will be used.",
                    "type": "number",
                    "format": "double",
                    "example": -90
                }
            }
        },
        "LinkTransactionsResponse": {
            "type": "object",
            "required": [
                "counterpartTransaction",
                "transaction"
            ],
            "properties": {
                "counterpartTransaction": {
                    "description": "The counterpart transaction.",
                    "$ref": "#/definitions/Data%20v1.Transaction"
                },
                "transaction": {
                    "description": "The primary transaction.",
                    "$ref": "#/definitions/Data%20v1.Transaction"
                }
            }
        },
        "ListAllocationsResponse": {
            "type": "object",
            "title": "ListAllocationsResponse",
            "properties": {
                "allocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Allocation"
                    }
                },
                "nextPageToken": {
                    "description": "Next page token to be used for pagination, use it with the next request parameter \u003ccode\u003epage_token\u003c/code\u003e to request the next page of the list.",
                    "type": "string"
                }
            }
        },
        "ListBudgetSpecificationsResponse": {
            "type": "object",
            "title": "ListBudgetSpecificationsResponse",
            "properties": {
                "budgetSpecifications": {
                    "description": "List of budgets.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Finance%20Management.Budgets",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "ListBudgetTransactionsResponse": {
            "type": "object",
            "title": "ListBudgetTransactionsResponse",
            "properties": {
                "transactions": {
                    "description": "List of transactions for a budget.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BudgetTransaction",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "ListBudgetWithSummariesResponse": {
            "type": "object",
            "title": "ListBudgetWithSummariesResponse",
            "properties": {
                "budgetSummaries": {
                    "description": "List of budget with summaries",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BudgetSummary",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "ListCategoriesResponse": {
            "type": "object",
            "title": "ListCategoriesResponse",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ListIdentifiersResponse": {
            "type": "object",
            "properties": {
                "nextPageToken": {
                    "description": "The token to use to request the next page of identifiers.",
                    "type": "string"
                },
                "providerIdentifiers": {
                    "description": "The identifiers that matched the query.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Identifier"
                    }
                }
            }
        },
        "ListInsightsResponse": {
            "type": "object",
            "title": "ListInsightsResponse",
            "properties": {
                "insights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enrichment.Sustainability.Insights%20Response",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "language": {
                    "description": "Language of the insights.",
                    "type": "string",
                    "example": "en",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "ListPeriodProgressResponse": {
            "type": "object",
            "title": "ListPeriodProgressResponse",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token to be used for pagination, use it with the next request parameter \u003ccode\u003epage_token\u003c/code\u003e to request the next page of the list.",
                    "type": "string"
                },
                "periodProgresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PeriodProgress"
                    }
                }
            }
        },
        "ListProvidersAuthenticationOptionsResponse": {
            "type": "object",
            "properties": {
                "providers": {
                    "type": "array",
                    "title": "The provider name of the provider that has the following authentication options groups available",
                    "items": {
                        "$ref": "#/definitions/ProviderAuthenticationOptions"
                    }
                }
            },
            "example": {
                "providers": [
                    {
                        "authenticationOptionsGroups": [
                            {
                                "authenticationOptions": [
                                    {
                                        "default": false,
                                        "displayText": "Open Mobile Bank ID app in another device.",
                                        "fields": [],
                                        "helpText": "Indicates the user wants to open use the Mobile Bank ID application in another device.",
                                        "name": "SE_MOBILE_BANKID_OTHER_DEVICE",
                                        "supportedChannels": [
                                            "SUPPORTED_CHANNEL_MOBILE",
                                            "SUPPORTED_CHANNEL_DESKTOP"
                                        ]
                                    },
                                    {
                                        "default": true,
                                        "displayText": "Open Mobile Bank ID app.",
                                        "fields": [
                                            {
                                                "description": "Social security number",
                                                "hint": "YYYYMMDDNNNN",
                                                "immutable": true,
                                                "maxLength": 12,
                                                "minLength": 12,
                                                "name": "username",
                                                "numeric": true,
                                                "pattern": "^(?:(?:(?:(?:19|20)(?:0[48]|[2468][048]|[13579][26]))|2000)0229|(?:(?:19|20)[0-9]{2}(?:(?:(?:0[13578]|1[02])(?:[123]0|[012][1-9]|31))|(?:(?:0[469]|11)(?:[123]0|[012][1-9]))|02(?:[12]0|[012][1-8]|[01]9))))[0-9]{4}$",
                                                "patternError": "Please enter a valid social security number."
                                            }
                                        ],
                                        "helpText": "Indicates the user wants to use the Mobile Bank ID application in their current device.",
                                        "name": "SE_MOBILE_BANKID_SAME_DEVICE",
                                        "supportedChannels": [
                                            "SUPPORTED_CHANNEL_MOBILE"
                                        ]
                                    }
                                ],
                                "displayText": "Choose where do you want to authenticate.",
                                "helpText": "Used to specify in which device the user wants to open their Mobile Bank ID app.",
                                "name": "SE_MOBILE_BANKID_DEVICE_CHOICE"
                            }
                        ],
                        "providerName": "se-swedbank-ob"
                    }
                ]
            }
        },
        "ListRecommendedBudgetResponse": {
            "type": "object",
            "title": "ListRecommendedBudgetResponse",
            "properties": {
                "recommendedBudgets": {
                    "description": "List of recommended budgets.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecommendedBudget",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "ListSavingsGoalsResponse": {
            "type": "object",
            "title": "ListSavingsGoalsResponse",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token to be used for pagination, use it with the next request parameter \u003ccode\u003epage_token\u003c/code\u003e to request the next page of the list.",
                    "type": "string"
                },
                "savingsGoals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Finance%20Management.Savings%20Goals%20Response"
                    }
                }
            }
        },
        "LoanDetails": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "string",
                    "format": "uuid"
                },
                "applicants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "coApplicant": {
                    "type": "boolean"
                },
                "loanSecurity": {
                    "type": "string"
                }
            }
        },
        "LoanResponse": {
            "type": "object",
            "properties": {
                "loans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Data%20v1.Loan"
                    }
                },
                "totalLoanAmount": {
                    "type": "number",
                    "format": "double"
                },
                "weightedAverageInterestRate": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "Loans.v2.AccountDates": {
            "type": "object",
            "title": "Loans.v2.AccountDates",
            "required": [
                "lastRefreshed"
            ],
            "properties": {
                "lastRefreshed": {
                    "description": "Last refreshed time of this account, ISO 8601 date and time format in UTC (YYYY-MM-DDThh:mm:ssZ).",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "Loans.v2.Balances": {
            "type": "object",
            "title": "Loans.v2.Balances",
            "required": [
                "principal"
            ],
            "properties": {
                "initial": {
                    "description": "Initial balance of the loan with debt expressed as a negative number.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "principal": {
                    "description": "Current balance of the loan with debt expressed as a negative number.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                }
            }
        },
        "Loans.v2.Collateral": {
            "type": "object",
            "title": "Loans.v2.Collateral",
            "properties": {
                "collateral": {
                    "description": "String representing loan collateral such as an address.",
                    "type": "string",
                    "example": "New York, 123 Main Street"
                }
            }
        },
        "Loans.v2.Guarantor": {
            "type": "object",
            "title": "Loans.v2.Guarantor",
            "properties": {
                "name": {
                    "description": "Guarantor of the loan/mortgage.",
                    "type": "string",
                    "example": "Jane Doe"
                }
            }
        },
        "Loans.v2.Identity": {
            "type": "object",
            "title": "Loans.v2.Identity",
            "properties": {
                "name": {
                    "description": "Name of the party.",
                    "type": "string",
                    "example": "John Doe"
                },
                "ssn": {
                    "description": "Social security number of the user.",
                    "type": "string",
                    "example": "19670220-1234"
                }
            }
        },
        "Loans.v2.Installment": {
            "type": "object",
            "title": "Loans.v2.Installment",
            "properties": {
                "amount": {
                    "description": "The amount paid per period.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "period": {
                    "description": "Represents how often the amount is due.\u003c/br\u003eCan be any of:\u003c/br\u003e* `MONTHLY`\u003c/br\u003e* `QUARTERLY`\u003c/br\u003e * `YEARLY`",
                    "type": "string",
                    "example": "MONTHLY"
                }
            }
        },
        "Loans.v2.InterestRate": {
            "type": "object",
            "title": "Loans.v2.InterestRate",
            "required": [
                "value"
            ],
            "properties": {
                "margin": {
                    "description": "The margin applied towards a reference rate identified by the referenceIndex. Value in percent.",
                    "type": "number",
                    "example": 5
                },
                "monthsBound": {
                    "description": "Number of months that the interest rate is bound. Should be positive if present.",
                    "type": "integer",
                    "format": "int32",
                    "example": 5
                },
                "referenceIndex": {
                    "description": "Reference index of the loan.",
                    "type": "string",
                    "example": "Euribor"
                },
                "revisionDate": {
                    "description": "Revision date of the interest rate, ISO 8601 date format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2021-06-01"
                },
                "value": {
                    "description": "Interest rate in decimal form, e.g. 4.565% is expressed as 0.04565.",
                    "type": "number",
                    "example": 0.04565
                },
                "variableRate": {
                    "description": "Boolean value indicating if the interest rate in question is variable.",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "Loans.v2.ListLoanAccountsResponse": {
            "type": "object",
            "title": "Loans.v2.ListLoanAccountsResponse",
            "required": [
                "loanAccounts"
            ],
            "properties": {
                "loanAccounts": {
                    "description": "List of loan account objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Loans.v2.LoanAccount"
                    }
                }
            }
        },
        "Loans.v2.LoanAccount": {
            "type": "object",
            "title": "Loans.v2.LoanAccount",
            "required": [
                "dates",
                "financialInstitutionId",
                "id",
                "identifiers",
                "loanType",
                "parties"
            ],
            "properties": {
                "accountName": {
                    "description": "A name of the loan, as seen in the bank.",
                    "type": "string",
                    "example": "My loan"
                },
                "amountPaid": {
                    "description": "Total amount paid (amortised), as an aggregated sum of all loan parts.",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "balances": {
                    "description": "Contains the different types of account balances, as an aggregated sum of all loan parts.",
                    "$ref": "#/definitions/Loans.v2.Balances"
                },
                "collateral": {
                    "description": "Representing loan collateral such as an address.",
                    "$ref": "#/definitions/Loans.v2.Collateral"
                },
                "dates": {
                    "description": "Object containing important dates for this account object.",
                    "$ref": "#/definitions/Loans.v2.AccountDates"
                },
                "financialInstitutionId": {
                    "description": "ID of the financial institution.",
                    "type": "string",
                    "example": "1ff0f75b01f94fcd9c0760ebea7443e2"
                },
                "guarantor": {
                    "description": "Guarantor of the loan/mortgage.",
                    "$ref": "#/definitions/Loans.v2.Guarantor"
                },
                "id": {
                    "description": "Internal Tink ID of the account.",
                    "type": "string",
                    "example": "efad4be863db4d6f9388a6adc148ac5c"
                },
                "identifiers": {
                    "description": "Loan identifiers.",
                    "$ref": "#/definitions/Loans.v2.LoanIdentifiers"
                },
                "loanParts": {
                    "description": "The parts of a loan with specific fields for each part.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Loans.v2.LoanPart"
                    }
                },
                "loanType": {
                    "description": "Specifies the type of loan whenever a classification can be made.\u003c/br\u003eNote: Since new types can be added as the product evolves, make sure your implementation is resiliently handling any unrecognized value returned in the API response.\u003c/br\u003eCurrent loan types: \u003c/br\u003e* `UNDEFINED`: We are not able to classify the type of loan.\u003c/br\u003e* `MORTGAGE`: A mortgage loan.\u003c/br\u003e* `PERSONAL`: Any other type of personal loan.\u003c/br\u003e* `VEHICLE`: A loan for funding a vehicle, typically with the vehicle as collateral.\u003c/br\u003e* `STUDENT`: A student loan.\u003c/br\u003e",
                    "type": "string",
                    "example": "MORTGAGE"
                },
                "parties": {
                    "description": "List of parties.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Loans.v2.Party"
                    }
                }
            }
        },
        "Loans.v2.LoanDates": {
            "type": "object",
            "title": "Loans.v2.LoanDates",
            "properties": {
                "nextPaymentDate": {
                    "description": "Next loan payment date, ISO 8601 date format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2021-02-28"
                },
                "originationDate": {
                    "description": "Date when loan was initiated, ISO 8601 date format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2019-08-15"
                },
                "payoffExpectedDate": {
                    "description": "The date when the loan is expected to be paid off, ISO 8601 date format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2029-01-29"
                },
                "previousPaymentDate": {
                    "description": "Previous payment date, ISO 8601 date format (YYYY-MM-DD).",
                    "type": "string",
                    "format": "date",
                    "example": "2021-01-29"
                }
            }
        },
        "Loans.v2.LoanIdentifiers": {
            "type": "object",
            "title": "Loans.v2.LoanIdentifiers",
            "properties": {
                "accountNumber": {
                    "description": "Local bank identifier of the loan, typically a bank side loan number.  If this loan is split into parts this is the identifier shared amongst them.",
                    "type": "string",
                    "example": "12345678-1234"
                }
            }
        },
        "Loans.v2.LoanPart": {
            "type": "object",
            "title": "Loans.v2.LoanPart",
            "required": [
                "balances",
                "interestRate"
            ],
            "properties": {
                "amountPaid": {
                    "description": "Total amount paid (amortised).",
                    "$ref": "#/definitions/Commons.CurrencyDenominatedAmount"
                },
                "balances": {
                    "description": "Contains the different type of account balances.",
                    "$ref": "#/definitions/Loans.v2.Balances"
                },
                "dates": {
                    "description": "Loan part dates",
                    "$ref": "#/definitions/Loans.v2.LoanDates"
                },
                "installment": {
                    "description": "Payment installment information.",
                    "$ref": "#/definitions/Loans.v2.Installment"
                },
                "interestRate": {
                    "description": "Interest Rate applied to the loan or mortgage.",
                    "$ref": "#/definitions/Loans.v2.InterestRate"
                },
                "loanPartNumber": {
                    "description": "Sub identifier of a specific loan part.",
                    "type": "string"
                }
            }
        },
        "Loans.v2.Party": {
            "type": "object",
            "title": "Loans.v2.Party",
            "required": [
                "identity",
                "role"
            ],
            "properties": {
                "identity": {
                    "description": "Information pertaining to the identity of the party.",
                    "$ref": "#/definitions/Loans.v2.Identity"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "HOLDER, AUTHORIZED_USER, OTHER, UNKNOWN"
                    ],
                    "example": "HOLDER"
                }
            }
        },
        "ManualAuthenticationRequest": {
            "type": "object",
            "properties": {
                "appUri": {
                    "description": "The end user will be redirected to this URI after the authorization code has been delivered. This field is used for flows where we have third party redirects to financial institutions. There is a default value which is tink://open. It can be any type of URI (mobile deeplink, http address etc.)",
                    "type": "string",
                    "example": "https://my-customer-app.com/authentication"
                },
                "callbackUri": {
                    "description": "This URI will be used by the ASPSP to pass the authorization code. It corresponds to the redirect/callback URI in OAuth2/OpenId. This parameter is only applicable if you are a TPP.",
                    "type": "string",
                    "example": "http://my-customer-app.com/callback"
                },
                "originatingUserIp": {
                    "description": "The originating user's remote IP address of the corresponding HTTP request.\n",
                    "type": "string",
                    "example": "198.51.100.10"
                },
                "selectedAuthenticationOptions": {
                    "description": "[BETA] Specifies the selected authentication options for each available group when a provider has more than one authentication option available in any of the available groups.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/SelectedAuthenticationOption"
                    }
                }
            }
        },
        "MerchantStatus": {
            "description": "Status of the merchant.\n\n - PENDING: Merchant has not yet been verified.\n - VERIFIED: Merchant has been successfully verified.\n - DECLINED: Merchant verification has failed.",
            "type": "string",
            "default": "PENDING",
            "enum": [
                "PENDING",
                "VERIFIED",
                "DECLINED"
            ]
        },
        "NameMatching": {
            "type": "object",
            "required": [
                "matchingResult",
                "name"
            ],
            "properties": {
                "matchingResult": {
                    "description": "The matching result from user match service",
                    "type": "string",
                    "example": "EXACT_MATCH"
                },
                "name": {
                    "description": "The name matched from the financial institution",
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "NotificationQuery": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "The maximum number of notifications to return (when paging, 0 indicates no limit).",
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                },
                "offset": {
                    "description": "The number of notifications to skip (when paging).",
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                },
                "statuses": {
                    "description": "The set of notification statuses to be used as a query filter",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "SENT",
                            "SENT_ENCRYPTED",
                            "RECEIVED",
                            "READ"
                        ]
                    },
                    "example": "[\"READ\", \"SENT\"]"
                }
            }
        },
        "NotificationQueryResponse": {
            "type": "object",
            "required": [
                "count",
                "notifications"
            ],
            "properties": {
                "count": {
                    "description": "The total number of notifications",
                    "type": "integer",
                    "format": "int32",
                    "example": 45
                },
                "notifications": {
                    "description": "The filtered list of notifications",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Finance%20Management.Notification"
                    }
                }
            }
        },
        "NotificationSettings": {
            "type": "object",
            "required": [
                "balance",
                "budget",
                "doubleCharge",
                "einvoices",
                "fraud",
                "income",
                "largeExpense",
                "leftToSpend",
                "loanUpdate",
                "summaryMonthly",
                "summaryWeekly",
                "transaction",
                "unusualAccount",
                "unusualCategory"
            ],
            "properties": {
                "balance": {
                    "description": "Indicates if the user wants to receive notifications with low or high balances alerts.",
                    "type": "boolean",
                    "default": false
                },
                "budget": {
                    "description": "Indicates if the user wants to receive notifications regarding her budgets.",
                    "type": "boolean",
                    "default": false
                },
                "doubleCharge": {
                    "description": "Indicates if the user wants to receive notifications with double-charge alerts.",
                    "type": "boolean",
                    "default": false
                },
                "einvoices": {
                    "description": "Indicates if the user wants to receive notifications for e-invoices.",
                    "type": "boolean",
                    "default": false
                },
                "fraud": {
                    "description": "Indicates if the user wants to receive notifications for ID Control warnings.",
                    "type": "boolean",
                    "default": false
                },
                "income": {
                    "description": "Indicates if the user wants to receive notifications when an income is received.",
                    "type": "boolean",
                    "default": false
                },
                "largeExpense": {
                    "description": "Indicates if the user wants to receive notifications when a large expense is detected.",
                    "type": "boolean",
                    "default": false
                },
                "leftToSpend": {
                    "description": "Indicates if the user wants to receive left to spend notifications.",
                    "type": "boolean",
                    "default": false
                },
                "loanUpdate": {
                    "description": "Indicates if the user wants to receive notifications for loan updates.",
                    "type": "boolean",
                    "default": false
                },
                "summaryMonthly": {
                    "description": "Indicates if the user wants to receive notifications with monthly summaries.",
                    "type": "boolean",
                    "default": false
                },
                "summaryWeekly": {
                    "description": "Indicates if the user wants to receive notifications with weekly summaries.",
                    "type": "boolean",
                    "default": false
                },
                "transaction": {
                    "description": "Indicates if the user wants to receive notifications for every transaction.",
                    "type": "boolean",
                    "default": false
                },
                "unusualAccount": {
                    "description": "Indicates if the user wants to receive notifications when there is unusual activity on any of her accounts.",
                    "type": "boolean",
                    "default": false
                },
                "unusualCategory": {
                    "description": "Indicates if the user wants to receive notifications when she has spent more than usual on something.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "OAuth2AuthenticationTokenResponse": {
            "type": "object",
            "required": [
                "access_token",
                "expires_in",
                "scope",
                "token_type"
            ],
            "properties": {
                "access_token": {
                    "description": "Access token that can be used to access an API resource. It should be treated as opaque (no defined format).",
                    "type": "string",
                    "readOnly": true,
                    "example": "3084989d7eb94d58995217807441bdf4"
                },
                "expires_in": {
                    "description": "Seconds until access token expires.",
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "example": 7200
                },
                "id_hint": {
                    "description": "Human-readable information about the identity of user",
                    "type": "string",
                    "readOnly": true,
                    "example": "John Doe"
                },
                "scope": {
                    "description": "Scope of the access token.",
                    "type": "string",
                    "readOnly": true,
                    "example": "transactions:read,accounts:read"
                },
                "token_type": {
                    "description": "Type of authorization token returned.",
                    "type": "string",
                    "readOnly": true,
                    "example": "bearer"
                }
            }
        },
        "OAuth2AuthorizeResponse": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "description": "Authorization code which is single-use only and short-lived. It should be treated as opaque (no defined format).",
                    "type": "string",
                    "example": "c50cd6960a6f44ffb701ef60fafa7761"
                }
            }
        },
        "OAuth2WebHook": {
            "type": "object",
            "required": [
                "events",
                "secret",
                "url"
            ],
            "properties": {
                "events": {
                    "description": "A list of events to register webhooks for. Read more about available events [here](https://docs.tink.com/resources/getting-started/webhooks).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "example": "[\"signable-operation:update\"]"
                },
                "secret": {
                    "description": "A secret chosen by the consumer. This secret can be used when getting the actual webhook executed back to verify it is a valid one.",
                    "type": "string",
                    "example": "67abc1e08fb64c92b450a13e0876330b"
                },
                "url": {
                    "description": "The URL that will receive the webhook. HTTPS is required.",
                    "type": "string",
                    "example": "https://www.clienturl.com/webhook"
                }
            }
        },
        "OAuth2WebHookResponse": {
            "type": "object",
            "properties": {
                "webHooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Events%20v1.Webhook"
                    }
                }
            }
        },
        "PFMCategory": {
            "type": "object",
            "title": "PFMCategory",
            "properties": {
                "id": {
                    "description": "Tink category ID.",
                    "type": "string",
                    "example": "075fab3ec31f43aa9d39675475c1fb1a",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "Party": {
            "type": "object",
            "required": [
                "identity",
                "role"
            ],
            "properties": {
                "identity": {
                    "description": "Information pertaining to the identity of the party.",
                    "$ref": "#/definitions/Identity"
                },
                "role": {
                    "description": "The role of the party. Roles are defined as:\u003cbr/\u003e `HOLDER`: A party that is legally responsible for the money of the account.\u003cbr/\u003e `AUTHORIZED_USER`: A party that can operate the account, but it’s not legally the owner or responsible of the money of the account.\u003cbr/\u003e `OTHER`: A party linked to the account that have a role that does not match any of the other documented roles, i.e a party with a role that is not an authorized user or a holder.\u003cbr/\u003e `UNKNOWN`: Tink can not determine anything about the role. except that the party is associated with the specified account.",
                    "type": "string",
                    "enum": [
                        "HOLDER",
                        "AUTHORIZED_USER",
                        "OTHER",
                        "UNKNOWN"
                    ],
                    "example": "HOLDER"
                }
            }
        },
        "Payment.Mandate Payment.CurrencyExactAmount": {
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The currency code which follows ISO-4217 standard, and matches the currency code on the mandate.",
                    "type": "string",
                    "example": "GBP"
                },
                "value": {
                    "$ref": "#/definitions/Payment.Mandate%20Payment.ExactAmount"
                }
            }
        },
        "Payment.Mandate Payment.ExactAmount": {
            "description": "The value representation of the monetary amount.",
            "type": "object",
            "properties": {
                "scale": {
                    "description": "The scale of the numeric value. `unscaledValue` is used with `scale` to accurately represent floating point values. The formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 2
                },
                "unscaledValue": {
                    "description": "The unscaled numeric value. `unscaledValue` is used with `scale` to accurately represent floating point values. The formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 100
                }
            }
        },
        "Payment.Mandate Payment.PayeeAccount": {
            "description": "The payee account for the mandate payment.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the account, as assigned by the account servicing institution.",
                    "type": "string",
                    "example": "Tom John Savings Account"
                },
                "number": {
                    "description": "Number assigned by an institution to identify an account. This identifier is known by the account owner",
                    "type": "string",
                    "example": "10000031510604"
                },
                "type": {
                    "description": "The identification scheme for the account, in a coded form.",
                    "type": "string",
                    "enum": [
                        "SORT_CODE"
                    ],
                    "example": "SORT_CODE"
                }
            }
        },
        "Payment.Mandate Payment.PayerAccount": {
            "description": "The payer account of the mandate payment.",
            "type": "object",
            "properties": {
                "holderName": {
                    "description": "The name of the account owner.",
                    "type": "string",
                    "example": "Tom John"
                },
                "number": {
                    "description": "Number assigned by an institution to identify an account. This identifier is known by the account owner.",
                    "type": "string",
                    "example": "10000031510604"
                },
                "type": {
                    "description": "The identification scheme for the account, in a coded form.",
                    "type": "string",
                    "enum": [
                        "SORT_CODE"
                    ],
                    "example": "SORT_CODE"
                }
            }
        },
        "Payment.Mandate Payment.RemittanceInformation": {
            "description": "The structured remittance information for the mandate payment. This value will be populated to end-to-end identification at the bank.",
            "type": "object",
            "properties": {
                "type": {
                    "description": "The remittance information type for the mandate payment. REFERENCE will be populated to end-to-end identification at the bank.",
                    "type": "string",
                    "enum": [
                        "REFERENCE"
                    ],
                    "example": "REFERENCE"
                },
                "value": {
                    "description": "The structured remittance information for the mandate payment, maximum 31 characters.",
                    "type": "string",
                    "example": "Payment description."
                }
            }
        },
        "Payment.Mandate Payment.Request": {
            "description": "Parameters for the mandate payment to be created.",
            "type": "object",
            "required": [
                "amount",
                "consentId",
                "remittanceInformation"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/Payment.Mandate%20Payment.CurrencyExactAmount"
                },
                "consentId": {
                    "description": "The id, in uuid v4 format, of the consent which will be used for initiating the mandate payment",
                    "type": "string",
                    "example": "c63dc11e-b210-4a96-9461-2061389789e7"
                },
                "merchantId": {
                    "description": "The id, in uuid v4 format, of the merchant who is requesting the mandate payment to be initiated.",
                    "type": "string",
                    "example": "9a1e5197-33ad-4f17-8338-0861a69ed1d0"
                },
                "remittanceInformation": {
                    "$ref": "#/definitions/Payment.Mandate%20Payment.RemittanceInformation"
                }
            }
        },
        "Payment.Mandate Payment.Response": {
            "description": "The response from creating or fetching a mandate payment. ",
            "type": "object",
            "required": [
                "amount",
                "consentId",
                "createdTime",
                "id",
                "payeeAccount",
                "payerAccount",
                "remittanceInformation",
                "status",
                "type",
                "updatedTime"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/Payment.Mandate%20Payment.CurrencyExactAmount"
                },
                "consentId": {
                    "description": "The consent id, in uuid v4 format, used for creating a mandate payment.",
                    "type": "string",
                    "example": "c63dc11e-b210-4a96-9461-2061389789e7"
                },
                "createdTime": {
                    "description": "The timestamp at which the mandate payment was created, ISO 8601 date and time format in UTC (YYYY-MM-DDThh:mm:ssZ).",
                    "type": "string",
                    "example": "2022-10-12T09:35:39Z"
                },
                "id": {
                    "description": "The id, in uuid v4 format, of the mandate payment.",
                    "type": "string",
                    "example": "b6704301-8a12-46a5-a315-c3cebd9b899c"
                },
                "merchantId": {
                    "description": "The merchant id, in uuid v4 format, for the mandate payment.",
                    "type": "string",
                    "example": "9a1e5197-33ad-4f17-8338-0861a69ed1d0"
                },
                "payeeAccount": {
                    "$ref": "#/definitions/Payment.Mandate%20Payment.PayeeAccount"
                },
                "payerAccount": {
                    "$ref": "#/definitions/Payment.Mandate%20Payment.PayerAccount"
                },
                "remittanceInformation": {
                    "$ref": "#/definitions/Payment.Mandate%20Payment.RemittanceInformation"
                },
                "status": {
                    "description": "The status of the mandate payment.",
                    "type": "string",
                    "enum": [
                        "CREATED, SENT, FAILED, CANCELLED, SETTLED_PAYEE, SETTLED_PAYER"
                    ],
                    "example": "CREATED"
                },
                "statusMessage": {
                    "description": "A message explaining the current status of the payment. This field is populated only if status is one of the terminal statuses.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the mandate payment. Defined by the sub-type used in the creation of your mandate.",
                    "type": "string",
                    "enum": [
                        "VRP_SWEEPING, VRP_COMMERCIAL"
                    ],
                    "example": "VRP_SWEEPING"
                },
                "updatedTime": {
                    "description": "The timestamp at which the mandate payment was updated, ISO 8601 date and time format in UTC (YYYY-MM-DDThh:mm:ssZ).",
                    "type": "string",
                    "example": "2022-10-12T09:35:39Z"
                }
            }
        },
        "Payment.Payment Request": {
            "description": "The payment request model represents a request for receiving payments with the recipient's payment information. Please note that it can not be used to make payments.",
            "type": "object",
            "title": "Payment.Payment Request",
            "required": [
                "amount",
                "currency",
                "market",
                "recipientName",
                "recipient",
                "remittanceInformation"
            ],
            "properties": {
                "amount": {
                    "description": "The payment amount. Decimal digits supported as per IS0 4217.",
                    "type": "number",
                    "maximum": 999999999,
                    "minimum": 0.01,
                    "example": 10
                },
                "currency": {
                    "description": "The currency code of the payment amount (in ISO 4217 format).",
                    "type": "string",
                    "example": "GBP"
                },
                "destinations": {
                    "description": "A list of account numbers that can receive the payment. If one of the accounts belong to the same bank as the source account, it will be selected. Otherwise the first one from the list will be selected.  It has been deprecated in favor of `recipient`, which contains `accountNumber` and `accountType`.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentDestinationDTO"
                    },
                    "example": [
                        {
                            "accountNumber": "31245678901234",
                            "type": "sort-code"
                        }
                    ]
                },
                "executionDate": {
                    "description": "The date defining when the payment will be executed by the bank. If no execution date is given, it will be executed as soon as possible. The date follows the ISO 8601 with format yyyy-MM-dd. Note: This feature is currently only available on the Swedish market.",
                    "type": "string",
                    "pattern": "|^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$",
                    "example": "2023-11-20"
                },
                "market": {
                    "description": "The country code (in ISO 3166-1 alpha-2 format) of the primary market of the payer.",
                    "type": "string",
                    "enum": [
                        "AT",
                        "DE",
                        "DK",
                        "EE",
                        "ES",
                        "FI",
                        "FR",
                        "GB",
                        "IT",
                        "LT",
                        "LV",
                        "NL",
                        "NO",
                        "PT",
                        "SE"
                    ],
                    "example": "GB"
                },
                "merchantId": {
                    "description": "Id of the merchant to affiliate with this payment request.",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                    "example": "c7f2de71-ad83-4eb7-b7df-5ed6445cb2af"
                },
                "metadata": {
                    "description": "A key-value dictionary with custom metadata for the payment request. All keys and values must be strings. For privacy protection, it is not allowed to use this dictionary for storing personal data (e.g. names and addresses).",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "custom key": "custom value",
                        "merchantReference": "17172137"
                    }
                },
                "paymentScheme": {
                    "description": "The desired payment scheme that the ASPSP supports. Default value is SEPA_CREDIT_TRANSFER for markets which support SEPA payments. This field is mandatory for the GB market. If you select an instant payments scheme and, later in the flow, a bank that doesn't support instant payments, the scheme automatically changes to the regular credit transfer. For example, if you select the instant payments scheme SEPA_INSTANT_CREDIT_TRANSFER and a bank that doesn't support instant payments, the scheme automatically changes to SEPA_CREDIT_TRANSFER.",
                    "type": "string",
                    "enum": [
                        "FASTER_PAYMENTS",
                        "INSTANT_NORWEGIAN_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                        "MULTIBANCO_SERVICE",
                        "NORWEGIAN_DOMESTIC_CREDIT_TRANSFER",
                        "SEPA_CREDIT_TRANSFER",
                        "SEPA_INSTANT_CREDIT_TRANSFER",
                        "SWISS_DOMESTIC_CREDIT_TRANSFER",
                        "DANISH_DOMESTIC_CREDIT_TRANSFER",
                        "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                        "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_INTRADAG"
                    ],
                    "example": "FASTER_PAYMENTS"
                },
                "recipient": {
                    "description": "Information about recipient receiving the payment including account data, business identifier code and address. This information might be needed to make a cross-border payment.",
                    "$ref": "#/definitions/RecipientDTO",
                    "example": {
                        "accountNumber": "31245678901234",
                        "accountType": "sort-code",
                        "businessIdentifierCode": "BOFAUS3NXXX"
                    }
                },
                "recipientName": {
                    "description": "The recipient name shown to the payer on signing payments. Maximum character count of 30. Special characters such as á, ã or ç can be used.",
                    "type": "string",
                    "pattern": "[^\\u0000]*",
                    "example": "Test AB"
                },
                "remittanceInformation": {
                    "description": "The structured or unstructured remittance information for the payment request. Use for reconciliation purposes.",
                    "$ref": "#/definitions/RemittanceInformationDTO",
                    "example": {
                        "type": "REFERENCE",
                        "value": "CREDITOR-REF-12345"
                    }
                },
                "sender": {
                    "description": "Sender pinned to this payment. If enabled, only this particular person will be able to initiate this payment.",
                    "$ref": "#/definitions/PinnedSenderDTO",
                    "example": {
                        "accountNumber": "33008808080808",
                        "accountType": "se",
                        "firstName": "John",
                        "lastName": "Smith,"
                    }
                },
                "sourceMessage": {
                    "description": "The transaction description that only appears on the payer (debtor) account for the payment. Use for providing a short description about the payment transaction for the payer. Supported only in Sweden (SE). Maximum character count of 50 (Note that some banks might have a more strict limit).",
                    "type": "string",
                    "pattern": "[^\\u0000]*",
                    "example": "Gym Equipment"
                }
            }
        },
        "PaymentConditionsResponse": {
            "type": "object",
            "required": [
                "conditions",
                "providerId"
            ],
            "properties": {
                "conditions": {
                    "description": "List of payment conditions for the provider",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Condition"
                    },
                    "example": {
                        "operator": "ONE_OF",
                        "rule": "REMITTANCE_INFORMATION_TYPE",
                        "value": [
                            "OCR",
                            "UNSTRUCTURED"
                        ]
                    }
                },
                "providerId": {
                    "description": "The provider id connected to the payment condition",
                    "type": "string",
                    "example": "nordea-bankid"
                },
                "recurringPaymentConditions": {
                    "description": "List of recurring payment conditions for the provider",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecurringPaymentCondition"
                    },
                    "example": {
                        "operator": "ONE_OF",
                        "rule": "RECURRING_PAYMENT_ALLOWED_FREQUENCY",
                        "value": [
                            "WEEKLY",
                            "MONTHLY"
                        ]
                    }
                }
            }
        },
        "PaymentDestinationDTO": {
            "type": "object",
            "title": "PaymentDestinationDTO",
            "required": [
                "accountNumber",
                "type"
            ],
            "properties": {
                "accountNumber": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "PaymentRequestPaymentStatusType": {
            "description": " - PAYMENT_STATUS_TYPE_UNSPECIFIED: Status unspecified.\n - CREATED: Payment created.\n - EXECUTING: Payment execution started.\n - AWAITING_CREDENTIALS: Payment is awaiting credentials.\n - SENT: Payment has been sent to the bank.\n - CANCELLED: Payment has been cancelled.\n - FAILED: Payment has failed.",
            "type": "string",
            "default": "PAYMENT_STATUS_TYPE_UNSPECIFIED",
            "enum": [
                "PAYMENT_STATUS_TYPE_UNSPECIFIED",
                "CREATED",
                "EXECUTING",
                "AWAITING_CREDENTIALS",
                "SENT",
                "CANCELLED",
                "FAILED"
            ]
        },
        "PaymentSourceDTO": {
            "type": "object",
            "title": "PaymentSourceDTO",
            "properties": {
                "accountNumber": {
                    "description": "The payer’s account number.",
                    "type": "string"
                },
                "payerName": {
                    "description": "Name of the party who owns the account from which the payment is initiated.",
                    "type": "string"
                },
                "type": {
                    "description": "The payer’s account type.",
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "PayoutAccountFrequency": {
            "description": "Payout frequency.\n\n - FREQUENCY_UNSPECIFIED: Default unspecified frequency. Will result in no scheduled payouts.\n - DAILY: Daily will result in payouts every day.\n - WEEKLY: Weekly will result in payouts every Monday.\n - MONTHLY: Monthly will result in payouts the first day of the month.",
            "type": "string",
            "default": "FREQUENCY_UNSPECIFIED",
            "enum": [
                "FREQUENCY_UNSPECIFIED",
                "DAILY",
                "WEEKLY",
                "MONTHLY"
            ]
        },
        "PeriodProgress": {
            "type": "object",
            "title": "PeriodProgress",
            "properties": {
                "amountSavedThisPeriod": {
                    "$ref": "#/definitions/Amount"
                },
                "periodEndDate": {
                    "description": "The end date of the period, ISO 8601 formatted date (yyyy-MM-dd).",
                    "type": "string",
                    "example": "2020-02-25"
                },
                "periodStartDate": {
                    "description": "The start date of the period, ISO 8601 formatted date (yyyy-MM-dd).",
                    "type": "string",
                    "example": "2020-01-25"
                },
                "reachedAmountForSavingsGoalThisPeriod": {
                    "$ref": "#/definitions/Amount"
                }
            }
        },
        "Pfm": {
            "type": "object",
            "title": "Pfm",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Tink category ID.",
                    "type": "string",
                    "example": "075fab3ec31f43aa9d39675475c1fb1a",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "PinnedSenderDTO": {
            "type": "object",
            "title": "PinnedSenderDTO",
            "properties": {
                "accountNumber": {
                    "description": "This parameter must be provided together with the `accountType` parameter.",
                    "type": "string"
                },
                "accountType": {
                    "description": "This parameter must be provided together with the `accountNumber` parameter.",
                    "type": "string"
                },
                "firstName": {
                    "description": "Maximum character count of 30. Special characters such as á, ã or ç can be used.",
                    "type": "string"
                },
                "lastName": {
                    "description": "Maximum character count of 30. Special characters such as á, ã or ç can be used.",
                    "type": "string"
                }
            }
        },
        "Portfolio": {
            "type": "object",
            "properties": {
                "accountId": {
                    "description": "The internal identifier of the account which has the portfolio.",
                    "type": "string",
                    "format": "uuid",
                    "example": "1d764c9f9141434aa23485c03561428d"
                },
                "cashValue": {
                    "description": "The funds, on this portfolio, available for purchasing instruments, or to be transferred away.",
                    "type": "number",
                    "format": "double",
                    "example": 123.5
                },
                "id": {
                    "description": "The internal identifier of the portfolio.",
                    "type": "string",
                    "format": "uuid",
                    "example": "4c72494cc67f472f9f0ec2072600fe93"
                },
                "instruments": {
                    "description": "The instruments which this portfolio holds.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Instrument"
                    }
                },
                "totalProfit": {
                    "description": "The total profit of the entire portfolio. This includes both historical (real) profit, and current (potential) profit.",
                    "type": "number",
                    "format": "double",
                    "example": 48673.11
                },
                "totalValue": {
                    "description": "The total current value of the entire portfolio and all its underlying instruments.",
                    "type": "number",
                    "format": "double",
                    "example": 231924.16
                },
                "type": {
                    "description": "The type of the portfolio.",
                    "type": "string",
                    "enum": [
                        "ISK",
                        "KF",
                        "DEPOT",
                        "PENSION",
                        "OTHER"
                    ],
                    "example": "DEPOT"
                },
                "userId": {
                    "description": "The internal identifier of the user which owns the portfolio.",
                    "type": "string",
                    "format": "uuid",
                    "example": "a52e9890520d4ec38cc0d4526a4cdcbe"
                }
            }
        },
        "PreconditionViolation": {
            "description": "An array of objects representing precondition violations",
            "type": "object",
            "title": "PreconditionViolation",
            "properties": {
                "subject": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "example": [
                {
                    "subject": "users/ada18bd3b43e41c098f9fe63cb254ece",
                    "type": "USER_NOT_FOUND"
                }
            ]
        },
        "ProviderAuthenticationOptions": {
            "type": "object",
            "properties": {
                "authenticationOptionsGroups": {
                    "type": "array",
                    "title": "List of authentication options groups available",
                    "items": {
                        "$ref": "#/definitions/AuthenticationOptionsGroup"
                    }
                },
                "providerName": {
                    "type": "string",
                    "title": "The provider name of the provider that has the following authentication options groups available"
                }
            }
        },
        "ProviderConsentExtendRequest": {
            "type": "object",
            "required": [
                "credentialsId"
            ],
            "properties": {
                "credentialsId": {
                    "description": "The provider consent credentialsId to extend",
                    "type": "string",
                    "example": "6e68cc6287704273984567b3300c5822"
                }
            }
        },
        "ProviderConsentListResponse": {
            "type": "object",
            "properties": {
                "providerConsents": {
                    "description": "A list of provider consents",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Connectivity%20v1.Provider%20Consent"
                    }
                }
            }
        },
        "ProviderMarketListResponse": {
            "type": "object",
            "properties": {
                "markets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ProviderUserData": {
            "type": "object",
            "required": [
                "accounts",
                "financialInstitutionName",
                "identity",
                "providerName",
                "updated"
            ],
            "properties": {
                "accounts": {
                    "description": "Information pertaining to the accounts of the user.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccountSummary"
                    }
                },
                "financialInstitutionName": {
                    "description": "The name of the financial institution.",
                    "type": "string",
                    "example": "Bank Name"
                },
                "identity": {
                    "description": "Identity information of the user authenticating.",
                    "$ref": "#/definitions/IdentitySummary"
                },
                "providerName": {
                    "description": "The Tink name representing the financial institution",
                    "type": "string",
                    "example": "se-bank-oauth"
                },
                "updated": {
                    "description": "The timestamp of when the report data was collected.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1455740124123
                }
            }
        },
        "ReAllocateRequest": {
            "description": "The reallocation to make",
            "type": "object",
            "title": "ReAllocateRequest",
            "properties": {
                "amount": {
                    "$ref": "#/definitions/Amount"
                },
                "destinationSavingsGoalId": {
                    "description": "The destination Savings Goal ID to allocate money to.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "sourceSavingsGoalId": {
                    "description": "The source Savings Goal ID to allocate money from.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                }
            }
        },
        "RecipientDTO": {
            "type": "object",
            "title": "RecipientDTO",
            "required": [
                "accountNumber",
                "accountType"
            ],
            "properties": {
                "accountNumber": {
                    "type": "string"
                },
                "accountType": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/AddressDTO"
                },
                "businessIdentifierCode": {
                    "type": "string"
                }
            }
        },
        "RecommendedBudget": {
            "description": "List of recommended budgets.",
            "type": "object",
            "title": "RecommendedBudget",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "The name of the recommended Budget.",
                    "type": "string",
                    "example": "Coffee budget",
                    "allowEmptyValue": null,
                    "position": null
                },
                "recurringPeriodicity": {
                    "$ref": "#/definitions/BudgetRecurringPeriodicity",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "RecurringPaymentCondition": {
            "type": "object",
            "required": [
                "operator",
                "rule",
                "value"
            ],
            "properties": {
                "operator": {
                    "description": "The operator specifies how the evaluation should be performed.",
                    "type": "string",
                    "example": "EQUALS"
                },
                "rule": {
                    "description": "The rule provides the contextual information about what data to evaluate in the condition",
                    "type": "string",
                    "example": "RECURRING_PAYMENT_ALLOWED_FREQUENCY"
                },
                "value": {
                    "description": "The value defines the condition that rule should fulfill.",
                    "type": "string",
                    "example": "UNSTRUCTURED"
                }
            }
        },
        "RefreshCredentialsRequest": {
            "type": "object",
            "properties": {
                "appUri": {
                    "description": "The end user will be redirected to this URI after the authorization code has been delivered. This field is used for flows where we have third party redirects to financial institutions. There is a default value which is tink://open. It can be any type of URI (mobile deeplink, http address etc.)",
                    "type": "string",
                    "example": "https://my-customer-app.com/authentication"
                },
                "callbackUri": {
                    "description": "This URI will be used by the ASPSP to pass the authorization code. It corresponds to the redirect/callback URI in OAuth2/OpenId. This parameter is only applicable if you are a TPP.",
                    "type": "string",
                    "example": "http://my-customer-app.com/callback"
                },
                "originatingUserIp": {
                    "description": "(DEPRECATED) Use the field in the userAvailability object. This will be ignored if userAvailability is provided.\n",
                    "type": "string",
                    "example": "198.51.100.10"
                },
                "selectedAuthenticationOptions": {
                    "description": "[BETA] Specifies the selected authentication options for each available group when a provider has more than one authentication option available in any of the available groups. Note that if you send in selected authentication options for a refresh request authenticate flag needs to be set to true.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/SelectedAuthenticationOption"
                    }
                },
                "userAvailability": {
                    "description": "Specifies details about end user availability.\n",
                    "$ref": "#/definitions/UserAvailability"
                }
            }
        },
        "RelayedCallbackRequest": {
            "description": "The callback response from the ASPSP in a JSON format.",
            "type": "object",
            "title": "RelayedCallbackRequest",
            "required": [
                "state"
            ],
            "properties": {
                "parameters": {
                    "description": "The post parameters from the received callback from the ASPSP. Contains the parameters necessary for the integration to continue the communication with the ASPSP.",
                    "type": "object",
                    "example": {
                        "parameter1": "value1",
                        "parameter2": "value2",
                        "parameterN": "valueN"
                    }
                },
                "state": {
                    "description": "The state from the received callback from the ASPSP. Used by Tink to connect the incoming callback to the correct session.",
                    "type": "string",
                    "example": "aG93IHNuZWFreSBvZiB5b3UgdG8gZGVjb2RlIGV4YW1wbGUgc3RhdGU="
                }
            }
        },
        "RemittanceInformationDTO": {
            "type": "object",
            "title": "RemittanceInformationDTO",
            "required": [
                "type",
                "value"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "INVOICE",
                        "KID",
                        "MULTIBANCO_REFERENCE",
                        "OCR",
                        "REFERENCE",
                        "RF",
                        "UNSTRUCTURED"
                    ]
                },
                "value": {
                    "type": "string",
                    "pattern": "[^\\u0000]*"
                }
            }
        },
        "RemittanceInformationRemittanceInformationType": {
            "description": " - REMITTANCE_INFORMATION_TYPE_UNSPECIFIED: Default value should not occur.\n - UNSTRUCTURED: Information supplied in an unstructured form.\n - OCR: The OCR number, used in SE.\n - REFERENCE: Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.",
            "type": "string",
            "default": "REMITTANCE_INFORMATION_TYPE_UNSPECIFIED",
            "enum": [
                "REMITTANCE_INFORMATION_TYPE_UNSPECIFIED",
                "UNSTRUCTURED",
                "OCR",
                "REFERENCE"
            ]
        },
        "Report": {
            "description": "Report triggered for generation.",
            "type": "object",
            "required": [
                "id",
                "status",
                "type"
            ],
            "properties": {
                "error": {
                    "description": "If an error occurred during report generation this will contain the error message.\n\nThis is a free-form text and it is not supposed to be parsed programmatically.",
                    "type": "string",
                    "example": "Insufficient data to generate the report. At least 3 full months of transactions are required."
                },
                "id": {
                    "description": "An unique identifier of the triggered report. Always returned, even for reports that failed to be created. Check status before fetching report to know what to expect in the response from the report api.",
                    "type": "string",
                    "example": "bc875eead4554e77b8dc1644b222e027"
                },
                "status": {
                    "description": "Status of the report. \n\nPENDING: Report creation in progress.\n\nFAILED: Report creation failed.\n\nPRECONDITION_FAILED: Not enough data to generate a successful report.\n\nCOMPLETED: Successfully created report.",
                    "type": "string",
                    "enum": [
                        "PENDING, FAILED, PRECONDITION_FAILED, COMPLETED"
                    ],
                    "example": "PRECONDITION_FAILED"
                },
                "type": {
                    "description": "Report type.",
                    "type": "string",
                    "example": "INCOME_CHECK"
                }
            }
        },
        "ReportsGenerationJob": {
            "description": "Reports generation job describing the status of the triggered reports.",
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "reports",
                "status",
                "updatedTime"
            ],
            "properties": {
                "createdTime": {
                    "description": "Time of job creation in ISO-8601 format (UTC).",
                    "type": "string",
                    "example": "2022-10-31T11:55:45Z"
                },
                "error": {
                    "description": "If an error occurred during job processing this will contain the error message.\n\nThis is a free-form text and it is not supposed to be parsed programmatically.",
                    "type": "string",
                    "example": "An internal error occurred. Please contact support."
                },
                "id": {
                    "description": "An unique identifier of the job.",
                    "type": "string",
                    "example": "caecb48254664234814135346de6082a"
                },
                "reports": {
                    "description": "List of reports triggered by the job.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Report"
                    }
                },
                "status": {
                    "description": "Status of the job.\n\nTEMPORARY_ERROR status indicates that the reports generation may be retried at a later time.\n\nPERMANENT_ERROR status indicates that an non-retryable error has occurred and support should be contacted.\n\nCOMPLETED status indicates that a job had completed successfully.\n\nThis does not mean that all reports were successfully generated.\n\nAny (or even all) triggered reports might have failed and still the job itself might be in COMPLETED state.",
                    "type": "string",
                    "enum": [
                        "PENDING",
                        "TEMPORARY_ERROR",
                        "PERMANENT_ERROR",
                        "COMPLETED",
                        "PENDING, TEMPORARY_ERROR, PERMANENT_ERROR, COMPLETED"
                    ],
                    "example": "COMPLETED"
                },
                "updatedTime": {
                    "description": "Time when the job status was last updated in ISO-8601 format (UTC).",
                    "type": "string",
                    "example": "2022-10-31T12:01:32Z"
                }
            }
        },
        "RestCreatedTransfersResponse": {
            "type": "object",
            "title": "RestCreatedTransfersResponse",
            "required": [
                "paymentRequestCreatedTransfers"
            ],
            "properties": {
                "paymentRequestCreatedTransfers": {
                    "description": "List of transfers for a given payment request ID",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CreatedTransferDTO"
                    }
                }
            }
        },
        "RestPaymentResponse": {
            "type": "object",
            "title": "RestPaymentResponse",
            "required": [
                "amount",
                "currency",
                "id",
                "market",
                "recipientName",
                "recipient",
                "remittanceInformation"
            ],
            "properties": {
                "amount": {
                    "description": "The payment amount.",
                    "type": "number",
                    "example": 10
                },
                "currency": {
                    "description": "The currency of the payment amount.",
                    "type": "string",
                    "example": "GBP"
                },
                "destinations": {
                    "description": "A single-item list of account numbers that can receive the payment. If more than one item is provided, we select the first. Deprecated in favor of `recipient`.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentDestinationDTO"
                    },
                    "example": {
                        "accountNumber": "31245678901234",
                        "type": "sort-code"
                    },
                    "deprecated": true
                },
                "executionDate": {
                    "description": "The date defining when the payment will be executed by the bank. If no execution date is given, it will be executed as soon as possible. The date follows the ISO 8601 with format ",
                    "type": "string",
                    "example": "2023-11-20"
                },
                "id": {
                    "description": "The unique identifier for the payment request.",
                    "type": "string",
                    "example": "18408f41163f4748b87da9b9a68b6df8"
                },
                "market": {
                    "description": "The primary market of the payer. The market is the country code (in ISO 3166-1 alpha-2 format).",
                    "type": "string",
                    "enum": [
                        "AT",
                        "DE",
                        "DK",
                        "EE",
                        "ES",
                        "FI",
                        "FR",
                        "GB",
                        "IT",
                        "LT",
                        "LV",
                        "NL",
                        "NO",
                        "PT",
                        "SE"
                    ],
                    "example": "GB"
                },
                "merchantId": {
                    "description": "Id of the merchant to affiliate with this payment request.",
                    "type": "string",
                    "example": "c7f2de71-ad83-4eb7-b7df-5ed6445cb2af"
                },
                "metadata": {
                    "description": "A key-value dictionary with custom metadata for the payment request. All keys and values must be strings. For privacy protection, it is not allowed to use this dictionary for storing personal data (e.g. names and addresses).",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "custom key": "custom value",
                        "merchantReference": "17172137"
                    }
                },
                "paymentScheme": {
                    "description": "The desired payment scheme that the ASPSP supports. This field is mandatory for the GB market.",
                    "type": "string",
                    "enum": [
                        "FASTER_PAYMENTS",
                        "INSTANT_NORWEGIAN_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                        "MULTIBANCO_SERVICE",
                        "NORWEGIAN_DOMESTIC_CREDIT_TRANSFER",
                        "SEPA_CREDIT_TRANSFER",
                        "SEPA_INSTANT_CREDIT_TRANSFER",
                        "SWISS_DOMESTIC_CREDIT_TRANSFER",
                        "DANISH_DOMESTIC_CREDIT_TRANSFER",
                        "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_STRAKS",
                        "INSTANT_DANISH_DOMESTIC_CREDIT_TRANSFER_INTRADAG"
                    ],
                    "example": "FASTER_PAYMENTS"
                },
                "recipient": {
                    "description": "Information about recipient receiving the payment including account data, business identifier code and address. This information might be needed to make a cross-border payment.",
                    "$ref": "#/definitions/RecipientDTO",
                    "example": {
                        "accountNumber": "31245678901234",
                        "accountType": "sort-code",
                        "businessIdentifierCode": "BOFAUS3NXXX"
                    }
                },
                "recipientName": {
                    "description": "The recipient name shown to the payer on signing payments. Maximum character count of 30.",
                    "type": "string",
                    "example": "Test AB"
                },
                "remittanceInformation": {
                    "description": "The structured or unstructured remittance information for the payment request. Use for reconciliation purposes.",
                    "$ref": "#/definitions/RemittanceInformationDTO",
                    "example": {
                        "type": "REFERENCE",
                        "value": "CREDITOR-REF-12345"
                    }
                },
                "sender": {
                    "description": "Sender pinned to this payment. If enabled, only this particular person will be able to initiate this payment.",
                    "$ref": "#/definitions/PinnedSenderDTO",
                    "example": {
                        "accountNumber": "33008808080808",
                        "accountType": "se",
                        "firstName": "John",
                        "lastName": "Smith,"
                    }
                },
                "sourceMessage": {
                    "description": "The transaction description that only appears on the payer (debtor) account for the payment. Use for providing a short description about the payment transaction for the payer. Supported only in Sweden (SE).",
                    "type": "string",
                    "example": "Payment for Gym Equipment"
                }
            }
        },
        "RevokeConsentResponse": {
            "type": "object",
            "title": "RevokeConsentResponse",
            "properties": {
                "authorization": {
                    "$ref": "#/definitions/Connectivity%20v2.Authorization"
                },
                "consent": {
                    "$ref": "#/definitions/Connectivity%20v2.Consent"
                }
            },
            "example": {
                "authorization": {
                    "consentId": "c63dc11e-b210-4a96-9461-2061389789e7",
                    "createdAt": "2022-12-26T21:33:12.000Z",
                    "id": "a0655566-bec8-4982-bf79-80f6a6dd2b47",
                    "state": "REVOKING",
                    "succeededAt": "2022-12-26T21:35:11.000Z"
                },
                "consent": {
                    "appId": "afae2e2a57b64009aa94f593d012b869",
                    "authorizedAt": "2022-12-26T21:35:11.000Z",
                    "createdAt": "2022-12-26T21:32:12.000Z",
                    "financialService": {
                        "subtype": "VRP_SWEEPING",
                        "type": "MANDATE_PAYMENTS"
                    },
                    "financialServiceParameters": {
                        "userParameters": {
                            "parameter": "value"
                        },
                        "version": "1.0.0"
                    },
                    "id": "c63dc11e-b210-4a96-9461-2061389789e7",
                    "providerId": "uk-natwest-oauth2",
                    "revokedAt": "2022-12-26T21:32:12.000Z",
                    "state": "REVOKED",
                    "userId": "7c41103806a011edb9390242ac120002"
                }
            }
        },
        "RixAccountIdentifier": {
            "type": "object",
            "required": [
                "accountNumber",
                "clearingNumber"
            ],
            "properties": {
                "accountNumber": {
                    "description": "The account number of the account.",
                    "type": "string",
                    "example": "8257466"
                },
                "clearingNumber": {
                    "description": "The clearing number of the account.",
                    "type": "string",
                    "example": "5839"
                }
            }
        },
        "SavingsGoalsOneOffPeriodicity": {
            "description": "Set of properties for the one off periodicity savings goal",
            "type": "object",
            "title": "SavingsGoalsOneOffPeriodicity",
            "required": [
                "targetAmount",
                "targetDate"
            ],
            "properties": {
                "targetAmount": {
                    "$ref": "#/definitions/Amount"
                },
                "targetDate": {
                    "description": "The target date for the Savings Goal, ISO 8601 formatted date (yyyy-MM-dd).",
                    "type": "string",
                    "example": "2022-10-25"
                }
            }
        },
        "SavingsGoalsRecurringPeriodicity": {
            "description": "Set of properties for the recurring periodicity savings goal",
            "type": "object",
            "title": "SavingsGoalsRecurringPeriodicity",
            "required": [
                "periodSavedAmount",
                "periodTargetAmount"
            ],
            "properties": {
                "periodSavedAmount": {
                    "$ref": "#/definitions/Amount"
                },
                "periodTargetAmount": {
                    "$ref": "#/definitions/Amount"
                },
                "periodUnit": {
                    "description": "The period of repetition of a given Savings Goal.",
                    "type": "string",
                    "enum": [
                        "WEEK",
                        "MONTH",
                        "YEAR"
                    ]
                },
                "totalTargetAmount": {
                    "$ref": "#/definitions/Amount"
                }
            }
        },
        "SearchQuery": {
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "A list of account IDs to filter by.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": "[\"87fa44ec11c4426e889a963add92b69e\"]"
                },
                "categories": {
                    "description": "A list of category IDs to filter by. Could either be leaf node categories, such as the category ID corresponding to `expenses:food.restaurants`, or groups of categories, such as the category ID corresponding to `expenses:food`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": "[\"953c4eda24554a61a9653a479e70fc96\"]"
                },
                "endDate": {
                    "description": "The end date of the result.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "externalIds": {
                    "description": "A list of external IDs to filter by.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": "[\"953c4eda24554a61a9653a479e70fc96\"]"
                },
                "includeUpcoming": {
                    "description": "Indicates if result should include upcoming transactions.",
                    "type": "boolean",
                    "default": false
                },
                "limit": {
                    "description": "The limit for the result, used for paging. Defaults to 50 if not set or set to 0.",
                    "type": "integer",
                    "format": "int32",
                    "example": 20
                },
                "maxAmount": {
                    "description": "Maximum amount to filter the results. Negative values can be set for expenses.",
                    "type": "number",
                    "format": "double",
                    "example": 68.42
                },
                "minAmount": {
                    "description": "Minimum amount to filter the results. Negative values can be set for expenses.",
                    "type": "number",
                    "format": "double",
                    "example": -50.49
                },
                "offset": {
                    "description": "The offset for the result, used for paging.",
                    "type": "integer",
                    "format": "int32",
                    "example": 20
                },
                "order": {
                    "description": "The order of the result.",
                    "type": "string",
                    "enum": [
                        "ASC",
                        "DESC"
                    ],
                    "example": "ASC"
                },
                "queryString": {
                    "description": "The string query.",
                    "type": "string",
                    "example": "Food this week"
                },
                "sort": {
                    "description": "The sort order of the result.",
                    "type": "string",
                    "enum": [
                        "SCORE",
                        "DATE",
                        "ACCOUNT",
                        "DESCRIPTION",
                        "AMOUNT",
                        "CATEGORY"
                    ],
                    "example": "DATE"
                },
                "startDate": {
                    "description": "The start date of the result.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                }
            }
        },
        "SearchResponse": {
            "type": "object",
            "required": [
                "count",
                "metrics",
                "net",
                "periodAmounts",
                "query",
                "results"
            ],
            "properties": {
                "count": {
                    "description": "The total number of transactions hits.",
                    "type": "integer",
                    "format": "int32",
                    "example": 110
                },
                "metrics": {
                    "description": "The metric object contains fields representing different metrics.",
                    "$ref": "#/definitions/SearchResponseMetrics"
                },
                "net": {
                    "description": "The net amount of all transaction hits. Will only include the amounts from transactions which has the same currency as the user to who they belong.",
                    "type": "number",
                    "format": "double",
                    "example": 1288.45
                },
                "periodAmounts": {
                    "description": "Key-value object where the key is a period (`YYYY-MM`) and the value is the net amount of the transactions found within the specified date range (if any) of the search query.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StringDoublePair"
                    }
                },
                "query": {
                    "description": "The query executed.",
                    "$ref": "#/definitions/SearchQuery"
                },
                "results": {
                    "description": "The search result.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SearchResult"
                    }
                }
            }
        },
        "SearchResponseMetrics": {
            "type": "object",
            "required": [
                "AVG",
                "CATEGORIES",
                "COUNT",
                "NET",
                "SUM"
            ],
            "properties": {
                "AVG": {
                    "description": "A number with the arithmetic mean amount of all transaction hits (income and expense). Example: A sum of 51 from 2 transaction hits will produce an average of 25.5.",
                    "type": "number",
                    "format": "double",
                    "example": 15
                },
                "CATEGORIES": {
                    "description": "Key-value pairs of category id's and the proportion of the sum of all transaction hits they represent (income and expense). Example: Given a transaction with category \"A\" and amount -42 and a transaction with category \"B\" and amount 9 the result is {\"A\": 0.8235, \"B\": 0.1765}.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "number",
                        "format": "double"
                    },
                    "example": "{\"0e1bade6a7e3459eb794f27b7ba4cea0\": 1.0}"
                },
                "COUNT": {
                    "description": "A number representing the total number of transaction hits.",
                    "type": "integer",
                    "format": "int32",
                    "example": 110
                },
                "NET": {
                    "description": "A number with the net amount of all transaction hits (income and expense). Example: A transaction with amount -42 and another with amount 9 will produce a net of -33.",
                    "type": "number",
                    "format": "double",
                    "example": 1288.45
                },
                "SUM": {
                    "description": "A number with the sum of all transaction hits (income and expense). Example: A transaction with amount -42 and another with amount 9 will produce a sum of 51.",
                    "type": "number",
                    "format": "double",
                    "example": 1650
                }
            }
        },
        "SearchResult": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "transaction": {
                    "description": "The transactions resulting from the query.",
                    "$ref": "#/definitions/TransactionResponse"
                },
                "type": {
                    "description": "(DEPRECATED) The search type. Will always be set to TRANSACTION.",
                    "type": "string",
                    "enum": [
                        "TRANSACTION"
                    ],
                    "example": "TRANSACTION"
                }
            }
        },
        "SelectAccountsRequest": {
            "type": "object",
            "title": "SelectAccountsRequest",
            "required": [
                "selectedAccounts"
            ],
            "properties": {
                "selectedAccounts": {
                    "description": "List of selected accounts id objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SelectedAccountDTO"
                    },
                    "example": [
                        {
                            "id": "12223"
                        },
                        {
                            "id": "23132"
                        }
                    ]
                }
            }
        },
        "SelectInsightActionRequest": {
            "type": "object",
            "required": [
                "insightAction",
                "insightId"
            ],
            "properties": {
                "insightAction": {
                    "description": "The insight action that the user invoked for the insight.",
                    "type": "string",
                    "example": "CREATE_TRANSFER"
                },
                "insightId": {
                    "description": "The unique identifier of an existing insight.",
                    "type": "string",
                    "example": "e2b746ed27c542ce846a8d693474df21"
                }
            }
        },
        "SelectOption": {
            "type": "object",
            "properties": {
                "iconUrl": {
                    "description": "A URL the client can optionally use to show an icon to represent the option.",
                    "type": "string"
                },
                "text": {
                    "description": "The human-readable description of this option to display to the user.",
                    "type": "string"
                },
                "value": {
                    "description": "The machine-readable value to send if the user picks this option.",
                    "type": "string"
                }
            }
        },
        "SelectedAccountDTO": {
            "type": "object",
            "title": "SelectedAccountDTO",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Selected account id",
                    "type": "string",
                    "example": 12223
                }
            }
        },
        "SelectedAuthenticationOption": {
            "type": "object",
            "properties": {
                "authenticationOptionDefinition": {
                    "description": "Specifies the selected authentication option. This is only required if selectedAuthenticationOptions is used.",
                    "type": "string",
                    "example": "SE_MOBILE_BANKID_OTHER_DEVICE"
                },
                "authenticationOptionsGroup": {
                    "description": "Specifies the authentication option group for which we have selected an authentication option. This is only required if selectedAuthenticationOptions is used.",
                    "type": "string",
                    "example": "SE_MOBILE_BANKID_DEVICE_CHOICE"
                },
                "fields": {
                    "description": "Specifies the values for the fields that are required to be sent when this authentication option is selected, if any.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": "{\"username\": \"198401011111\"}"
                }
            }
        },
        "SettlementAccountPaymentRequestScheme": {
            "description": "Payment scheme.\n\n - SCHEME_UNSPECIFIED: Default unspecified scheme.\n - FASTER_PAYMENTS: Faster payments scheme.\n - SEPA_INSTANT_CREDIT_TRANSFER: SEPA Instant Credit Transfer scheme.\n - SEPA_CREDIT_TRANSFER: SEPA Credit Transfer scheme.\n - BACS: BACS scheme.\n - CHAPS: CHAPS scheme.",
            "type": "string",
            "default": "SCHEME_UNSPECIFIED",
            "enum": [
                "SCHEME_UNSPECIFIED",
                "FASTER_PAYMENTS",
                "SEPA_INSTANT_CREDIT_TRANSFER",
                "SEPA_CREDIT_TRANSFER",
                "BACS",
                "CHAPS"
            ]
        },
        "SettlementAccountTransactionTransactionType": {
            "description": "The type of the transaction.\n\n - TRANSACTION_TYPE_UNSPECIFIED: Default value for transaction type when none of the other types can be assigned.\n - SWEEP: A scheduled payout to Merchant corporate account.\n - REFUND: Partial or full refund to the original payer of previously received funds.\n - PAYIN: Received payment which increases settlement account balance.\n - REVERT: A corrective transaction which reverses transaction made in error.\n - WITHDRAWAL: Payout to an end-user's bank account.\n - MERCHANT_PAYIN: Received payment from the merchant's payout account.\n - EXTERNAL_PAYIN: Received direct bank payment (outside Tink PIS).\n - TRANSFER: A payout from the account.\n - PAYMENT_REVERSAL: The reversal of a payment from the account. Indicates that the payout has been reverted after being initially marked as succeeded.",
            "type": "string",
            "default": "TRANSACTION_TYPE_UNSPECIFIED",
            "enum": [
                "TRANSACTION_TYPE_UNSPECIFIED",
                "SWEEP",
                "REFUND",
                "PAYIN",
                "REVERT",
                "WITHDRAWAL",
                "MERCHANT_PAYIN",
                "EXTERNAL_PAYIN",
                "TRANSFER",
                "PAYMENT_REVERSAL"
            ]
        },
        "SimilarTransactionsResponse": {
            "type": "object",
            "required": [
                "statistics",
                "transactions"
            ],
            "properties": {
                "statistics": {
                    "description": "Statistics of type 'income-and-expenses-and-transfers' for the similar transactions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Statistic"
                    }
                },
                "transactions": {
                    "description": "List of similar transactions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Data%20v1.Transaction"
                    }
                }
            }
        },
        "Statistic": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "period": {
                    "type": "string"
                },
                "resolution": {
                    "type": "string",
                    "enum": [
                        "DAILY",
                        "MONTHLY",
                        "MONTHLY_ADJUSTED",
                        "YEARLY",
                        "YEARLY_ROLLING",
                        "QUARTERLY",
                        "QUARTERLY_ROLLING",
                        "ALL",
                        "WEEKLY"
                    ]
                },
                "type": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "value": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "StringDoublePair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "SuggestTransactionsResponse": {
            "type": "object",
            "required": [
                "categorizationImprovement",
                "categorizationLevel",
                "clusters"
            ],
            "properties": {
                "categorizationImprovement": {
                    "description": "The categorization improvement achieve if all clusters are categorized.",
                    "type": "number",
                    "format": "double",
                    "example": 0.01
                },
                "categorizationLevel": {
                    "description": "The current categorization level before categorization.",
                    "type": "number",
                    "format": "double",
                    "example": 0.93
                },
                "clusters": {
                    "description": "Clusters to categorize.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionClusterView"
                    }
                }
            }
        },
        "SupplementalInformation": {
            "type": "object",
            "properties": {
                "information": {
                    "description": "A key-value structure, use `\"name\":\"value\"` from the fields found in `supplementalInformation` on the `Credentials` when status is `AWAITING_SUPPLEMENTAL_INFORMATION`.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": "{\"code\":\"123456\", \"name2\":\"value2\"}"
                }
            }
        },
        "SupportedChannel": {
            "description": " - SUPPORTED_CHANNEL_UNSPECIFIED: Not used.\n - SUPPORTED_CHANNEL_MOBILE: Indicates the authentication option is available for mobile devices.\n - SUPPORTED_CHANNEL_DESKTOP: Indicates the authentication option is available for desktop devices.",
            "type": "string",
            "default": "SUPPORTED_CHANNEL_UNSPECIFIED",
            "enum": [
                "SUPPORTED_CHANNEL_UNSPECIFIED",
                "SUPPORTED_CHANNEL_MOBILE",
                "SUPPORTED_CHANNEL_DESKTOP"
            ]
        },
        "TransactionClusterView": {
            "type": "object",
            "properties": {
                "categorizationImprovement": {
                    "description": "The categorization improvement achived if cluster is categorized.",
                    "type": "number",
                    "format": "double",
                    "example": 0.003
                },
                "description": {
                    "description": "A description of the cluster to categorized.",
                    "type": "string",
                    "example": "McDonalds Stock"
                },
                "transactions": {
                    "description": "List of transactions belonging to this cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Data%20v1.Transaction"
                    }
                }
            }
        },
        "TransactionIdentifiers": {
            "type": "object",
            "properties": {
                "providerExternalId": {
                    "description": "External identifier given by the provider",
                    "type": "string",
                    "example": "600aca79-23f2-4476-ac3a-5f1893b3b844"
                }
            }
        },
        "TransactionInformation": {
            "type": "object",
            "title": "TransactionInformation",
            "properties": {
                "unstructured": {
                    "description": "A detailed description from the financial institution. Intended to be shown to the end user when displaying a detailed view of a transaction. It contains a narrative, unstructured and unmodified text message with details of a transaction.",
                    "type": "string",
                    "example": "Purchase at ABC Supermarket, City XYZ, on 2023-10-05, Amount: $45.67, Card ending in 1234.",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "TransactionLinkSuggestionResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "The maximum amount of suggestions requested to be returned.",
                    "type": "integer",
                    "format": "int32"
                },
                "suggestedCounterpartTransactions": {
                    "description": "Suggested counterpart transactions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Data%20v1.Transaction"
                    }
                },
                "transactionId": {
                    "description": "The ID of the transaction to find suggestions for.",
                    "type": "string"
                }
            }
        },
        "TransactionPart": {
            "type": "object",
            "required": [
                "amount",
                "categoryId",
                "counterpartDescription",
                "counterpartId",
                "counterpartTransactionAmount",
                "counterpartTransactionId",
                "date",
                "id",
                "lastModified"
            ],
            "properties": {
                "amount": {
                    "description": "The amount of the transaction part.",
                    "type": "number",
                    "format": "double",
                    "example": 34.5
                },
                "categoryId": {
                    "description": "The category of the transaction part.",
                    "type": "string",
                    "example": "0e1bade6a7e3459eb794f27b7ba4cea0"
                },
                "counterpartDescription": {
                    "description": "The description of the transaction containing the counterpart.",
                    "type": "string",
                    "example": "Stadium Sergelg Stockholm"
                },
                "counterpartId": {
                    "description": "The id of the counterpart. The counterpart is a transaction part in another transaction",
                    "type": "string",
                    "example": "79c6c9c27d6e42489e888e08d27205a1"
                },
                "counterpartTransactionAmount": {
                    "description": "The amount of the transaction containing the counterpart.",
                    "type": "number",
                    "format": "double",
                    "example": 10
                },
                "counterpartTransactionId": {
                    "description": "The ID of the transaction containing the counterpart.",
                    "type": "string",
                    "example": "d030a7b0840547428aa2fd07026e9a77"
                },
                "date": {
                    "description": "The date the transaction part was created.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "id": {
                    "description": "The ID of the transaction part.",
                    "type": "string",
                    "example": "7303ff128531463bbed358bbf9e23f31"
                },
                "lastModified": {
                    "description": "The date the transaction part was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                }
            }
        },
        "TransactionResponse": {
            "type": "object",
            "required": [
                "accountId",
                "amount",
                "date",
                "description",
                "id",
                "lastModified",
                "notes",
                "originalAmount",
                "originalDate",
                "originalDescription",
                "pending",
                "timestamp",
                "type",
                "userId"
            ],
            "properties": {
                "accountId": {
                    "description": "The internal identifier of the account that the transaction belongs to.",
                    "type": "string",
                    "example": "3fe2d96efacd4dc5994404a950f238a9"
                },
                "amount": {
                    "description": "The amount of the transaction. This can be modified by the user.",
                    "type": "number",
                    "format": "double",
                    "example": 34.5
                },
                "categoryId": {
                    "description": "(Optional) The category of the transaction. This can be modified by the user.",
                    "type": "string",
                    "example": "0e1bade6a7e3459eb794f27b7ba4cea0"
                },
                "categoryType": {
                    "description": "(Optional) The category type of the transaction.",
                    "type": "string",
                    "enum": [
                        "INCOME",
                        "EXPENSES",
                        "TRANSFERS"
                    ],
                    "example": "EXPENSES"
                },
                "currencyDenominatedAmount": {
                    "description": "The amount of the transaction represented as a scale and unscaled value together with the ISO 4217 currency code of the amount. The amount can be modified by the user but not the currency code.",
                    "$ref": "#/definitions/CurrencyDenominatedAmount",
                    "example": "{scale: 2, unscaledValue:2000, currencyCode:EUR}"
                },
                "currencyDenominatedOriginalAmount": {
                    "description": "The original amount that was received from the provider, before the user changed it. The amount is represented as a scale and unscaled value together with the ISO 4217 currency code of the amount.",
                    "$ref": "#/definitions/CurrencyDenominatedAmount",
                    "example": "{scale: 2, unscaledValue:2000, currencyCode:EUR}"
                },
                "date": {
                    "description": "The date the transaction was executed. This can be modified by the user.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "description": {
                    "description": "The description of the transaction. This can be modified by the user.",
                    "type": "string",
                    "example": "Stadium Sergelg Stockholm"
                },
                "dispensableAmount": {
                    "description": "(DEPRECATED) The dispensable amount of the transaction.",
                    "type": "number"
                },
                "id": {
                    "description": "The internal identifier of the transaction.",
                    "type": "string",
                    "example": "79c6c9c27d6e42489e888e08d27205a1"
                },
                "identifiers": {
                    "description": "Identifiers coming from the provider",
                    "$ref": "#/definitions/Identifiers"
                },
                "lastModified": {
                    "description": "The date the transaction was last modified by the user.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "notes": {
                    "description": "A free-text field modifiable by the user. Any 'word' (whitespace separated), prefixed with a #, is considered a tag. These tags become searchable.",
                    "type": "string",
                    "example": "Delicious #cake #wedding"
                },
                "originalAmount": {
                    "description": "The original amount that was received from the provider, before the user changed it.",
                    "type": "number",
                    "format": "double",
                    "example": 34.5
                },
                "originalDate": {
                    "description": "The original date that was received from the provider, before the user changed it.",
                    "type": "string",
                    "format": "date-time",
                    "example": "1455740874875"
                },
                "originalDescription": {
                    "description": "The original description that was received from the provider, before the user changed it.",
                    "type": "string",
                    "example": "Stadium Sergelg Stockholm"
                },
                "partnerPayload": {
                    "description": "The payload that was previously ingested on the Connector API.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    },
                    "example": "{}"
                },
                "parts": {
                    "description": "(DEPRECATED) Available transaction parts. Populated when transaction is divided into more than one part.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionPart"
                    }
                },
                "payload": {
                    "description": "Meta data about the transaction, in key value format with Strings.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": "{}"
                },
                "pending": {
                    "description": "Indicates if this transaction has been settled or is still pending.",
                    "type": "boolean",
                    "default": false
                },
                "timestamp": {
                    "description": "The timestamp of when the transaction was first saved to database.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1464543093494
                },
                "type": {
                    "description": "The type of the transaction.",
                    "type": "string",
                    "enum": [
                        "DEFAULT",
                        "CREDIT_CARD",
                        "TRANSFER",
                        "PAYMENT",
                        "WITHDRAWAL"
                    ],
                    "example": "CREDIT_CARD"
                },
                "upcoming": {
                    "description": "Indicates if this is an upcoming transaction not booked yet.",
                    "type": "boolean",
                    "default": false
                },
                "userId": {
                    "description": "The internal identifier of the user that the transaction belongs to.",
                    "type": "string",
                    "example": "d9f134ee2eb44846a4e02990ecc8d32e"
                },
                "userModified": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "UpdateAccountEntity": {
            "description": "Account update request",
            "type": "object",
            "title": "UpdateAccountEntity",
            "properties": {
                "availableCredit": {
                    "description": "The available credit of the account. Available credit is defined as the amount the customer has left to spend at this time. As such, it decreases with every reservation or transaction. For accounts without credit, this is always zero.",
                    "type": "number",
                    "format": "double",
                    "example": 20000
                },
                "closed": {
                    "description": "The closed state of the account.",
                    "type": "boolean",
                    "example": false
                },
                "exclusion": {
                    "description": "The type of features to exclude. PFM_AND_SEARCH will exclude the accounts transactions from categorization, PFM features, and search result. PFM_DATA will exclude the accounts transactions from categorization and PFM features.",
                    "type": "string",
                    "enum": [
                        "PFM_AND_SEARCH, PFM_DATA, NONE"
                    ],
                    "example": "PFM_AND_SEARCH"
                },
                "name": {
                    "description": "The account name.",
                    "type": "string",
                    "example": "My savings account"
                },
                "type": {
                    "description": "The account type.",
                    "type": "string",
                    "enum": [
                        "CHECKING",
                        "SAVINGS",
                        "INVESTMENT",
                        "MORTGAGE",
                        "CREDIT_CARD",
                        "LOAN",
                        "DUMMY",
                        "PENSION",
                        "OTHER",
                        "EXTERNAL",
                        "CHECKING, SAVINGS, INVESTMENT, MORTGAGE, CREDIT_CARD, LOAN, PENSION, OTHER, EXTERNAL"
                    ],
                    "example": "CREDIT_CARD"
                }
            }
        },
        "UpdateBudgetRequest": {
            "description": "Update the budget with the requested fields.",
            "type": "object",
            "title": "UpdateBudgetRequest",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/amount",
                    "allowEmptyValue": null,
                    "position": null
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "allowEmptyValue": null,
                    "position": null
                },
                "name": {
                    "description": "The name of the Budget.",
                    "type": "string",
                    "example": "Coffee budget",
                    "allowEmptyValue": null,
                    "position": null
                },
                "oneOffPeriodicity": {
                    "$ref": "#/definitions/BudgetOneOffPeriodicity",
                    "allowEmptyValue": null,
                    "position": null
                },
                "recurringPeriodicity": {
                    "$ref": "#/definitions/BudgetRecurringPeriodicity",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "UpdateBudgetResponse": {
            "type": "object",
            "title": "UpdateBudgetResponse",
            "properties": {
                "budgetSpecification": {
                    "$ref": "#/definitions/Finance%20Management.Budgets",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "UpdateCalendarEventRequestUpdateEventBody": {
            "description": "The object defining update fields in update request.",
            "type": "object",
            "properties": {
                "accountIds": {
                    "type": "array",
                    "title": "List of Account ids",
                    "items": {
                        "type": "string"
                    }
                },
                "completed": {
                    "type": "boolean",
                    "title": "Flag indicating whether the event is completed"
                },
                "description": {
                    "type": "string",
                    "title": "Description of the event"
                },
                "dueDate": {
                    "type": "string",
                    "title": "Date of the event. ISO8601 format YYYY-MM-DD"
                },
                "eventAmount": {
                    "title": "Amount of the event with currency",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "title": {
                    "type": "string",
                    "title": "Title of the event"
                }
            }
        },
        "UpdateCredentialsRequest": {
            "type": "object",
            "properties": {
                "appUri": {
                    "description": "The end user will be redirected to this URI after the authorization code has been delivered. This field is used for flows where we have third party redirects to financial institutions. There is a default value which is tink://open. It can be any type of URI (mobile deeplink, http address etc.)",
                    "type": "string",
                    "example": "https://my-customer-app.com/authentication"
                },
                "callbackUri": {
                    "description": "This URI will be used by the ASPSP to pass the authorization code. It corresponds to the redirect/callback URI in OAuth2/OpenId. This parameter is only applicable if you are a TPP.",
                    "type": "string",
                    "example": "http://my-customer-app.com/callback"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "originatingUserIp": {
                    "description": "The originating user's remote IP address of the corresponding HTTP request.\n",
                    "type": "string",
                    "example": "198.51.100.10"
                },
                "providerName": {
                    "type": "string"
                },
                "selectedAuthenticationOptions": {
                    "description": "[BETA] Specifies the selected authentication options for each available group when a provider has more than one authentication option available in any of the available groups.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/SelectedAuthenticationOption"
                    }
                },
                "triggerRefresh": {
                    "description": "Defines if the Credentials update should cause the Credentials refresh. Defaults to `true`",
                    "type": "boolean",
                    "default": false,
                    "example": false
                }
            }
        },
        "UpdateGroupRequest": {
            "type": "object",
            "title": "UpdateGroupRequest",
            "properties": {
                "hidden": {
                    "description": "True if the group should be hidden, no other operation supported",
                    "type": "boolean",
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "UpdateTransactionAccountContainer": {
            "description": "Container of account and transactions.",
            "type": "object",
            "title": "UpdateTransactionAccountContainer",
            "required": [
                "transactionAccounts",
                "type"
            ],
            "properties": {
                "transactionAccounts": {
                    "description": "The transaction accounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UpdateTransactionAccountEntity"
                    }
                },
                "type": {
                    "description": "Defines the priority of the update request. Only `REAL_TIME` is supported for reflecting the most recent updates on a user's account.",
                    "type": "string",
                    "enum": [
                        "REAL_TIME",
                        "HISTORICAL",
                        "BATCH",
                        "REAL_TIME"
                    ],
                    "example": "REAL_TIME"
                }
            }
        },
        "UpdateTransactionAccountEntity": {
            "description": "The transaction accounts.",
            "type": "object",
            "title": "UpdateTransactionAccountEntity",
            "required": [
                "balance",
                "transactions"
            ],
            "properties": {
                "balance": {
                    "description": "The balance of the account at the time of the last transaction in the list.If a reserved amount is supplied, the account's balance will be set to the balance supplied minus the reserved amount",
                    "type": "number",
                    "format": "double",
                    "example": 7000
                },
                "externalId": {
                    "description": "External identifier for the account the transaction belongs to. Either this or tinkId must be set.",
                    "type": "string",
                    "example": "2d3bd65493b549e1927d97a2d0683ab9"
                },
                "payload": {
                    "description": "The payload property can include arbitrary metadata provided by the financial institution in question that can be used either for deep-linking back to the app of the financial institution, for displaying additional information about the account, or for backend purposes such as automatic categorization improvement, etc. The format is key-value, where key is a String and value any object.",
                    "type": "object",
                    "example": {}
                },
                "reservedAmount": {
                    "description": "The reserved amount of the account at the time of the last transaction in the list.The reserved amount is optional. If a reserved amount is supplied, the account's balance will be set to the balance supplied minus the reserved amount",
                    "type": "number",
                    "format": "double",
                    "example": 2000
                },
                "tinkId": {
                    "description": "Internal identifier for the account the transaction belongs to generated by Tink. Either this or externalId must be set.",
                    "type": "string",
                    "example": "e4a47d5e3d514ca4bd22130bb43c640b"
                },
                "transactions": {
                    "description": "The list with the single transaction to update.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CreateTransactionEntity"
                    }
                }
            }
        },
        "UpdateTransactionLinkRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "The amount of the transaction part. Must be same sign as the transaction. If not specified the common disposable amount will be used.",
                    "type": "number",
                    "format": "double",
                    "example": -90
                }
            }
        },
        "UpdateTransactionsResponse": {
            "type": "object",
            "title": "UpdateTransactionsResponse",
            "allowEmptyValue": null
        },
        "UserAvailability": {
            "type": "object",
            "required": [
                "userAvailableForInteraction",
                "userPresent"
            ],
            "properties": {
                "originatingUserIp": {
                    "description": "The originating user's remote IP address of the corresponding HTTP request.\n",
                    "type": "string",
                    "example": "198.51.100.10"
                },
                "userAvailableForInteraction": {
                    "description": "Indicates whether or not we can interact with the user (e.g. SCA through any supplemental information flow)",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "userPresent": {
                    "description": "The userPresent flag indicates whether or not the user is present at the time of the operation. A present user doesn't necessarily mean we can interact with the user. Imagine an app that, automatically, refreshes all credentials upon the user entering the app. This doesn't mean that the user is ready (\"available\") for interaction. For knowing if the user is available for interaction, use the flag userAvailableForInteraction. ",
                    "type": "boolean",
                    "default": false,
                    "example": true
                }
            }
        },
        "UserProfile": {
            "type": "object",
            "required": [
                "currency",
                "locale",
                "market",
                "notificationSettings",
                "periodAdjustedDay",
                "periodMode",
                "timeZone"
            ],
            "properties": {
                "currency": {
                    "description": "The configured ISO 4217 currency code of the user. Defaults to default currency for the user's market.",
                    "type": "string",
                    "readOnly": true,
                    "example": "SEK"
                },
                "locale": {
                    "description": "The configured locale of the user. Defaults to default locale for the user's market. This can be modified by the user.",
                    "type": "string",
                    "example": "sv_SE"
                },
                "market": {
                    "description": "The primary market/country of the user.",
                    "type": "string",
                    "readOnly": true,
                    "example": "SE"
                },
                "notificationSettings": {
                    "description": "The configured notification settings of the user. This can be modified by the user.",
                    "$ref": "#/definitions/NotificationSettings"
                },
                "periodAdjustedDay": {
                    "description": "The configured day of the month to break the adjusted period on. Defaults to default period adjusted day for the user's market. This can be modified by the user. A valid value should be in the range between 1 and 31. If the adjusted day is after the last day of a given month, then it is treated as the last day of the month.",
                    "type": "integer",
                    "format": "int32",
                    "example": 25
                },
                "periodMode": {
                    "description": "The configured monthly period mode of the user. Defaults to default period mode for the user's market. This can be modified by the user.",
                    "type": "string",
                    "enum": [
                        "MONTHLY",
                        "MONTHLY_ADJUSTED"
                    ],
                    "example": "MONTHLY_ADJUSTED"
                },
                "timeZone": {
                    "description": "The configured time zone of the user. Defaults to default time zone for the user's market. This can be modified by the user.",
                    "type": "string",
                    "example": "Europe/Stockholm"
                }
            }
        },
        "amount": {
            "description": "The target amount for the budget. The currency must match the user profile currency setting.",
            "type": "object",
            "title": "amount",
            "required": [
                "currencyCode",
                "scale",
                "unscaledValue"
            ],
            "properties": {
                "currencyCode": {
                    "description": "The ISO 4217 currency code of the amount",
                    "type": "string",
                    "example": "EUR",
                    "allowEmptyValue": null,
                    "position": null
                },
                "scale": {
                    "description": "The scale of the amount.\nThe `unscaledValue` is used with `scale` to accurately  represent floating point values.\nThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.\n",
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "allowEmptyValue": null,
                    "position": null
                },
                "unscaledValue": {
                    "description": "The unscaled value of the amount.\nThe `unscaledValue` is used with `scale` to accurately represent floating point values.\nThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.\n",
                    "type": "integer",
                    "format": "int64",
                    "example": 1050,
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "apiHttpBody": {
            "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest)\n        returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody)\n        returns (google.protobuf.Empty);\n\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged.",
            "type": "object",
            "properties": {
                "contentType": {
                    "description": "The HTTP Content-Type header value specifying the content type of the body.",
                    "type": "string"
                },
                "data": {
                    "description": "The HTTP request/response body as raw binary.",
                    "type": "string",
                    "format": "byte"
                },
                "extensions": {
                    "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                }
            }
        },
        "filter": {
            "description": "The filter defining the budget and which transactions that is included\nin it. The configured fields of the filter are applied as logical and\noperator (intersection).\n",
            "type": "object",
            "title": "filter",
            "properties": {
                "accounts": {
                    "description": "List of included accounts. Applied as logical or (union).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BudgetFilterAccount",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "categories": {
                    "description": "List of included categories. Applied as logical or (union).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BudgetFilterCategory",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                },
                "freeTextQuery": {
                    "description": "Query for a partial transaction description match.",
                    "type": "string",
                    "example": "Monmouth Coffee",
                    "allowEmptyValue": null,
                    "position": null
                },
                "tags": {
                    "description": "List of included tags. Applied as logical or (union).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BudgetFilterTag",
                        "allowEmptyValue": null,
                        "position": null
                    },
                    "allowEmptyValue": null,
                    "position": null
                }
            },
            "allowEmptyValue": null
        },
        "google.protobuf.Any": {
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "type": "object",
            "properties": {
                "typeUrl": {
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                    "type": "string"
                },
                "value": {
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "grpc.gateway.runtime.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/google.protobuf.Any"
                    }
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "incomechecksv2Identity": {
            "type": "object",
            "required": [
                "name",
                "ssn"
            ],
            "properties": {
                "name": {
                    "description": "The name of the user.",
                    "type": "string"
                },
                "ssn": {
                    "description": "User's social security number.",
                    "type": "string"
                }
            },
            "example": {
                "name": "John Doe",
                "ssn": "197601011234"
            }
        },
        "paymentAccountIdentifier": {
            "type": "object",
            "properties": {
                "identifier": {
                    "description": "Full account identifier as string.",
                    "type": "string"
                },
                "type": {
                    "description": "Account type - one of predefined values.",
                    "$ref": "#/definitions/AccountIdentifierAccountIdentifierType"
                }
            }
        },
        "protobufAny": {
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "type": "object",
            "properties": {
                "typeUrl": {
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                    "type": "string"
                },
                "value": {
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "protobufFieldMask": {
            "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, new values will\nbe appended to the existing repeated field in the target resource. Note that\na repeated field is only allowed in the last position of a `paths` string.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then new value will be merged into the existing sub-message\nin the target resource.\n\nFor example, given the target message:\n\n    f {\n      b {\n        d: 1\n        x: 2\n      }\n      c: [1]\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d: 10\n      }\n      c: [2]\n    }\n\nthen if the field mask is:\n\n paths: [\"f.b\", \"f.c\"]\n\nthen the result will be:\n\n    f {\n      b {\n        d: 10\n        x: 2\n      }\n      c: [1, 2]\n    }\n\nAn implementation may provide options to override this default behavior for\nrepeated and message fields.\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is unmappable.",
            "type": "object",
            "title": "`FieldMask` represents a set of symbolic field paths, for example:",
            "properties": {
                "paths": {
                    "description": "The set of field mask paths.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "runtimeError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "runtimeStreamError": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                },
                "grpcCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "httpCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "httpStatus": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "tink.transactionhistory.accounts.v2.Account": {
            "type": "object",
            "required": [
                "id",
                "name",
                "type",
                "dates"
            ],
            "properties": {
                "balances": {
                    "description": "Account balances.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Balances"
                },
                "customerSegment": {
                    "description": "Indicates whether the account belongs to a financial product offered to individuals or business customers.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.CustomerSegment"
                },
                "dates": {
                    "description": "Applicable dates.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Dates"
                },
                "externalAccountId": {
                    "description": "External identifier of the account provided by the ingesting party. Only populated for Connector customer accounts and not for aggregated accounts.",
                    "type": "string"
                },
                "financialInstitutionId": {
                    "description": "ID of the financial institution the account belongs to. Since this field is applicable for aggregated accounts only, a Customer using Connector to ingest accounts can distinguish the different types of accounts by checking if this field is set or not.",
                    "type": "string"
                },
                "id": {
                    "description": "Tink unique identifier for the account report. Generated at the moment of report creation.",
                    "type": "string"
                },
                "identifiers": {
                    "description": "Available identifiers.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Identifiers"
                },
                "name": {
                    "description": "Name of the account assigned by the account holder or by the financial institution.\nThis field is typically what the user recognises in their online banking app.",
                    "type": "string"
                },
                "type": {
                    "description": "Specifies the type of account.\n\u003cbr\u003eNote: Since new types can be added as the product evolves, make sure your implementation is\nresiliently handling any unrecognized value returned in the API response.\nAccount types:\n\u003cbr\u003e`CHECKING`: A Checking account.\n\u003cbr\u003e`SAVINGS`: A Savings account.\n\u003cbr\u003e`CREDIT_CARD`: A Credit Card account.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Type"
                }
            },
            "example": {
                "balances": {
                    "booked": {
                        "amount": {
                            "currencyCode": "EUR",
                            "value": {
                                "scale": "-3",
                                "unscaledValue": "19"
                            }
                        }
                    }
                },
                "dates": {
                    "lastRefreshed": "2020-12-15T12:16:58Z"
                },
                "financialInstitutionId": "6e68cc6287704273984567b3300c5822",
                "id": "ee7ddbd178494220bb184791783f4f63",
                "identifiers": {
                    "financialInstitution": {
                        "accountNumber": "SE6930000000011273547693"
                    },
                    "iban": {
                        "bban": "0000011273547693",
                        "iban": "SE6930000000011273547693"
                    },
                    "pan": {
                        "masked": "4000 12** **** 9010"
                    }
                },
                "name": "PERSONKONTO",
                "type": "CHECKING"
            }
        },
        "tink.transactionhistory.accounts.v2.Account.Balance": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Monetary amount.",
                    "$ref": "#/definitions/tink.type.CurrencyDenominatedAmount"
                }
            },
            "example": {
                "amount": {
                    "currencyCode": "EUR",
                    "value": {
                        "scale": "-3",
                        "unscaledValue": "19"
                    }
                }
            }
        },
        "tink.transactionhistory.accounts.v2.Account.Balances": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "Total available balance.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Balance"
                },
                "booked": {
                    "description": "Total booked balance.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Balance"
                }
            },
            "example": {
                "booked": {
                    "amount": {
                        "currencyCode": "EUR",
                        "value": {
                            "scale": "-3",
                            "unscaledValue": "19"
                        }
                    }
                }
            }
        },
        "tink.transactionhistory.accounts.v2.Account.CustomerSegment": {
            "type": "string",
            "title": "- UNDEFINED_CUSTOMER_SEGMENT: Undefined\n - PERSONAL: Personal\n - BUSINESS: Business",
            "default": "UNDEFINED_CUSTOMER_SEGMENT",
            "enum": [
                "UNDEFINED_CUSTOMER_SEGMENT",
                "PERSONAL",
                "BUSINESS"
            ]
        },
        "tink.transactionhistory.accounts.v2.Account.Dates": {
            "type": "object",
            "required": [
                "lastRefreshed"
            ],
            "properties": {
                "lastRefreshed": {
                    "description": "Timestamp of last account data refresh (date and time in ISO-8601 standard).",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "example": {
                "lastRefreshed": "2020-12-15T12:16:58Z"
            }
        },
        "tink.transactionhistory.accounts.v2.Account.Identifiers": {
            "type": "object",
            "properties": {
                "financialInstitution": {
                    "title": "Internal identifier from the financial institution",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Identifiers.FinancialInstitution"
                },
                "iban": {
                    "description": "IBAN account identifier.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Identifiers.IBAN"
                },
                "pan": {
                    "description": "Pan identifier.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Identifiers.Pan"
                },
                "sortCode": {
                    "description": "Sort code account identifier.",
                    "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account.Identifiers.SortCode"
                }
            },
            "example": {
                "financialInstitution": {
                    "number": "SE6930000000011273547693"
                },
                "iban": {
                    "bban": "0000011273547693",
                    "iban": "SE6930000000011273547693"
                },
                "pan": {
                    "masked": "4000 12** **** 9010"
                }
            }
        },
        "tink.transactionhistory.accounts.v2.Account.Identifiers.FinancialInstitution": {
            "type": "object",
            "required": [
                "accountNumber"
            ],
            "properties": {
                "accountNumber": {
                    "description": "The number that the user would typically recognize as their account number, for example when selecting their account in a list.\nFor card-based accounts where the card number is also the unique account identifier, this field contains the masked PAN.\nFor US accounts, this field would typically contain the last 4 digits of the full account number.",
                    "type": "string"
                },
                "referenceNumbers": {
                    "description": "Additional identifiers used by the financial institution to uniquely reference the account.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "example": {
                "accountNumber": "1234-123456789"
            }
        },
        "tink.transactionhistory.accounts.v2.Account.Identifiers.IBAN": {
            "type": "object",
            "required": [
                "iban",
                "bban"
            ],
            "properties": {
                "bban": {
                    "description": "BBAN represents an country-specific bank account number.",
                    "type": "string"
                },
                "bic": {
                    "description": "BIC bank number. This can be inferred from the IBAN, but some banks might require it for adding a beneficiary\nor will display it for existing accounts owned by the user.",
                    "type": "string"
                },
                "iban": {
                    "description": "IBAN represents an international bank account number.",
                    "type": "string"
                }
            },
            "example": {
                "bban": "0000011273547693",
                "bic": "BARCGB22XXX",
                "iban": "SE6930000000011273547693"
            }
        },
        "tink.transactionhistory.accounts.v2.Account.Identifiers.Pan": {
            "type": "object",
            "required": [
                "masked"
            ],
            "properties": {
                "masked": {
                    "description": "The masked PAN (card number).",
                    "type": "string"
                }
            },
            "example": {
                "masked": "4000 12** **** 9010"
            }
        },
        "tink.transactionhistory.accounts.v2.Account.Identifiers.SortCode": {
            "type": "object",
            "required": [
                "code",
                "accountNumber"
            ],
            "properties": {
                "accountNumber": {
                    "description": "The BACS account number.",
                    "type": "string"
                },
                "code": {
                    "description": "The sort code of the account.",
                    "type": "string"
                }
            },
            "example": {
                "account_number": "55743513",
                "code": "608371"
            }
        },
        "tink.transactionhistory.accounts.v2.Account.Type": {
            "description": " - UNDEFINED: Not used.\n - CHECKING: Checking account.\n - SAVINGS: Savings account.\n - CREDIT_CARD: Credit card account.",
            "type": "string",
            "default": "UNDEFINED",
            "enum": [
                "UNDEFINED",
                "CHECKING",
                "SAVINGS",
                "CREDIT_CARD"
            ]
        },
        "tink.transactionhistory.accounts.v2.ListAccountsResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "There will be a maximum number of items returned based on the page_size field int the request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tink.transactionhistory.accounts.v2.Account"
                    }
                },
                "nextPageToken": {
                    "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                    "type": "string"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account": {
            "type": "object",
            "properties": {
                "balances": {
                    "description": "Account balances.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Balances"
                },
                "customerSegment": {
                    "description": "Customer segment identifier.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.CustomerSegment"
                },
                "dates": {
                    "description": "Applicable dates.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Dates"
                },
                "financialInstitutionId": {
                    "description": "ID of the financial institution the account belongs to.",
                    "type": "string"
                },
                "id": {
                    "description": "Internal Tink accounts identifier.",
                    "type": "string"
                },
                "identifiers": {
                    "description": "Available identifiers.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Identifiers"
                },
                "name": {
                    "description": "Account name as seen in the bank.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the account.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Type"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.Balance": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Monetary amount.",
                    "$ref": "#/definitions/tink.type.CurrencyDenominatedAmount"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.Balances": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "Total available balance.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Balance"
                },
                "booked": {
                    "description": "Total booked balance.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Balance"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.CustomerSegment": {
            "description": " - UNDEFINED_CUSTOMER_SEGMENT: Undefined segment.\n - PERSONAL: Personal segment.\n - BUSINESS: Business segment.",
            "type": "string",
            "default": "UNDEFINED_CUSTOMER_SEGMENT",
            "enum": [
                "UNDEFINED_CUSTOMER_SEGMENT",
                "PERSONAL",
                "BUSINESS"
            ]
        },
        "tink.transactionhistory.reports.v2.Account.Dates": {
            "type": "object",
            "properties": {
                "lastRefreshed": {
                    "description": "Timestamp of last account data refresh (date and time in ISO-8601 standard).",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.Identifiers": {
            "type": "object",
            "properties": {
                "financialInstitution": {
                    "description": "Internal identifier from the financial institution.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Identifiers.FinancialInstitution"
                },
                "iban": {
                    "description": "IBAN account identifier.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Identifiers.IBAN"
                },
                "pan": {
                    "description": "Pan identifier.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Identifiers.Pan"
                },
                "sortCode": {
                    "description": "Sort code account identifier.",
                    "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account.Identifiers.SortCode"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.Identifiers.FinancialInstitution": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "description": "Account number.",
                    "type": "string"
                },
                "referenceNumbers": {
                    "description": "Additional identifiers used by the financial institution to uniquely reference the account.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.Identifiers.IBAN": {
            "type": "object",
            "properties": {
                "bban": {
                    "description": "BBAN represents an country-specific bank account number.",
                    "type": "string"
                },
                "bic": {
                    "description": "BIC bank number. This can be inferred from the IBAN, but some banks might require it for adding a beneficiary\nor will display it for existing accounts owned by the user.",
                    "type": "string"
                },
                "iban": {
                    "description": "IBAN represents an international bank account number.",
                    "type": "string"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.Identifiers.Pan": {
            "type": "object",
            "properties": {
                "masked": {
                    "description": "The masked PAN (card number).",
                    "type": "string"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.Identifiers.SortCode": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "description": "Account number.",
                    "type": "string"
                },
                "code": {
                    "description": "Code value.",
                    "type": "string"
                }
            }
        },
        "tink.transactionhistory.reports.v2.Account.Type": {
            "description": " - UNDEFINED: Type undefined.\n - CHECKING: Checking account.\n - SAVINGS: Savings account.\n - CREDIT_CARD: Credit card account.",
            "type": "string",
            "default": "UNDEFINED",
            "enum": [
                "UNDEFINED",
                "CHECKING",
                "SAVINGS",
                "CREDIT_CARD"
            ]
        },
        "tink.transactionhistory.reports.v2.Report": {
            "type": "object",
            "required": [
                "id",
                "createdAt"
            ],
            "properties": {
                "accounts": {
                    "description": "Accounts list in the report.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tink.transactionhistory.reports.v2.Account"
                    }
                },
                "createdAt": {
                    "description": "[BETA] The date and time when transaction report was created. Specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z).",
                    "type": "string"
                },
                "externalReference": {
                    "type": "string",
                    "title": "[BETA] An external reference identifier. This field is only returned when it is provided by the client when creating the Tink Link Session or with the Tink Link URL"
                },
                "id": {
                    "description": "Tink unique identifier for the report.",
                    "type": "string"
                },
                "merchantId": {
                    "description": "[BETA] An id of the merchant. This field is only returned when it is provided by the client when creating the Tink Link Session.",
                    "type": "string"
                },
                "transactions": {
                    "description": "Transactions list in the report.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction"
                    }
                }
            },
            "example": {
                "createdAt": "2020-12-15T09:25:12Z",
                "id": "d8f37f7d19c240abb4ef5d5dbebae4ef"
            }
        },
        "tink.transactionhistory.transactions.v2.ListTransactionsResponse": {
            "type": "object",
            "properties": {
                "nextPageToken": {
                    "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                    "type": "string"
                },
                "transactions": {
                    "description": "There will be a maximum number of items returned based on the page_size field int the request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction"
                    }
                }
            },
            "example": {
                "nextPageToken": "ZDU0N2M0YTVkZTk3NGIxODkxMjNmZWVmYzEwNjQxZDg"
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction": {
            "type": "object",
            "required": [
                "id",
                "accountId",
                "amount",
                "types",
                "status"
            ],
            "properties": {
                "accountId": {
                    "description": "Tink unique identifier for the account the transaction belongs to.",
                    "type": "string"
                },
                "amount": {
                    "description": "Exact transaction amount, including currency.",
                    "$ref": "#/definitions/tink.type.CurrencyDenominatedAmount"
                },
                "bookedDateTime": {
                    "description": "[BETA] For BOOKED transactions indicates the date and time when the transaction was posted on the financial institution’s books. For PENDING transactions indicates the expected booking date and time. Specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z) or with time zone offset (e.g. 2020-12-15T10:25:12+01:00). This field is only returned when a valid timestamp is provided by the financial institution.",
                    "type": "string"
                },
                "categories": {
                    "description": "(Optional) Available categories. Disabled for new apps, please use [Data Enrichment](https://docs.tink.com/api#enrichment/data-enrichment) instead. For information, please see [Fetch enriched transactions for a user](https://docs.tink.com/resources/data-enrichment/fetch-enriched-transactions-for-a-user).",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Categories"
                },
                "counterparties": {
                    "description": "[BETA] Available transaction counterparties.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Counterparties"
                },
                "dates": {
                    "description": "Available transaction dates.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Dates"
                },
                "descriptions": {
                    "description": "Available transaction descriptions.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Descriptions"
                },
                "id": {
                    "description": "Tink unique identifier for the transaction.",
                    "type": "string"
                },
                "identifiers": {
                    "description": "Available identifiers.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Identifiers"
                },
                "merchantInformation": {
                    "description": "Merchant information.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.MerchantInformation"
                },
                "providerMutability": {
                    "description": "Transaction mutability status as indicated by the financial institution.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Mutability"
                },
                "reference": {
                    "description": "Transaction reference as provided by the financial institution.",
                    "type": "string"
                },
                "status": {
                    "description": "Transaction booking status.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Status"
                },
                "transactionDateTime": {
                    "description": "[BETA] The time and date when the transaction event was first initiated. For example when a payment card was authorized at the point of sale (before it was booked) or when a money transfer was first initiated (before it was executed). Specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z) or with time zone offset (e.g. 2020-12-15T10:25:12+01:00). This field is only returned when a valid timestamp is provided by the financial institution.",
                    "type": "string"
                },
                "types": {
                    "description": "Available types.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Types"
                },
                "valueDateTime": {
                    "description": "[BETA] The date and time when assets either become available or cease to be available to the account owner.  Specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z) or with time zone offset (e.g. 2020-12-15T10:25:12+01:00). This field is only returned when a valid timestamp is provided by the financial institution.",
                    "type": "string"
                }
            },
            "example": {
                "accountId": "4a2945d1481c4f4b98ab1b135afd96c0",
                "amount": {
                    "currencyCode": "GBP",
                    "value": {
                        "scale": "1",
                        "unscaledValue": "-1300"
                    }
                },
                "bookedDateTime": "2020-12-15T09:25:12Z",
                "id": "d8f37f7d19c240abb4ef5d5dbebae4ef",
                "reference": "RF12310007894321",
                "status": "BOOKED",
                "transactionDateTime": "2020-12-14T18:31:54Z",
                "valueDateTime": "2020-12-15T09:25:12Z"
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Categories": {
            "type": "object",
            "properties": {
                "pfm": {
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Categories.PFMCategory"
                }
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Categories.PFMCategory": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "Tink category ID.",
                    "type": "string"
                },
                "name": {
                    "description": "(DEPRECATED) Tink category name. Currently not populated.",
                    "type": "string"
                }
            },
            "example": {
                "id": "d8f37f7d19c240abb4ef5d5dbebae4ef",
                "name": ""
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Counterparties": {
            "type": "object",
            "properties": {
                "payee": {
                    "description": "[BETA] Available payee information.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Counterparties.CounterpartyInformation"
                },
                "payer": {
                    "description": "[BETA] Available payer information.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Counterparties.CounterpartyInformation"
                }
            },
            "example": {
                "payee": {
                    "identifiers": {
                        "financialInstitution": {
                            "accountNumber": "SE6651152689155983335132"
                        }
                    },
                    "name": "Joe Doe"
                },
                "payer": {
                    "identifiers": {
                        "financialInstitution": {
                            "accountNumber": "SE3778591419782047144807"
                        }
                    },
                    "name": "Jane Doe"
                }
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Counterparties.CounterpartyInformation": {
            "type": "object",
            "properties": {
                "identifiers": {
                    "description": "[BETA] Available identifiers.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Counterparties.CounterpartyInformation.Identifiers"
                },
                "name": {
                    "description": "[BETA] Name of a transaction counterparty from financial institution.",
                    "type": "string"
                }
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Counterparties.CounterpartyInformation.FinancialInstitution": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "description": "[BETA] Transaction counterparty account number from financial institution.",
                    "type": "string"
                }
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Counterparties.CounterpartyInformation.Identifiers": {
            "type": "object",
            "properties": {
                "financialInstitution": {
                    "description": "[BETA] Internal identifiers from the financial institution.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Counterparties.CounterpartyInformation.FinancialInstitution"
                }
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Dates": {
            "type": "object",
            "properties": {
                "booked": {
                    "description": "For BOOKED transactions indicates the date when the transaction was posted on the financial institution’s books. For PENDING transactions indicates the expected booking date. Specified as a ISO-8601 date string (YYYY-MM-DD). Corresponds to the date displayed to the financial institution end user on their bank statement or transaction list in their online bank in the bank’s local time.",
                    "type": "string"
                },
                "transaction": {
                    "description": "[BETA] The date when the transaction event was first initiated. For example a date when a payment card was authorised at the point of sale (before it was booked) or when a money transfer was first initiated (before it was executed). Specified as a ISO-8601 date string (YYYY-MM-DD) in bank local timezone.",
                    "type": "string"
                },
                "value": {
                    "description": "The date when assets either become available or cease to be available to the account owner. Specified as a ISO-8601 date string (YYYY-MM-DD). Corresponds to the date displayed to the financial institution end user on their bank statement or transaction list in their online bank in the bank’s local time.",
                    "type": "string"
                }
            },
            "example": {
                "booked": "2020-12-15",
                "transaction": "2020-12-14",
                "value": "2020-12-15"
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Descriptions": {
            "type": "object",
            "required": [
                "original",
                "display"
            ],
            "properties": {
                "detailed": {
                    "title": "[BETA] Available detailed transaction descriptions",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.TransactionInformation"
                },
                "display": {
                    "description": "Formatted and cleaned description intended to be shown to the end user when displaying a transactions list.",
                    "type": "string"
                },
                "original": {
                    "description": "Original unmodified description from the financial institution.",
                    "type": "string"
                }
            },
            "example": {
                "display": "Tesco",
                "original": "TESCO STORES 3297"
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Identifiers": {
            "type": "object",
            "properties": {
                "providerTransactionId": {
                    "description": "Transaction identifier obtained from the financial institution.",
                    "type": "string"
                }
            },
            "example": {
                "providerTransactionId": "500015d3-acf3-48cc-9918-9e53738d3692"
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.MerchantInformation": {
            "type": "object",
            "properties": {
                "merchantCategoryCode": {
                    "type": "string",
                    "title": "Merchant category code (MCC), as indicated by the financial institution"
                },
                "merchantName": {
                    "type": "string",
                    "title": "Name of merchant, as indicated by the financial institution"
                }
            },
            "example": {
                "merchantCategoryCode": "4111",
                "merchantName": "Local Transit Company"
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Mutability": {
            "type": "string",
            "default": "MUTABILITY_UNDEFINED",
            "enum": [
                "MUTABILITY_UNDEFINED",
                "MUTABLE",
                "IMMUTABLE"
            ]
        },
        "tink.transactionhistory.transactions.v2.Transaction.Status": {
            "description": " - UNDEFINED: (DEPRECATED) The transaction booking status is undefined.\n - PENDING: The transaction is pending at the financial institution.\n - BOOKED: The transaction is booked at the financial institution.",
            "type": "string",
            "default": "UNDEFINED",
            "enum": [
                "UNDEFINED",
                "PENDING",
                "BOOKED"
            ]
        },
        "tink.transactionhistory.transactions.v2.Transaction.TransactionInformation": {
            "type": "object",
            "properties": {
                "unstructured": {
                    "description": "[BETA] A detailed description from the financial institution. Intended to be shown to the end user when displaying a detailed view of a transaction. It contains a narrative, unstructured and unmodified text message with details of a transaction.",
                    "type": "string"
                }
            },
            "example": {
                "unstructured": "PAYMENT *SUBSCRIPTION 123/987"
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Types": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "financialInstitutionTypeCode": {
                    "description": "The financial institution's proprietary transaction type code.",
                    "type": "string"
                },
                "type": {
                    "description": "(DEPRECATED) Tink transaction type.",
                    "$ref": "#/definitions/tink.transactionhistory.transactions.v2.Transaction.Types.Type"
                }
            },
            "example": {
                "financialInstitutionTypeCode": "DEB",
                "type": "DEFAULT"
            }
        },
        "tink.transactionhistory.transactions.v2.Transaction.Types.Type": {
            "description": " - UNDEFINED: Type undefined.\n - CREDIT_CARD: Credit card.\n - PAYMENT: Payment.\n - WITHDRAWAL: Withdrawal.\n - DEFAULT: Default.\n - TRANSFER: Transfer.",
            "type": "string",
            "default": "UNDEFINED",
            "enum": [
                "UNDEFINED",
                "CREDIT_CARD",
                "PAYMENT",
                "WITHDRAWAL",
                "DEFAULT",
                "TRANSFER"
            ]
        },
        "tink.type.CurrencyDenominatedAmount": {
            "description": "The amount with regard to currency and its value should be accurately represent the monetary amount.",
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The currency code which follows ISO-4217 standard.",
                    "type": "string"
                },
                "value": {
                    "description": "The value representation of the monetary amount.",
                    "$ref": "#/definitions/tink.type.ExactNumber"
                }
            }
        },
        "tink.type.ExactNumber": {
            "description": "ExactNumber to use representation, which is used in `BigDecimal`.\n\nA value of `12.13` with `unscaledValue = 1213` and `scale = 2`. We can later use\n`doubleValue = Math.pow(10, -scale) * unscaledValue` to get exact number.",
            "type": "object",
            "properties": {
                "scale": {
                    "description": "The scale of the numeric value.\n`unscaledValue` is used with `scale` to accurately represent floating point values.\nThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "string",
                    "format": "int64"
                },
                "unscaledValue": {
                    "description": "The unscaled numeric value.\n`unscaledValue` is used with `scale` to accurately represent floating point values.\nThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "tink.webhook.api.v2.CreateWebhookEndpointRequest": {
            "description": "Definition of the webhook endpoint",
            "type": "object",
            "title": "Create a new webhook endpoint",
            "required": [
                "enabledEvents",
                "url"
            ],
            "properties": {
                "description": {
                    "description": "An optional description of what the webhook is used for.",
                    "type": "string"
                },
                "disabled": {
                    "description": "Marks whether the webhook is disabled. Defaults to false.",
                    "type": "boolean"
                },
                "enabledEvents": {
                    "description": "The list of events to enable for this endpoint.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string",
                    "title": "The URL of the webhook endpoint. Allowed schemes: https"
                }
            },
            "example": {
                "description": "Alice's webhook",
                "disabled": false,
                "enabledEvents": [
                    "refresh:finished"
                ],
                "url": "https://endpoint.example.com/"
            }
        },
        "tink.webhook.api.v2.ListWebhookEndpointResponse": {
            "type": "object",
            "properties": {
                "nextPageToken": {
                    "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                    "type": "string"
                },
                "webhookEndpoints": {
                    "description": "There will be a maximum number of items returned based on the page_size field int the request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tink.webhook.api.v2.WebhookEndpoint"
                    }
                }
            }
        },
        "tink.webhook.api.v2.UpdateWebhookEndpointRequest": {
            "description": "The webhook endpoint to update",
            "type": "object",
            "title": "Update a webhook endpoint",
            "properties": {
                "webhookEndpoint": {
                    "title": "The object specifying webhook endpoint mutable fields to be updated. One or more of the following fields can be specified at once to perform the update: enabledEvents, description, disabled, url",
                    "$ref": "#/definitions/tink.webhook.api.v2.WebhookEndpoint"
                }
            },
            "example": {
                "webhookEndpoint": {
                    "description": "Alice's webhook",
                    "disabled": false,
                    "enabledEvents": [
                        "refresh:finished"
                    ],
                    "url": "https://endpoint.example.com/"
                }
            }
        },
        "tink.webhook.api.v2.WebhookEndpoint": {
            "type": "object",
            "required": [
                "id",
                "enabledEvents",
                "url",
                "createdAt",
                "updatedAt",
                "disabled"
            ],
            "properties": {
                "createdAt": {
                    "description": "Time at which the webhook was stored specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z) or with time zone offset (e.g. 2020-12-15T10:25:12+01:00).",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "An optional description of what the webhook is used for.",
                    "type": "string"
                },
                "disabled": {
                    "description": "Marks whether the webhook is disabled. Defaults to false.",
                    "type": "boolean"
                },
                "enabledEvents": {
                    "description": "The list of events to enable for this endpoint.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "A Tink unique identifier for the webhook endpoint.",
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "title": "The secret used to generate the signature header.\u003cbr\u003e\nNOTE: \u003cstrong\u003eReturned only on creation\u003c/strong\u003e. \u003cem\u003eDon't provide this value when updating a webhook endpoint.\u003c/em\u003e"
                },
                "updatedAt": {
                    "description": "Time at which the webhook was updated specified as a ISO-8601 date and time string in UTC (e.g. 2020-12-15T09:25:12Z) or with time zone offset (e.g. 2020-12-15T10:25:12+01:00).",
                    "type": "string",
                    "format": "date-time"
                },
                "url": {
                    "type": "string",
                    "title": "The URL of the webhook endpoint. Allowed schemes: https"
                }
            },
            "example": {
                "createdAt": "2022-11-30T15:27:59Z",
                "description": "Alice's webhook",
                "disabled": false,
                "enabledEvents": [
                    "refresh:finished"
                ],
                "id": "d8f37f7d19c240abb4ef5d5dbebae4ef",
                "updatedAt": "2022-11-30T15:27:59Z",
                "url": "https://endpoint.example.com/"
            }
        },
        "typeCurrencyDenominatedAmount": {
            "description": "The amount with regard to currency and its value should be accurately represent the monetary amount.",
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The currency code which follows ISO-4217 standard.",
                    "type": "string"
                },
                "value": {
                    "description": "The value representation of the monetary amount.",
                    "$ref": "#/definitions/typeExactNumber"
                }
            }
        },
        "typeExactNumber": {
            "description": "ExactNumber to use representation, which is used in `BigDecimal`.\n\nA value of `12.13` with `unscaledValue = 1213` and `scale = 2`. We can later use\n`doubleValue = Math.pow(10, -scale) * unscaledValue` to get exact number.",
            "type": "object",
            "properties": {
                "scale": {
                    "description": "The scale of the numeric value.\n`unscaledValue` is used with `scale` to accurately represent floating point values.\nThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "string",
                    "format": "int64"
                },
                "unscaledValue": {
                    "description": "The unscaled numeric value.\n`unscaledValue` is used with `scale` to accurately represent floating point values.\nThe formula is `unscaledValue * (10^-scale)`. For example, if scale is 1 and unscaledValue is 1230, the end result would be 123.0.",
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "v1Account": {
            "type": "object",
            "required": [
                "id",
                "accountNumber",
                "name"
            ],
            "properties": {
                "accountNumber": {
                    "description": "Account's unique identifier number.",
                    "type": "string"
                },
                "holderNames": {
                    "description": "Names of account holders. Availability of this data depends on the chosen provider.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "Account's internal identifier.",
                    "type": "string"
                },
                "name": {
                    "description": "Account's display name.",
                    "type": "string"
                }
            },
            "example": {
                "accountNumber": "1234-123456789",
                "holderNames": [
                    "John Doe",
                    "Lisa Doe"
                ],
                "id": "a6bb87e57a8c4dd4874b241471a2b9e8",
                "name": "John’s account"
            }
        },
        "v1AccountActivity": {
            "type": "object",
            "required": [
                "activityOneWeek",
                "activityOneMonth",
                "activityThreeMonths",
                "activitySixMonths",
                "activityNineMonths",
                "activityTwelveMonths",
                "activityTotal",
                "activityIncOneWeek",
                "activityIncOneMonth",
                "activityIncThreeMonths",
                "activityIncSixMonths",
                "activityIncNineMonths",
                "activityIncTwelveMonths",
                "activityIncTotal",
                "activityOutOneWeek",
                "activityOutOneMonth",
                "activityOutThreeMonths",
                "activityOutSixMonths",
                "activityOutNineMonths",
                "activityOutTwelveMonths",
                "activityOutTotal",
                "averageTransactionsPerDay",
                "daysSinceLastTransactions",
                "daysSinceFirstTransactions",
                "daysOfOutTransactions",
                "daysOfIncTransactions",
                "daysOfTransactions"
            ],
            "properties": {
                "activityIncNineMonths": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityIncOneMonth": {
                    "description": "The number of days where incoming transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityIncOneWeek": {
                    "description": "The number of days where incoming transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityIncSixMonths": {
                    "description": "The number of days where incoming transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityIncThreeMonths": {
                    "description": "The number of days where incoming transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityIncTotal": {
                    "description": "The number of days where incoming transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityIncTwelveMonths": {
                    "description": "The number of days where incoming transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityNineMonths": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOneMonth": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOneWeek": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOutNineMonths": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOutOneMonth": {
                    "description": "The number of days where outgoing transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOutOneWeek": {
                    "description": "The number of days where outgoing transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOutSixMonths": {
                    "description": "The number of days where outgoing transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOutThreeMonths": {
                    "description": "The number of days where outgoing transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOutTotal": {
                    "description": "The number of days where outgoing transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityOutTwelveMonths": {
                    "description": "The number of days where outgoing transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activitySixMonths": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityThreeMonths": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityTotal": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "activityTwelveMonths": {
                    "description": "The number of days where transactions exist per the defined period.",
                    "type": "number",
                    "format": "float"
                },
                "averageTransactionsPerDay": {
                    "description": "The average number of transactions per day.",
                    "type": "number",
                    "format": "float"
                },
                "daysOfIncTransactions": {
                    "description": "The number of days where any incoming transaction exists.",
                    "type": "integer",
                    "format": "int32"
                },
                "daysOfOutTransactions": {
                    "description": "The number of days where any outgoing transaction exists.",
                    "type": "integer",
                    "format": "int32"
                },
                "daysOfTransactions": {
                    "description": "The number of days where any transaction exists.",
                    "type": "integer",
                    "format": "int32"
                },
                "daysSinceFirstTransactions": {
                    "description": "The number of days since the first transaction was made.",
                    "type": "integer",
                    "format": "int32"
                },
                "daysSinceLastTransactions": {
                    "description": "The number of days since the last transaction was made.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "example": {
                "activityIncNineMonths": 0.0712328777,
                "activityIncOneMonth": 0,
                "activityIncOneWeek": 0,
                "activityIncSixMonths": 0.0388888903,
                "activityIncThreeMonths": 0,
                "activityIncTotal": 0.0701754391,
                "activityIncTwelveMonths": 0.0712328777,
                "activityOneMonth": 0,
                "activityOneWeek": 0,
                "activityOutNineMonths": 0.344444454,
                "activityOutOneMonth": 0,
                "activityOutOneWeek": 0,
                "activityOutSixMonths": 0.344444454,
                "activityOutThreeMonths": 0,
                "activityOutTotal": 0.699248135,
                "activityOutTwelveMonths": 0.676712334,
                "activitySixMonths": 0.45,
                "activityThreeMonths": 0,
                "activityTotal": 4.64912271,
                "activityTwelveMonths": 0.679452062,
                "averageTransactionsPerDay": 4.64912271,
                "daysOfIncTransactions": 28,
                "daysOfOutTransactions": 279,
                "daysOfTransactions": 280,
                "daysSinceFirstTransactions": 399,
                "daysSinceLastTransactions": 116
            }
        },
        "v1AccountDetails": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account details.",
                    "$ref": "#/definitions/paymentAccountIdentifier"
                },
                "name": {
                    "description": "Name of the account holder.",
                    "type": "string"
                }
            },
            "example": {
                "account": {
                    "identifier": "00000070438943",
                    "type": "SORT_CODE"
                },
                "name": "John Smith"
            }
        },
        "v1AccountFilter": {
            "type": "object",
            "title": "Object definition for Account Filter",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "Account ID that will be used as a filter for transactions\nwhich should be included as a progress towards a Business Budget goal"
                }
            },
            "example": {
                "id": "6cfaefb5-12e1-4b2a-a74e-204bf77a2187"
            }
        },
        "v1AccountIdentifier": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "description": "The payee's account number.",
                    "type": "string"
                },
                "type": {
                    "description": "The payee's account type.",
                    "$ref": "#/definitions/v1AccountIdentifierType"
                }
            }
        },
        "v1AccountIdentifierType": {
            "description": " - ACCOUNT_IDENTIFIER_TYPE_UNSPECIFIED: Default value. It should not occur.\n - SE: Account type used in SE.\n - SE_BG: BankGiro account type used in SE.\n - SE_PG: PlusGiro account type used in SE.\n - IBAN: IBAN account type.",
            "type": "string",
            "default": "ACCOUNT_IDENTIFIER_TYPE_UNSPECIFIED",
            "enum": [
                "ACCOUNT_IDENTIFIER_TYPE_UNSPECIFIED",
                "SE",
                "SE_BG",
                "SE_PG",
                "IBAN"
            ]
        },
        "v1AccountOverview": {
            "type": "object",
            "required": [
                "numAccounts",
                "numAccountTypes",
                "numAccountHolders",
                "numCurrencies"
            ],
            "properties": {
                "numAccountHolders": {
                    "description": "The number of account holders.",
                    "type": "integer",
                    "format": "int32"
                },
                "numAccountTypes": {
                    "description": "The number of unique account types.",
                    "type": "integer",
                    "format": "int32"
                },
                "numAccounts": {
                    "description": "The number of accounts.",
                    "type": "integer",
                    "format": "int32"
                },
                "numCurrencies": {
                    "description": "The number of unique currencies of the accounts.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "example": {
                "numAccountHolders": 2,
                "numAccountTypes": 1,
                "numAccounts": 3,
                "numCurrencies": 1
            }
        },
        "v1ActionIndicator": {
            "description": "Enum definition of Action Indicator. Describes possible values.\n\n - NO_REMAINING_ACTION_NEEDED: Default value, event reconciled and completed\n - ACTION_LATER: More than 7 days left to dueDate in expense events. Income events use this for all not reconciled events before due date.\n - ACTION_URGENT: Between 4-7 days left to dueDate for expense events.\n - ACTION_CRITICAL: Between 0-3 days left to dueDate for expense events.\n - NOT_COMPLETED_PAST_DUE_DATE: Current date is past dueDate and event is not completed\n - COMPLETED_NOT_RECONCILED_PAST_DUE_DATE: Current date is past dueDate and event is completed but not reconciled",
            "type": "string",
            "default": "NO_REMAINING_ACTION_NEEDED",
            "enum": [
                "NO_REMAINING_ACTION_NEEDED",
                "ACTION_LATER",
                "ACTION_URGENT",
                "ACTION_CRITICAL",
                "NOT_COMPLETED_PAST_DUE_DATE",
                "COMPLETED_NOT_RECONCILED_PAST_DUE_DATE"
            ]
        },
        "v1ActiveSpending": {
            "type": "object",
            "required": [
                "estimate"
            ],
            "properties": {
                "estimate": {
                    "description": "User's current month-normalized spending estimate for a given category.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                }
            },
            "example": {
                "estimate": {
                    "currencyCode": "SEK",
                    "value": {
                        "scale": "1",
                        "unscaledValue": "-250000"
                    }
                }
            }
        },
        "v1AllocationFilter": {
            "type": "object",
            "title": "Object definition for Allocation Filter",
            "properties": {
                "accounts": {
                    "type": "array",
                    "title": "List of Account Filters for Allocation Filter in Business Budget",
                    "items": {
                        "$ref": "#/definitions/v1AccountFilter"
                    }
                },
                "categories": {
                    "type": "array",
                    "title": "List of Category Filters for Allocation Filter in Business Budget",
                    "items": {
                        "$ref": "#/definitions/v1CategoryFilter"
                    }
                },
                "tags": {
                    "type": "array",
                    "title": "List of Tag Filters for Allocation Filter in Business Budget",
                    "items": {
                        "$ref": "#/definitions/v1TagFilter"
                    }
                }
            },
            "example": {
                "accounts": [
                    {
                        "id": "6cfaefb5-12e1-4b2a-a74e-204bf77a2187"
                    },
                    {
                        "id": "e9cc065f-b99a-4d59-9bc3-8ddaa5a6706b"
                    }
                ],
                "categories": [
                    {
                        "id": "01e080b327e9483dbdf9853dbcb687ff"
                    }
                ],
                "tags": [
                    {
                        "tag": "ticket"
                    }
                ]
            }
        },
        "v1AllocationFilters": {
            "type": "object",
            "title": "Object definition for Allocation Filters",
            "properties": {
                "expenseAllocationFilters": {
                    "type": "array",
                    "title": "List of Expense Allocation Filters in Business Budget",
                    "items": {
                        "$ref": "#/definitions/v1AllocationFilter"
                    }
                },
                "incomeAllocationFilters": {
                    "type": "array",
                    "title": "List of Income Allocation Filters in Business Budget",
                    "items": {
                        "$ref": "#/definitions/v1AllocationFilter"
                    }
                }
            },
            "example": {
                "expense_allocation_filters": [
                    {
                        "accounts": [
                            {
                                "id": "6cfaefb5-12e1-4b2a-a74e-204bf77a2187"
                            },
                            {
                                "id": "e9cc065f-b99a-4d59-9bc3-8ddaa5a6706b"
                            }
                        ],
                        "categories": [
                            {
                                "id": "01e080b327e9483dbdf9853dbcb687ff"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "ticket"
                            }
                        ]
                    }
                ],
                "income_allocation_filters": []
            }
        },
        "v1AmountSummary": {
            "type": "object",
            "required": [
                "min",
                "max",
                "mean",
                "median",
                "total"
            ],
            "properties": {
                "max": {
                    "description": "The maximum expense amount for the summary period.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "mean": {
                    "description": "The mean expense amount for the summary period.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "median": {
                    "description": "The median expense amount for the summary period.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "min": {
                    "description": "The minimum expense amount for the summary period.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "total": {
                    "description": "The total expense amount for the summary period.",
                    "$ref": "#/definitions/typeExactNumber"
                }
            },
            "example": {
                "max": {
                    "scale": "1",
                    "unscaledValue": "-260000"
                },
                "mean": {
                    "scale": "1",
                    "unscaledValue": "-250000"
                },
                "median": {
                    "scale": "1",
                    "unscaledValue": "-250000"
                },
                "min": {
                    "scale": "1",
                    "unscaledValue": "-240000"
                },
                "total": {
                    "scale": "1",
                    "unscaledValue": "-1000000"
                }
            }
        },
        "v1AtmWithdrawals": {
            "type": "object",
            "required": [
                "sumOneWeek",
                "sumOneMonth",
                "sumThreeMonths",
                "sumSixMonths",
                "sumNineMonths",
                "sumTwelveMonths",
                "sumTotal"
            ],
            "properties": {
                "atmExpensesRatioNineMonths": {
                    "description": "The ratio between the sum of atm withdrawals to total expenses within the time period. Omitted if no expenses were found.",
                    "type": "number",
                    "format": "float"
                },
                "atmExpensesRatioOneMonth": {
                    "description": "The ratio between the sum of atm withdrawals to total expenses within the time period. Omitted if no expenses were found.",
                    "type": "number",
                    "format": "float"
                },
                "atmExpensesRatioOneWeek": {
                    "description": "The ratio between the sum of atm withdrawals to total expenses within the time period. Omitted if no expenses were found.",
                    "type": "number",
                    "format": "float"
                },
                "atmExpensesRatioSixMonths": {
                    "description": "The ratio between the sum of atm withdrawals to total expenses within the time period. Omitted if no expenses were found.",
                    "type": "number",
                    "format": "float"
                },
                "atmExpensesRatioThreeMonths": {
                    "description": "The ratio between the sum of atm withdrawals to total expenses within the time period. Omitted if no expenses were found.",
                    "type": "number",
                    "format": "float"
                },
                "atmExpensesRatioTotal": {
                    "description": "The ratio between the sum of atm withdrawals to total expenses within the time period. Omitted if no expenses were found.",
                    "type": "number",
                    "format": "float"
                },
                "atmExpensesRatioTwelveMonths": {
                    "description": "The ratio between the sum of atm withdrawals to total expenses within the time period. Omitted if no expenses were found.",
                    "type": "number",
                    "format": "float"
                },
                "sumNineMonths": {
                    "description": "The sum of all atm withdrawals within the time period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOneMonth": {
                    "description": "The sum of all atm withdrawals within the time period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOneWeek": {
                    "description": "The sum of all atm withdrawals within the time period.",
                    "type": "number",
                    "format": "float"
                },
                "sumSixMonths": {
                    "description": "The sum of all atm withdrawals within the time period.",
                    "type": "number",
                    "format": "float"
                },
                "sumThreeMonths": {
                    "description": "The sum of all atm withdrawals within the time period.",
                    "type": "number",
                    "format": "float"
                },
                "sumTotal": {
                    "description": "The sum of all atm withdrawals within the time period.",
                    "type": "number",
                    "format": "float"
                },
                "sumTwelveMonths": {
                    "description": "The sum of all atm withdrawals within the time period.",
                    "type": "number",
                    "format": "float"
                }
            },
            "example": {
                "atmExpensesRatioNineMonths": 0.0141203608,
                "atmExpensesRatioSixMonths": 0.0141203608,
                "atmExpensesRatioTotal": 0.013267884,
                "atmExpensesRatioTwelveMonths": 0.0141420234,
                "sumNineMonths": 270,
                "sumOneMonth": 0,
                "sumOneWeek": 0,
                "sumSixMonths": 180,
                "sumThreeMonths": 0,
                "sumTotal": 590,
                "sumTwelveMonths": 590
            }
        },
        "v1BalanceStats": {
            "type": "object",
            "required": [
                "stdBalanceOneWeek",
                "stdBalanceOneMonth",
                "stdBalanceThreeMonths",
                "stdBalanceSixMonths",
                "stdBalanceNineMonths",
                "stdBalanceTwelveMonths",
                "stdBalanceTotal",
                "meanBalanceOneWeek",
                "meanBalanceOneMonth",
                "meanBalanceThreeMonths",
                "meanBalanceSixMonths",
                "meanBalanceNineMonths",
                "meanBalanceTwelveMonths",
                "meanBalanceTotal",
                "maxBalanceOneWeek",
                "maxBalanceOneMonth",
                "maxBalanceThreeMonths",
                "maxBalanceSixMonths",
                "maxBalanceNine",
                "maxBalanceTwelveMonths",
                "maxBalanceTotal",
                "minBalanceOneWeek",
                "minBalanceOneMonth",
                "minBalanceThreeMonths",
                "minBalanceSixMonths",
                "minBalanceNineMonths",
                "minBalanceTwelveMonths",
                "minBalanceTotal",
                "lastBalance",
                "firstBalance",
                "changeInFirstLastBalance"
            ],
            "properties": {
                "changeInFirstLastBalance": {
                    "description": "The difference between last balance and first balance.",
                    "type": "number",
                    "format": "float"
                },
                "firstBalance": {
                    "description": "The total balance at the first day of transactions.",
                    "type": "number",
                    "format": "float"
                },
                "lastBalance": {
                    "description": "The total balance on the last day of transactions.",
                    "type": "number",
                    "format": "float"
                },
                "maxBalanceNineMonths": {
                    "description": "The maximum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxBalanceOneMonth": {
                    "description": "The maximum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxBalanceOneWeek": {
                    "description": "The maximum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxBalanceSixMonths": {
                    "description": "The maximum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxBalanceThreeMonths": {
                    "description": "The maximum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxBalanceTotal": {
                    "description": "The maximum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxBalanceTwelveMonths": {
                    "description": "The maximum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanBalanceNineMonths": {
                    "description": "The mean balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanBalanceOneMonth": {
                    "description": "The mean balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanBalanceOneWeek": {
                    "description": "The mean balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanBalanceSixMonths": {
                    "description": "The mean balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanBalanceThreeMonths": {
                    "description": "The mean balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanBalanceTotal": {
                    "description": "The mean balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanBalanceTwelveMonths": {
                    "description": "The mean balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "minBalanceNineMonths": {
                    "description": "The minimum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "minBalanceOneMonth": {
                    "description": "The minimum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "minBalanceOneWeek": {
                    "description": "The minimum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "minBalanceSixMonths": {
                    "description": "The minimum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "minBalanceThreeMonths": {
                    "description": "The minimum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "minBalanceTotal": {
                    "description": "The minimum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "minBalanceTwelveMonths": {
                    "description": "The minimum balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "stdBalanceNineMonths": {
                    "description": "The standard deviation of the balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "stdBalanceOneMonth": {
                    "description": "The standard deviation of the balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "stdBalanceOneWeek": {
                    "description": "The standard deviation of the balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "stdBalanceSixMonths": {
                    "description": "The standard deviation of the balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "stdBalanceThreeMonths": {
                    "description": "The standard deviation of the balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "stdBalanceTotal": {
                    "description": "The standard deviation of the balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "stdBalanceTwelveMonths": {
                    "description": "The standard deviation of the balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                }
            },
            "example": {
                "changeInFirstLastBalance": 47184.9219,
                "firstBalance": -5599.4,
                "lastBalance": 41585.5195,
                "maxBalanceNineMonths": 47477.3203,
                "maxBalanceOneMonth": 41585.5195,
                "maxBalanceOneWeek": 41585.5195,
                "maxBalanceSixMonths": 47477.3203,
                "maxBalanceThreeMonths": 41585.5195,
                "maxBalanceTotal": 47477.3203,
                "maxBalanceTwelveMonths": 47477.3203,
                "meanBalanceNineMonths": 40690.6445,
                "meanBalanceOneMonth": 41585.5195,
                "meanBalanceOneWeek": 41585.5195,
                "meanBalanceSixMonths": 41690.6445,
                "meanBalanceThreeMonths": 41585.5195,
                "meanBalanceTotal": 20234.1152,
                "meanBalanceTwelveMonths": 22768.9355,
                "minBalanceNineMonths": 35178.4219,
                "minBalanceOneMonth": 41585.5195,
                "minBalanceOneWeek": 41585.5195,
                "minBalanceSixMonths": 35178.4219,
                "minBalanceThreeMonths": 41585.5195,
                "minBalanceTotal": -11994.6797,
                "minBalanceTwelveMonths": -11994.6797,
                "stdBalanceNineMonths": 1064.611,
                "stdBalanceOneMonth": 700.401,
                "stdBalanceOneWeek": 0,
                "stdBalanceSixMonths": 1964.68311,
                "stdBalanceThreeMonths": 731.316,
                "stdBalanceTotal": 23408.127,
                "stdBalanceTwelveMonths": 22955.7441
            }
        },
        "v1Balances": {
            "type": "object",
            "properties": {
                "available": {
                    "title": "AvailableBalance at the end of the period",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "projected": {
                    "title": "ProjectedBalance at the end of the period",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                }
            }
        },
        "v1BudgetRecurrence": {
            "type": "object",
            "title": "Enum definition of Budget Recurrence. Describes possible values",
            "properties": {
                "end": {
                    "type": "string",
                    "title": "Business Budget Recurrence End date (inclusive). Accepted date format is `yyyy-mm-dd`"
                },
                "frequency": {
                    "title": "Business Budget Recurrence Frequency",
                    "$ref": "#/definitions/v1BudgetRecurrenceFrequency"
                },
                "id": {
                    "type": "string",
                    "title": "Business Budget Recurrence Group ID. This field is UUID",
                    "readOnly": true
                },
                "start": {
                    "type": "string",
                    "title": "Business Budget Recurrence Start date (inclusive). Accepted date format is `yyyy-mm-dd`"
                }
            }
        },
        "v1BudgetRecurrenceFrequency": {
            "description": "- UNKNOWN_RECURRENCE_FREQUENCY: Default value for Business Budget Recurrence Frequency\n - ONE_OFF: One Off Business Budget Recurrence Frequency allows to create only __one__ Business Budget\n - WEEKLY: Weekly Business Budget Recurrence Frequency allows to create Recurring Business Budgets for every __Week__ in a given period.\nBusiness Budgets will be generated every __Week__ starting on _start_ date until _end_ date.\nEach __Week__ starts on the same __Weekday__ as weekday for start date (regardless of a start day of __Week__). Business Budgets are filled until\nBusiness Budget _end_ date is __AFTER__ Recurrence _end_ date.\n\nExample: Recurring Weekly budget starting 2022-01-11 (Tue), and ending 2022-01-23 (Sun) will contain following budgets:\n2022-01-11T00:00:00 (Tue) - 2022-01-17T23:59:59 (Mon),\n2022-01-18T00:00:00 (Tue) - 2022-01-24T23:59:59 (Mon)\n - MONTHLY: Monthly Business Budget Recurrence Frequency allows to create Recurring Business Budgets for every __Month__ in a given period.\nBusiness Budgets will be generated every __Month__ starting on _start_ date until _end_ date.\nEach __Month__ starts on the same __Day__ as day of the month for start date. Business Budgets are filled until\nBusiness Budget _end_ date is __AFTER__ Recurrence _end_ date.\nExample: Recurring Monthly budget starting 2022-01-11, and ending 2022-03-23 will contain following budgets:\n2022-01-11T00:00:00 - 2022-02-10T23:59:59,\n2022-02-11T00:00:00 - 2022-03-10T23:59:59,\n2022-03-11T00:00:00 - 2022-04-10T23:59:59,\n - QUARTERLY: Quarterly Business Budget Recurrence Frequency allows to create Recurring Business Budgets for every __Quarter__ in a given period.\nBusiness Budgets will be generated every __Quarter__ starting on _start_ date until _end_ date.\nEach __Quarter__ starts on the same __Day__ as day of the month for start date. Business Budgets are filled until\nBusiness Budget _end_ date is __AFTER__ Recurrence _end_ date.\nExample: Recurring Quarterly budget starting 2022-01-11, and ending 2022-09-23 will contain following budgets:\n2022-01-11T00:00:00 - 2022-04-10T23:59:59,\n2022-04-11T00:00:00 - 2022-07-10T23:59:59,\n2022-07-11T00:00:00 - 2022-10-10T23:59:59\n - YEARLY: Yearly Business Budget Recurrence Frequency allows to create Recurring Business Budgets for every __Year__ in a given period.\nBusiness Budgets will be generated every __Year__ starting on _start_ date until _end_ date.\nEach __Year__ starts on the same __Day__ and __Month__ as day and month for start date. Business Budgets are filled until\nBusiness Budget _end_ date is __AFTER__ Recurrence _end_ date.\nExample: Recurring Yearly budget starting 2022-01-11, and ending 2024-09-23 will contain following budgets:\n2022-01-11T00:00:00 - 2023-01-10T23:59:59,\n2023-01-11T00:00:00 - 2024-01-10T23:59:59,\n2024-01-11T00:00:00 - 2025-01-10T23:59:59",
            "type": "string",
            "title": "Enum definition of Budget Recurrence Frequency. Describes possible values",
            "default": "UNKNOWN_RECURRENCE_FREQUENCY",
            "enum": [
                "UNKNOWN_RECURRENCE_FREQUENCY",
                "ONE_OFF",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "YEARLY"
            ]
        },
        "v1BudgetType": {
            "description": "- UNKNOWN_BUDGET_TYPE: Default value for Business Budget Type\n - EXPENSE: Expense Business Budget Type accepts only __expense__ transactions as a progress towards Business Budget Target\n - INCOME: Income Business Budget Type accepts only __income__ transactions as a progress towards Business Budget Target\n - NET_RESULT: Net Result Business Budget Type accepts both __income__ and __expense__ transactions and\ncalculates progress towards Business Budget Target.\n\n__NOTE__: This is the only Business Budget Type that allows Target to be equal to _0_.",
            "type": "string",
            "title": "Enum definition of Budget Type. Describes possible values",
            "default": "UNKNOWN_BUDGET_TYPE",
            "enum": [
                "UNKNOWN_BUDGET_TYPE",
                "EXPENSE",
                "INCOME",
                "NET_RESULT"
            ]
        },
        "v1BulkPaymentRequest": {
            "description": "Parameters for the bulk payment to be created.",
            "type": "object",
            "required": [
                "payment_request_ids"
            ],
            "properties": {
                "id": {
                    "description": "The id of the bulk payment. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "paymentRequestIds": {
                    "description": "List of single payment ids. Bulk payment needs to have between 2 and 100 payment requests.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "example": {
                "id": "b022334965b34c8bb50074e33f2f643b",
                "paymentRequestIds": [
                    "4021be7088ee11ec8cc47b9807df655d",
                    "4895bed088ee11ec9acc497070f7f574"
                ]
            }
        },
        "v1BulkPaymentResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the bulk payment.",
                    "type": "string"
                },
                "paymentRequests": {
                    "description": "List of single payment details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1PaymentRequest"
                    }
                },
                "status": {
                    "description": "The status of the bulk payment.",
                    "$ref": "#/definitions/v1BulkPaymentStatusType"
                },
                "verificationStatus": {
                    "description": "Verification status for the bulk payment.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "example": {
                "id": "dc0cf17bf6fe43de9897a644a48e6005",
                "paymentRequests": [
                    {
                        "amount": 10,
                        "created": 1674158472000,
                        "currency": "SEK",
                        "destinations": [
                            {
                                "accountNumber": "33008808080808",
                                "type": "SE_PG"
                            }
                        ],
                        "executionDate": "2022-05-22",
                        "id": "18408f41163f4748b87da9b9a68b6df8",
                        "market": "SE",
                        "merchantId": "17697670-aed1-40d7-9084-daee87539f3d",
                        "paymentScheme": "PAYMENT_SCHEME_UNSPECIFIED",
                        "providerName": "handelsbanken-bankid",
                        "recipientName": "Test AB",
                        "remittanceInformation": {
                            "type": "OCR",
                            "value": "3245928392092"
                        },
                        "source": {
                            "accountNumber": "SE4550000000058398257466",
                            "type": "IBAN",
                            "uri": "iban://SE4550000000058398257466"
                        },
                        "sourceMessage": "Gym Equipment",
                        "status": "SENT",
                        "statusMessage": "Payment successfully initiated",
                        "updated": 1674220425783
                    },
                    {
                        "amount": 5.99,
                        "created": 1674158472000,
                        "currency": "SEK",
                        "destinations": [
                            {
                                "accountNumber": "32438808083311",
                                "type": "SE_PG"
                            }
                        ],
                        "executionDate": "2022-05-20",
                        "id": "ecad584cd7444494a88bfdc2eda875c6",
                        "market": "SE",
                        "merchantId": "17697670-aed1-40d7-9084-daee87539f3d",
                        "paymentScheme": "PAYMENT_SCHEME_UNSPECIFIED",
                        "providerName": "handelsbanken-bankid",
                        "recipientName": "Test AB",
                        "remittanceInformation": {
                            "type": "OCR",
                            "value": "5654928391123"
                        },
                        "source": {
                            "accountNumber": "SE4550000000058398257466",
                            "type": "IBAN",
                            "uri": "iban://SE4550000000058398257466"
                        },
                        "sourceMessage": "Payment for Electricity",
                        "status": "SENT",
                        "statusMessage": "Payment successfully initiated",
                        "updated": 1674220479791
                    }
                ],
                "status": "SENT"
            }
        },
        "v1BulkPaymentStatusType": {
            "description": " - BULK_PAYMENT_STATUS_TYPE_UNSPECIFIED: Status unspecified.\n - CREATED: Bulk payment created.\n - EXECUTING: Bulk payment execution started.\n - AWAITING_CREDENTIALS: Bulk payment is awaiting credentials.\n - SENT: Bulk payment has been sent to the bank.\n - CANCELLED: Bulk payment has been cancelled.\n - FAILED: Bulk payment has failed.\n - PARTIALLY_SENT: At least one payment within a bulk has not been sent to the bank.",
            "type": "string",
            "default": "BULK_PAYMENT_STATUS_TYPE_UNSPECIFIED",
            "enum": [
                "BULK_PAYMENT_STATUS_TYPE_UNSPECIFIED",
                "CREATED",
                "EXECUTING",
                "AWAITING_CREDENTIALS",
                "SENT",
                "CANCELLED",
                "FAILED",
                "PARTIALLY_SENT"
            ]
        },
        "v1BulkPaymentsView": {
            "description": " - BASIC: Shows only the list of single payment ids.\n - FULL: Shows all the single payment details and statuses.",
            "type": "string",
            "default": "BASIC",
            "enum": [
                "BASIC",
                "FULL"
            ]
        },
        "v1BusinessBudget": {
            "description": "Object definition for Business Budget",
            "type": "object",
            "title": "Object definition for Business Budget",
            "properties": {
                "allocationFilters": {
                    "title": "Business Budget Allocation Filters. For logic see [Allocation Filter Logic](/api#finance-management/business-budgets/create-business-budget/allocation-filter-logic)",
                    "$ref": "#/definitions/v1AllocationFilters"
                },
                "description": {
                    "type": "string",
                    "title": "Business Budget Description"
                },
                "id": {
                    "type": "string",
                    "title": "Business Budget ID. This field is UUID"
                },
                "period": {
                    "title": "Business Budget period",
                    "$ref": "#/definitions/v1Period"
                },
                "progress": {
                    "title": "Business Budget Progress to completion",
                    "$ref": "#/definitions/v1Progress",
                    "readOnly": true
                },
                "recurrence": {
                    "title": "Business Budget Recurrence definition",
                    "$ref": "#/definitions/v1BudgetRecurrence"
                },
                "targetAmount": {
                    "description": "Business Budget Target amount. Only transactions with currency matching target amount will be counted towards progress.\nIn case of an account having different currency, no progress will be calculated.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "title": {
                    "type": "string",
                    "title": "Business Budget Title"
                },
                "type": {
                    "title": "Business Budget Type",
                    "$ref": "#/definitions/v1BudgetType"
                }
            },
            "example": {
                "allocation_filters": {
                    "expense_allocation_filters": [
                        {
                            "accounts": [
                                {
                                    "id": "6cfaefb5-12e1-4b2a-a74e-204bf77a2187"
                                },
                                {
                                    "id": "e9cc065f-b99a-4d59-9bc3-8ddaa5a6706b"
                                }
                            ],
                            "categories": [
                                {
                                    "id": "01e080b327e9483dbdf9853dbcb687ff"
                                }
                            ],
                            "tags": [
                                {
                                    "tag": "ticket"
                                }
                            ]
                        }
                    ],
                    "income_allocation_filters": []
                },
                "description": "Expense Budget for spendings on transport",
                "id": "5a724ea2-4eca-419e-a049-d12c127e00e3",
                "period": {
                    "end": "2021-10-01",
                    "start": "2021-09-01"
                },
                "progress": {
                    "current_amount": {
                        "currency_code": "SEK",
                        "value": {
                            "scale": 0,
                            "unscaled_value": -500
                        }
                    },
                    "days_remaining": 15,
                    "status": "ON_TRACK"
                },
                "recurrence": {
                    "end": "2021-10-01",
                    "frequency": "ONE_OFF",
                    "id": "5a724ea2-4eca-419e-a049-d12c127e00e3",
                    "start": "2021-09-01"
                },
                "target_amount": {
                    "currency_code": "SEK",
                    "value": {
                        "scale": 0,
                        "unscaled_value": -1000
                    }
                },
                "title": "Business Trips",
                "type": "EXPENSE"
            }
        },
        "v1CalendarEvent": {
            "description": "The object that describes calendar event.",
            "type": "object",
            "required": [
                "dueDate",
                "eventAmount",
                "title"
            ],
            "properties": {
                "accountIds": {
                    "type": "array",
                    "title": "Ids of accounts which access to is required for a user to be able to view the event",
                    "items": {
                        "type": "string"
                    }
                },
                "actionIndicator": {
                    "title": "Flag for event that represents if any action is needed",
                    "$ref": "#/definitions/v1ActionIndicator",
                    "readOnly": true
                },
                "attachments": {
                    "type": "array",
                    "title": "List of attachments added to the event",
                    "items": {
                        "$ref": "#/definitions/v1CalendarEventAttachment"
                    },
                    "readOnly": true
                },
                "completed": {
                    "type": "boolean",
                    "title": "Flag indicating whether the event is completed",
                    "readOnly": true
                },
                "description": {
                    "type": "string",
                    "title": "Description of the event"
                },
                "dueDate": {
                    "type": "string",
                    "title": "Date of the event. ISO8601 format YYYY-MM-DD"
                },
                "eventAmount": {
                    "description": "Amount of the event with currency. All sub-parameters are required.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "id": {
                    "type": "string",
                    "title": "Id of the event (UUID)",
                    "readOnly": true
                },
                "reconciliationStatus": {
                    "title": "Status whether the event was over, fully, partially or not reconciled",
                    "$ref": "#/definitions/v1ReconciliationStatus",
                    "readOnly": true
                },
                "reconciliations": {
                    "type": "array",
                    "title": "Details of transactions reconciled with the event",
                    "items": {
                        "$ref": "#/definitions/v1Reconciliation"
                    },
                    "readOnly": true
                },
                "recurringGroup": {
                    "title": "Indicator of what recurring group this event belongs to (if any)",
                    "$ref": "#/definitions/v1CalendarEventRecurringGroup",
                    "readOnly": true
                },
                "title": {
                    "type": "string",
                    "title": "Title of the event"
                }
            },
            "example": {
                "description": "Make sure everyone's invoice are paid ",
                "dueDate": "2022-07-14",
                "eventAmount": {
                    "currencyCode": "EUR",
                    "value": {
                        "scale": 2,
                        "unscaledValue": 1050
                    }
                },
                "title": "Pay invoice"
            }
        },
        "v1CalendarEventAttachment": {
            "description": "The object that describes calendar event attachment.",
            "type": "object",
            "required": [
                "url",
                "title"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "title": "Attachment ID (UUID)",
                    "readOnly": true
                },
                "title": {
                    "type": "string",
                    "title": "Attachment title"
                },
                "url": {
                    "type": "string",
                    "title": "Attachment url"
                }
            },
            "example": {
                "title": "attachment title",
                "url": "attachment url"
            }
        },
        "v1CalendarEventReconciliationDetails": {
            "description": "The response object that contains details about event reconciliations.",
            "type": "object",
            "properties": {
                "reconciliationAmount": {
                    "title": "Total amount of reconciled transactions with currency",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "reconciliations": {
                    "type": "array",
                    "title": "List of event's reconciliations",
                    "items": {
                        "$ref": "#/definitions/v1Reconciliation"
                    }
                }
            },
            "example": {
                "reconciliationAmount": {
                    "currencyCode": "EUR",
                    "value": {
                        "scale": "2",
                        "unscaledValue": "1500"
                    }
                },
                "reconciliations": [
                    {
                        "transactionId": "3c8067f4d8084e9687f7f9722e7909eb"
                    }
                ]
            }
        },
        "v1CalendarEventRecurringGroup": {
            "description": "The object that contains details about recurrence in calendar event recurring group request.",
            "type": "object",
            "required": [
                "rrulePattern"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "title": "Recurring Group ID (UUID)",
                    "readOnly": true
                },
                "rrulePattern": {
                    "description": "RFC-5545 Recurrence Rule pattern (RRULE) to apply to the recurrence of the event.",
                    "type": "string"
                }
            },
            "example": {
                "rrulePattern": "FREQ=DAILY;INTERVAL=10;COUNT=5"
            }
        },
        "v1CalendarSummary": {
            "description": "The object describing calendar summary entry.",
            "type": "object",
            "properties": {
                "numberOfEvents": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Number of events in the given period"
                },
                "numberOfEventsCompletedNotReconciledPastDueDate": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Number of events that have dueDate in the past and were marked as completed, but still not reconciled"
                },
                "numberOfEventsNotCompletedPastDueDate": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Number of events that have dueDate in the past, but still were not marked completed"
                },
                "numberOfEventsRequiringActionLater": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Number of events that don't require any action soon (more than 7days left to dueDate), i.e., completing or reconciliation with transaction"
                },
                "numberOfEventsRequiringCriticalAction": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Number of events require immediate action (between 0-3 days left to dueDate), i.e., completing or reconciliation with transaction"
                },
                "numberOfEventsRequiringNoAction": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Number of events that don't require any action, i.e., completing or reconciliation with transaction"
                },
                "numberOfEventsRequiringUrgentAction": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Number of events require an action in a near future (between 4-7 days left to dueDate), i.e., completing or reconciliation with transaction"
                },
                "period": {
                    "title": "Period description of the summary",
                    "$ref": "#/definitions/v1Period"
                }
            }
        },
        "v1CashFlow": {
            "type": "object",
            "properties": {
                "booked": {
                    "title": "comes from transactions service",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "expected": {
                    "title": "comes from future events in the Financial-calendar",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "pending": {
                    "title": "comes from transactions service",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                }
            }
        },
        "v1CashFlowStats": {
            "type": "object",
            "required": [
                "negativeOneWeek",
                "negativeOneMonth",
                "negativeThreeMonths",
                "negativeSixMonths",
                "negativeNineMonths",
                "negativeTwelveMonths",
                "negativeTotal",
                "positiveOneWeek",
                "positiveOneMonth",
                "positiveThreeMonths",
                "positiveSixMonths",
                "positiveNineMonths",
                "positiveTwelveMonths",
                "positiveTotal"
            ],
            "properties": {
                "negativeNineMonths": {
                    "description": "The total amount of outgoing transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "negativeOneMonth": {
                    "description": "The total amount of outgoing transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "negativeOneWeek": {
                    "description": "The total amount of outgoing transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "negativeSixMonths": {
                    "description": "The total amount of outgoing transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "negativeThreeMonths": {
                    "description": "The total amount of outgoing transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "negativeTotal": {
                    "description": "The total amount of outgoing transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "negativeTwelveMonths": {
                    "description": "The total amount of outgoing transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "positiveNegativeRatioNineMonths": {
                    "description": "The ratio of positive cash flow to negative cash flow. Omitted if no negative cash flow was found.",
                    "type": "number",
                    "format": "float"
                },
                "positiveNegativeRatioOneMonth": {
                    "description": "The ratio of positive cash flow to negative cash flow. Omitted if no negative cash flow was found.",
                    "type": "number",
                    "format": "float"
                },
                "positiveNegativeRatioOneWeek": {
                    "description": "The ratio of positive cash flow to negative cash flow. Omitted if no negative cash flow was found.",
                    "type": "number",
                    "format": "float"
                },
                "positiveNegativeRatioSixMonths": {
                    "description": "The ratio of positive cash flow to negative cash flow. Omitted if no negative cash flow was found.",
                    "type": "number",
                    "format": "float"
                },
                "positiveNegativeRatioThreeMonths": {
                    "description": "The ratio of positive cash flow to negative cash flow. Omitted if no negative cash flow was found.",
                    "type": "number",
                    "format": "float"
                },
                "positiveNegativeRatioTotal": {
                    "description": "The ratio of positive cash flow to negative cash flow. Omitted if no negative cash flow was found.",
                    "type": "number",
                    "format": "float"
                },
                "positiveNegativeRatioTwelveMonths": {
                    "description": "The ratio of positive cash flow to negative cash flow. Omitted if no negative cash flow was found.",
                    "type": "number",
                    "format": "float"
                },
                "positiveNineMonths": {
                    "description": "The total amount of outgoing transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "positiveOneMonth": {
                    "description": "The total amount of incoming transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "positiveOneWeek": {
                    "description": "The total amount of incoming transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "positiveSixMonths": {
                    "description": "The total amount of incoming transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "positiveThreeMonths": {
                    "description": "The total amount of incoming transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "positiveTotal": {
                    "description": "The total amount of incoming transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                },
                "positiveTwelveMonths": {
                    "description": "The total amount of incoming transactions within the defined time period, despite `dataAvailability` for that period. Own transfers excluded.",
                    "type": "number",
                    "format": "float"
                }
            },
            "example": {
                "negativeNineMonths": 15347.5498,
                "negativeOneMonth": 0,
                "negativeOneWeek": 0,
                "negativeSixMonths": 10347.5498,
                "negativeThreeMonths": 0,
                "negativeTotal": 40868.2812,
                "negativeTwelveMonths": 38119.6289,
                "positiveNegativeRatioNineMonths": 0.272825301,
                "positiveNegativeRatioSixMonths": 0.328580201,
                "positiveNegativeRatioTotal": 0.281391829,
                "positiveNegativeRatioTwelveMonths": 0.272825301,
                "positiveNineMonths": 3400,
                "positiveOneMonth": 0,
                "positiveOneWeek": 0,
                "positiveSixMonths": 3400,
                "positiveThreeMonths": 0,
                "positiveTotal": 11500,
                "positiveTwelveMonths": 10400
            }
        },
        "v1CashFlowSummary": {
            "type": "object",
            "properties": {
                "balances": {
                    "title": "Information related to balance",
                    "$ref": "#/definitions/v1Balances"
                },
                "cashFlows": {
                    "title": "Information about cash-flow",
                    "$ref": "#/definitions/v1CashFlows"
                },
                "period": {
                    "title": "Period description of the summary",
                    "$ref": "#/definitions/v1Period"
                }
            }
        },
        "v1CashFlows": {
            "type": "object",
            "properties": {
                "inbound": {
                    "title": "Inbound aggregated transactions info",
                    "$ref": "#/definitions/v1CashFlow"
                },
                "outbound": {
                    "title": "Outbound aggregated transactions info",
                    "$ref": "#/definitions/v1CashFlow"
                }
            }
        },
        "v1CategoryFilter": {
            "type": "object",
            "title": "Object definition for Category Filter",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "Category Id that will be used as a filter for transactions\nwhich will be counted towards Business Budget Progress"
                }
            },
            "example": {
                "id": "other.other"
            }
        },
        "v1Collections": {
            "type": "object",
            "required": [
                "numOneWeek",
                "numOneMonth",
                "numThreeMonths",
                "numSixMonths",
                "numNineMonths",
                "numTwelveMonths",
                "numTotal",
                "sumOneWeek",
                "sumOneMonth",
                "sumThreeMonths",
                "sumSixMonths",
                "sumNineMonths",
                "sumTwelveMonths",
                "sumTotal"
            ],
            "properties": {
                "numNineMonths": {
                    "description": "The number of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOneMonth": {
                    "description": "The number of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOneWeek": {
                    "description": "The number of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numSixMonths": {
                    "description": "The number of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numThreeMonths": {
                    "description": "The number of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTotal": {
                    "description": "The number of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTwelveMonths": {
                    "description": "The number of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "sumNineMonths": {
                    "description": "The sum of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOneMonth": {
                    "description": "The sum of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOneWeek": {
                    "description": "The sum of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumSixMonths": {
                    "description": "The sum of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumThreeMonths": {
                    "description": "The sum of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumTotal": {
                    "description": "The sum of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumTwelveMonths": {
                    "description": "The sum of payments to collection agencies within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                }
            },
            "example": {
                "numNineMonths": 5,
                "numOneMonth": 1,
                "numOneWeek": 1,
                "numSixMonths": 5,
                "numThreeMonths": 3,
                "numTotal": 5,
                "numTwelveMonths": 5,
                "sumNineMonths": 4292,
                "sumOneMonth": 2000,
                "sumOneWeek": 2000,
                "sumSixMonths": 4292,
                "sumThreeMonths": 2195,
                "sumTotal": 4292,
                "sumTwelveMonths": 4292
            }
        },
        "v1CreateExpenseCheckRequest": {
            "description": "The object to be sent for creating an expense check.",
            "type": "object",
            "properties": {
                "externalReference": {
                    "description": "Optional reference given by the customer to add information, such as UID, to the generated report. (Validation: allowed lowercase and uppercase letters, numbers and dashes. Max 50 characters in length).",
                    "type": "string"
                }
            },
            "example": {
                "externalReference": "ln-123456789"
            }
        },
        "v1CreateRiskInsightRequest": {
            "description": "The object to be sent for creating a risk insights report.",
            "type": "object",
            "properties": {
                "externalReference": {
                    "description": "Optional reference given by the customer to add information, such as UID, to the generated report. (Validation: allowed lowercase and uppercase letters, numbers and dashes. Max 50 characters in length).",
                    "type": "string"
                }
            },
            "example": {
                "externalReference": "ext-abc-123"
            }
        },
        "v1CreateRiskInsightResponse": {
            "description": "The object to sent back after creating a risk insights report.",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "The identifier of the risk insights report.",
                    "type": "string"
                }
            },
            "example": {
                "id": "61261abc769e42eebaae018bf34f1664"
            }
        },
        "v1CreateSessionResponse": {
            "type": "object",
            "properties": {
                "sessionId": {
                    "type": "string"
                }
            },
            "example": {
                "sessionId": "bc97e81618494735acba64de1cfb1cbf3bbe56516c8b4e8cb8d167243b8db62e"
            }
        },
        "v1Currency": {
            "description": " - CURRENCY_UNSPECIFIED: Default value. It should not occur.\n - SEK: Swedish krona.\n - GBP: Pound sterling.\n - EUR: Euro.",
            "type": "string",
            "default": "CURRENCY_UNSPECIFIED",
            "enum": [
                "CURRENCY_UNSPECIFIED",
                "SEK",
                "GBP",
                "EUR"
            ]
        },
        "v1DataAvailability": {
            "description": " - ONE_WEEK: One week of transaction data found.\n - ONE_MONTH: One month of transaction data found.\n - THREE_MONTHS: Three months of transaction data found.\n - SIX_MONTHS: Six months of transaction data found.\n - NINE_MONTHS: Nine months of transaction data found.\n - TWELVE_MONTHS: Twelve months of transaction data found.",
            "type": "string",
            "default": "ONE_WEEK",
            "enum": [
                "ONE_WEEK",
                "ONE_MONTH",
                "THREE_MONTHS",
                "SIX_MONTHS",
                "NINE_MONTHS",
                "TWELVE_MONTHS"
            ]
        },
        "v1EventRecurrenceType": {
            "description": "Enum definition of Event Recurrence Type. Describes possible values.\n\n - SINGLE: Default value, only selected event will be affected\n - ALL: All events in the series will be affected\n - FUTURE: Only selected event and future events in the series will be affected",
            "type": "string",
            "default": "SINGLE",
            "enum": [
                "SINGLE",
                "ALL",
                "FUTURE"
            ]
        },
        "v1ExpenseCategory": {
            "type": "object",
            "required": [
                "activeSpending",
                "recurring",
                "irregular",
                "summaries"
            ],
            "properties": {
                "activeSpending": {
                    "description": "User's current month-normalized spending for a given category.",
                    "$ref": "#/definitions/v1ActiveSpending"
                },
                "irregular": {
                    "description": "User's irregular expenses for a given category. Empty if there were no irregular expenses for the given category.",
                    "$ref": "#/definitions/v1IrregularExpenses"
                },
                "recurring": {
                    "description": "User's recurring expenses for a given category. Empty if there were no recurring expenses for the given category.",
                    "$ref": "#/definitions/v1RecurringExpenses"
                },
                "summaries": {
                    "description": "Field containing summary-statistics about a specific category.",
                    "$ref": "#/definitions/v1Summaries"
                }
            }
        },
        "v1ExpenseCheck": {
            "type": "object",
            "required": [
                "id",
                "engineVersion",
                "createdTime",
                "accounts",
                "appId",
                "userId",
                "expenses"
            ],
            "properties": {
                "accounts": {
                    "description": "Contains user's accounts data.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1Account"
                    }
                },
                "appId": {
                    "description": "The identifier of the app that has been created by the client in console and linked to the expense check product.",
                    "type": "string"
                },
                "createdTime": {
                    "description": "The creation time of the expense check report.",
                    "type": "string",
                    "format": "date-time"
                },
                "engineVersion": {
                    "description": "The version of the engine that generated the expense check report.",
                    "type": "string"
                },
                "expenses": {
                    "description": "List of expenses for the user.",
                    "$ref": "#/definitions/v1Expenses"
                },
                "externalReference": {
                    "description": "An external reference given by the client when creating the expense check report.",
                    "type": "string"
                },
                "id": {
                    "description": "The internal identifier of the expense check report.",
                    "type": "string"
                },
                "identity": {
                    "description": "User's identity information. Availability of this data depends on the chosen provider.",
                    "$ref": "#/definitions/v1Identity"
                },
                "summary": {
                    "description": "Expense summary.",
                    "$ref": "#/definitions/v1ExpenseSummary"
                },
                "userId": {
                    "description": "The internal identifier of the user linked to the request.",
                    "type": "string"
                }
            },
            "example": {
                "appId": "56a33be25eb9443fbb696f7c61eabd94",
                "createdTime": "2021-04-22T09:59:56.966Z",
                "engineVersion": "1.0.0",
                "externalReference": "ext-abc-123",
                "id": "a8efc70a24a5e4aed0f8d3e5380b01fd74fc9cd1",
                "userId": "9e0b1c0d74967147744f0d076e805dfb2df7b4b3"
            }
        },
        "v1ExpenseCheckSummary": {
            "type": "object",
            "required": [
                "id",
                "engineVersion",
                "createdTime",
                "appId",
                "userId"
            ],
            "properties": {
                "appId": {
                    "description": "The identifier of the app that has been created by the client in console and linked to the expense check product.",
                    "type": "string"
                },
                "createdTime": {
                    "description": "The creation time of the expense check.",
                    "type": "string",
                    "format": "date-time"
                },
                "engineVersion": {
                    "description": "The version of the engine that generated the expense check.",
                    "type": "string"
                },
                "externalReference": {
                    "description": "An external reference given by the client when creating the expense check.",
                    "type": "string"
                },
                "id": {
                    "description": "The internal identifier of the expense check.",
                    "type": "string"
                },
                "identity": {
                    "description": "User's identity information. Availability of this data depends on the chosen provider.",
                    "$ref": "#/definitions/v1Identity"
                },
                "userId": {
                    "description": "The internal identifier of the user linked to the request.",
                    "type": "string"
                }
            },
            "example": {
                "appId": "56a33be25eb9443fbb696f7c61eabd94",
                "createdTime": "2021-04-22T09:59:56.966Z",
                "engineVersion": "1.0.0",
                "externalReference": "ext-abc-123",
                "id": "a8efc70a24a5e4aed0f8d3e5380b01fd74fc9cd1",
                "userId": "9e0b1c0d74967147744f0d076e805dfb2df7b4b3"
            }
        },
        "v1ExpenseSummary": {
            "type": "object",
            "required": [
                "totalActiveSpending"
            ],
            "properties": {
                "totalActiveSpending": {
                    "description": "User's current month-normalized spending for a all expense categories.",
                    "$ref": "#/definitions/v1ActiveSpending"
                }
            }
        },
        "v1Expenses": {
            "type": "object",
            "required": [
                "housing",
                "insurance",
                "transportation",
                "utilities",
                "loans",
                "groceries",
                "subscriptionsAndIt",
                "other",
                "transfers",
                "savingsAndInvestments",
                "creditCards",
                "taxes",
                "healthcare",
                "childRelated",
                "collections",
                "summaries"
            ],
            "properties": {
                "childRelated": {
                    "description": "Expenses related to daycare or education as well as alimony.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "collections": {
                    "description": "Expenses related to debt collection, both private and public.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "creditCards": {
                    "description": "Credit card payments.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "groceries": {
                    "description": "Purchases at grocery stores.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "healthcare": {
                    "description": "Healthcare expenses, such as pharmaceutical products, optician tests, or medical consultations (health or dental).",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "housing": {
                    "description": "Housing expenses, including mortgage amortization, mortgage interest, housing cooperative, as well as rent payments.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "insurance": {
                    "description": "Insurance expenses for all types of insurance as well as union payments.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "loans": {
                    "description": "Loan payments, excluding mortgages.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "other": {
                    "description": "Expenses that do not fit into any of the other categories.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "savingsAndInvestments": {
                    "description": "Recurring transfers to savings accounts as well as investment platforms.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "subscriptionsAndIt": {
                    "description": "Subscription expenses such as streaming services, telephone bills, etc.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "taxes": {
                    "description": "Tax related expenses i.e property tax, wealth tax stemming from specified transactions or a payment to tax authorities etc.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "transfers": {
                    "description": "Recurring transfers to internal or external (but private) bank accounts.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "transportation": {
                    "description": "Transportation costs such as public transport, petrol and car leasing agreements.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                },
                "utilities": {
                    "description": "Utility expenses for electricity, water, waste etc.",
                    "$ref": "#/definitions/v1ExpenseCategory"
                }
            }
        },
        "v1GamblingVsIncome": {
            "type": "object",
            "title": "gamblingVsIncome",
            "required": [
                "sumGamblingOneWeek",
                "sumGamblingOneMonth",
                "sumGamblingThreeMonths",
                "sumGamblingSixMonths",
                "sumGamblingNineMonths",
                "sumGamblingTwelveMonths",
                "sumGamblingTotal"
            ],
            "properties": {
                "gamblingIncomeRatioNineMonths": {
                    "description": "The ratio between the sum of gambling expenditure to the sum of all incoming amounts within the defined time period, despite `dataAvailability` for that period. Omitted if no income was found.",
                    "type": "number",
                    "format": "float"
                },
                "gamblingIncomeRatioOneMonth": {
                    "description": "The ratio between the sum of gambling expenditure to the sum of all incoming amounts within the defined time period, despite `dataAvailability` for that period. Omitted if no income was found.",
                    "type": "number",
                    "format": "float"
                },
                "gamblingIncomeRatioOneWeek": {
                    "description": "The ratio between the sum of gambling expenditure to the sum of all incoming amounts within the defined time period, despite `dataAvailability` for that period. Omitted if no income was found.",
                    "type": "number",
                    "format": "float"
                },
                "gamblingIncomeRatioSixMonths": {
                    "description": "The ratio between the sum of gambling expenditure to the sum of all incoming amounts within the defined time period, despite `dataAvailability` for that period. Omitted if no income was found.",
                    "type": "number",
                    "format": "float"
                },
                "gamblingIncomeRatioThreeMonths": {
                    "description": "The ratio between the sum of gambling expenditure to the sum of all incoming amounts within the defined time period, despite `dataAvailability` for that period. Omitted if no income was found.",
                    "type": "number",
                    "format": "float"
                },
                "gamblingIncomeRatioTotal": {
                    "description": "The ratio between the sum of gambling expenditure to the sum of all incoming amounts within the defined time period, despite `dataAvailability` for that period. Omitted if no income was found.",
                    "type": "number",
                    "format": "float"
                },
                "gamblingIncomeRatioTwelveMonths": {
                    "description": "The ratio between the sum of gambling expenditure to the sum of all incoming amounts within the defined time period, despite `dataAvailability` for that period. Omitted if no income was found.",
                    "type": "number",
                    "format": "float"
                },
                "sumGamblingNineMonths": {
                    "description": "Total amount spent on gambling within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumGamblingOneMonth": {
                    "description": "Total amount spent on gambling within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumGamblingOneWeek": {
                    "description": "Total amount spent on gambling within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumGamblingSixMonths": {
                    "description": "Total amount spent on gambling within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumGamblingThreeMonths": {
                    "description": "Total amount spent on gambling within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumGamblingTotal": {
                    "description": "Total amount spent on gambling within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumGamblingTwelveMonths": {
                    "description": "Total amount spent on gambling within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                }
            },
            "example": {
                "gamblingIncomeRatioNineMonths": 0.2303454,
                "gamblingIncomeRatioSixMonths": 0.238403454,
                "gamblingIncomeRatioTotal": 0.145496532,
                "gamblingIncomeRatioTwelveMonths": 0.14666979,
                "sumGamblingNineMonths": 9420,
                "sumGamblingOneMonth": 0,
                "sumGamblingOneWeek": 0,
                "sumGamblingSixMonths": 4420,
                "sumGamblingThreeMonths": 0,
                "sumGamblingTotal": 12600,
                "sumGamblingTwelveMonths": 12530
            }
        },
        "v1GetSessionResponse": {
            "type": "object",
            "properties": {
                "session": {
                    "$ref": "#/definitions/v1SessionBody"
                }
            }
        },
        "v1Identity": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the user.",
                    "type": "string"
                },
                "ssn": {
                    "description": "User's social security number.",
                    "type": "string"
                }
            },
            "example": {
                "name": "John Doe",
                "ssn": "197601011234"
            }
        },
        "v1InitiateBulkPaymentRequest": {
            "type": "object",
            "properties": {
                "credentialsId": {
                    "description": "The credentials id.",
                    "type": "string"
                },
                "debtorAccount": {
                    "description": "The debtor account.",
                    "$ref": "#/definitions/v1AccountIdentifier"
                },
                "id": {
                    "description": "The id of the bulk payment.",
                    "type": "string",
                    "readOnly": true
                },
                "redirectUri": {
                    "description": "The redirect uri.",
                    "type": "string"
                },
                "selectedAuthenticationOptions": {
                    "description": "The selected authentication options.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1SelectedAuthenticationOption"
                    }
                },
                "userProfileLocale": {
                    "description": "The user profile locale.",
                    "type": "string"
                }
            }
        },
        "v1IrregularExpense": {
            "type": "object",
            "required": [
                "description",
                "count",
                "total",
                "mean"
            ],
            "properties": {
                "count": {
                    "description": "The number of occurrences of the expense.",
                    "type": "integer",
                    "format": "int32"
                },
                "description": {
                    "description": "The description of transactions in the expense.",
                    "type": "string"
                },
                "mean": {
                    "description": "The mean amount of irregular expenses.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "total": {
                    "description": "The total amount of irregular expenses.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                }
            },
            "example": {
                "count": "3",
                "description": "housing",
                "mean": {
                    "currencyCode": "SEK",
                    "value": {
                        "scale": "1",
                        "unscaledValue": "-5000"
                    }
                },
                "total": {
                    "currencyCode": "SEK",
                    "value": {
                        "scale": "1",
                        "unscaledValue": "-250000"
                    }
                }
            }
        },
        "v1IrregularExpenses": {
            "type": "object",
            "required": [
                "irregularExpenses"
            ],
            "properties": {
                "irregularExpenses": {
                    "description": "All Irregular expenses listed.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1IrregularExpense"
                    }
                }
            }
        },
        "v1ListBudgetHistoryResponse": {
            "type": "object",
            "title": "Response object for List Budget History endpoint",
            "properties": {
                "budgets": {
                    "type": "array",
                    "title": "List of Business Budgets",
                    "items": {
                        "$ref": "#/definitions/v1BusinessBudget"
                    }
                },
                "nextPageToken": {
                    "description": "Pagination Toke. Used to retrieve next page of results. Can be empty if no new pages exist.",
                    "type": "string"
                }
            },
            "example": {
                "budgets": [
                    {
                        "allocation_filters": {
                            "expense_allocation_filters": [
                                {
                                    "accounts": [
                                        {
                                            "id": "6cfaefb5-12e1-4b2a-a74e-204bf77a2187"
                                        },
                                        {
                                            "id": "e9cc065f-b99a-4d59-9bc3-8ddaa5a6706b"
                                        }
                                    ],
                                    "categories": [
                                        {
                                            "id": "01e080b327e9483dbdf9853dbcb687ff"
                                        }
                                    ],
                                    "tags": [
                                        {
                                            "tag": "ticket"
                                        }
                                    ]
                                }
                            ],
                            "income_allocation_filters": []
                        },
                        "description": "Expense Budget for spendings on transport",
                        "id": "5a724ea2-4eca-419e-a049-d12c127e00e3",
                        "period": {
                            "end": "2021-10-01",
                            "start": "2021-09-01"
                        },
                        "progress": {
                            "current_amount": {
                                "currency_code": "SEK",
                                "value": {
                                    "scale": 0,
                                    "unscaled_value": -500
                                }
                            },
                            "days_remaining": 15,
                            "status": "ON_TRACK"
                        },
                        "recurrence": {
                            "end": "2021-10-01",
                            "frequency": "ONE_OFF",
                            "id": "5a724ea2-4eca-419e-a049-d12c127e00e3",
                            "start": "2021-09-01"
                        },
                        "target_amount": {
                            "currency_code": "SEK",
                            "value": {
                                "scale": 0,
                                "unscaled_value": -1000
                            }
                        },
                        "title": "Business Trips",
                        "type": "EXPENSE"
                    }
                ],
                "next_page_token": "eyJQYWdlTnVtIjowLCJQYWdlU2l6ZSI6NTB9"
            }
        },
        "v1ListBudgetsResponse": {
            "type": "object",
            "title": "Response object for List Budgets endpoint",
            "properties": {
                "budgets": {
                    "type": "array",
                    "title": "List of Business Budgets",
                    "items": {
                        "$ref": "#/definitions/v1BusinessBudget"
                    }
                },
                "nextPageToken": {
                    "type": "string",
                    "title": "Pagination Token. Used to retrieve next page of results. Can be left empty if there are no other pages"
                }
            },
            "example": {
                "budgets": [
                    {
                        "allocation_filters": {
                            "expense_allocation_filters": [
                                {
                                    "accounts": [
                                        "6cfaefb5-12e1-4b2a-a74e-204bf77a2187",
                                        "e9cc065f-b99a-4d59-9bc3-8ddaa5a6706b"
                                    ],
                                    "categories": [
                                        "other.other"
                                    ],
                                    "tags": [
                                        "ticket"
                                    ]
                                }
                            ],
                            "income_allocation_filters": []
                        },
                        "description": "Expense Budget for spendings on transport",
                        "id": "5a724ea2-4eca-419e-a049-d12c127e00e3",
                        "period": {
                            "end": "2021-10-01",
                            "start": "2021-09-01"
                        },
                        "progress": {
                            "current_amount": {
                                "currency_code": "SEK",
                                "value": {
                                    "scale": 0,
                                    "unscaled_value": -500
                                }
                            },
                            "days_remaining": 15,
                            "status": "ON_TRACK"
                        },
                        "recurrence": {
                            "end": "2021-10-01",
                            "frequency": "ONE_OFF",
                            "start": "2021-09-01"
                        },
                        "target_amount": {
                            "currency_code": "SEK",
                            "value": {
                                "scale": 0,
                                "unscaled_value": -1000
                            }
                        },
                        "title": "Business Trips",
                        "type": "EXPENSE"
                    }
                ],
                "next_page_token": "eyJQYWdlTnVtIjowLCJQYWdlU2l6ZSI6NTB9"
            }
        },
        "v1ListCalendarEventsResponse": {
            "description": "The object used for response from listing calendar events.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "title": "List of events fulfilling given criteria",
                    "items": {
                        "$ref": "#/definitions/v1CalendarEvent"
                    }
                },
                "nextPageToken": {
                    "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                    "type": "string"
                }
            },
            "example": {
                "events": [
                    {
                        "actionIndicator": "NOT_COMPLETED_PAST_DUE_DATE",
                        "attachments": [],
                        "completed": false,
                        "description": "pay invoice to ACNE",
                        "dueDate": "2020-07-14",
                        "eventAmount": {
                            "currencyCode": "EUR",
                            "value": {
                                "scale": "2",
                                "unscaledValue": "1050"
                            }
                        },
                        "id": "3c8067f4d8084e9687f7f9722e7909eb",
                        "reconciliationStatus": "NONE",
                        "reconciliations": [
                            {
                                "transactionId": "881dbc41d07747c38c11cd9b88f1cc93"
                            }
                        ],
                        "title": "Pay invoice"
                    }
                ],
                "nextPageToken": "eyJQYWdlTnVtIjoxLCJQYWdlU2l6ZSI6MTAwfQ=="
            }
        },
        "v1ListCalendarSummariesResponse": {
            "description": "The object that contains response with list of calendar summaries.",
            "type": "object",
            "properties": {
                "summaries": {
                    "type": "array",
                    "title": "List of requested summaries",
                    "items": {
                        "$ref": "#/definitions/v1CalendarSummary"
                    }
                }
            },
            "example": {
                "summaries": [
                    {
                        "numberOfEvents": 10,
                        "numberOfEventsCompletedNotReconciledPastDueDate": 5,
                        "numberOfEventsNotCompletedPastDueDate": 5,
                        "numberOfEventsRequiringActionLater": 0,
                        "numberOfEventsRequiringCriticalAction": 0,
                        "numberOfEventsRequiringNoAction": 0,
                        "numberOfEventsRequiringUrgentAction": 0,
                        "period": {
                            "end": "2020-07-05T23:59:59.999999999Z",
                            "identity": "2020-W27",
                            "resolution": "WEEKLY",
                            "start": "2020-06-29T00:00:00Z"
                        }
                    }
                ]
            }
        },
        "v1ListCashFlowSummariesResponse": {
            "type": "object",
            "properties": {
                "nextPageToken": {
                    "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                    "type": "string"
                },
                "summaries": {
                    "type": "array",
                    "title": "List of requested summaries",
                    "items": {
                        "$ref": "#/definitions/v1CashFlowSummary"
                    }
                },
                "totalCashFlows": {
                    "title": "Summarised cashflow over all the periods in the requested interval",
                    "$ref": "#/definitions/v1CashFlows"
                }
            },
            "example": {
                "nextPageToken": "",
                "summaries": [
                    {
                        "balances": {
                            "available": {
                                "currencyCode": "SEK",
                                "value": {
                                    "scale": "0",
                                    "unscaledValue": "410000"
                                }
                            }
                        },
                        "cashFlows": {
                            "inbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            },
                            "outbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            }
                        },
                        "period": {
                            "end": "2021-06-06T23:59:59.999999999Z",
                            "identity": "2021-W22",
                            "resolution": "WEEKLY",
                            "start": "2021-05-31T00:00:00Z"
                        }
                    },
                    {
                        "balances": {
                            "available": {
                                "currencyCode": "SEK",
                                "value": {
                                    "scale": "0",
                                    "unscaledValue": "410000"
                                }
                            }
                        },
                        "cashFlows": {
                            "inbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            },
                            "outbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            }
                        },
                        "period": {
                            "end": "2021-06-13T23:59:59.999999999Z",
                            "identity": "2021-W23",
                            "resolution": "WEEKLY",
                            "start": "2021-06-07T00:00:00Z"
                        }
                    },
                    {
                        "balances": {
                            "available": {
                                "currencyCode": "SEK",
                                "value": {
                                    "scale": "0",
                                    "unscaledValue": "410000"
                                }
                            }
                        },
                        "cashFlows": {
                            "inbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            },
                            "outbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            }
                        },
                        "period": {
                            "end": "2021-06-20T23:59:59.999999999Z",
                            "identity": "2021-W24",
                            "resolution": "WEEKLY",
                            "start": "2021-06-14T00:00:00Z"
                        }
                    },
                    {
                        "balances": {
                            "available": {
                                "currencyCode": "SEK",
                                "value": {
                                    "scale": "0",
                                    "unscaledValue": "410000"
                                }
                            }
                        },
                        "cashFlows": {
                            "inbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            },
                            "outbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            }
                        },
                        "period": {
                            "end": "2021-06-27T23:59:59.999999999Z",
                            "identity": "2021-W25",
                            "resolution": "WEEKLY",
                            "start": "2021-06-21T00:00:00Z"
                        }
                    },
                    {
                        "balances": {
                            "available": {
                                "currencyCode": "SEK",
                                "value": {
                                    "scale": "0",
                                    "unscaledValue": "410000"
                                }
                            }
                        },
                        "cashFlows": {
                            "inbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            },
                            "outbound": {
                                "booked": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "expected": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                },
                                "pending": {
                                    "currencyCode": "SEK",
                                    "value": {
                                        "scale": "0",
                                        "unscaledValue": "0"
                                    }
                                }
                            }
                        },
                        "period": {
                            "end": "2021-07-04T23:59:59.999999999Z",
                            "identity": "2021-W26",
                            "resolution": "WEEKLY",
                            "start": "2021-06-28T00:00:00Z"
                        }
                    }
                ],
                "totalCashFlows": {
                    "inbound": {
                        "booked": {
                            "currencyCode": "SEK",
                            "value": {
                                "scale": "0",
                                "unscaledValue": "0"
                            }
                        },
                        "expected": {
                            "currencyCode": "SEK",
                            "value": {
                                "scale": "0",
                                "unscaledValue": "0"
                            }
                        },
                        "pending": {
                            "currencyCode": "SEK",
                            "value": {
                                "scale": "0",
                                "unscaledValue": "0"
                            }
                        }
                    },
                    "outbound": {
                        "booked": {
                            "currencyCode": "SEK",
                            "value": {
                                "scale": "0",
                                "unscaledValue": "0"
                            }
                        },
                        "expected": {
                            "currencyCode": "SEK",
                            "value": {
                                "scale": "0",
                                "unscaledValue": "0"
                            }
                        },
                        "pending": {
                            "currencyCode": "SEK",
                            "value": {
                                "scale": "0",
                                "unscaledValue": "0"
                            }
                        }
                    }
                }
            }
        },
        "v1ListExpenseChecksResponse": {
            "type": "object",
            "required": [
                "expenseChecks"
            ],
            "properties": {
                "expenseChecks": {
                    "description": "List of instances.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1ExpenseCheckSummary"
                    }
                },
                "nextPageToken": {
                    "description": "Pointer to the next page.",
                    "type": "string"
                },
                "prevPageToken": {
                    "description": "Pointer to the previous page.",
                    "type": "string"
                }
            },
            "example": {
                "nextPageToken": "MA=",
                "prevPageToken": "MA=="
            }
        },
        "v1ListMerchantsResponse": {
            "type": "object",
            "properties": {
                "merchants": {
                    "description": "List of merchants owned by the application.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1Merchant"
                    }
                },
                "nextPageToken": {
                    "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                    "type": "string"
                },
                "prevPageToken": {
                    "description": "Token to the previous page.",
                    "type": "string"
                },
                "totalSize": {
                    "description": "Total number of records.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "example": {
                "merchants": [
                    {
                        "appId": "125801f6-4657-436d-b317-8f0153705fb6",
                        "categoryCode": "5816",
                        "countryCode": "GB",
                        "external_id": "12d5c553-1558-454d-8981-6c2810138abe",
                        "id": "05d5c053-1558-454d-8981-6c2810138abe",
                        "name": "Example Inc.",
                        "organizationNumber": "123",
                        "status": "VERIFIED",
                        "url": "https://endpoint.example.com"
                    }
                ],
                "nextPageToken": "MA=",
                "prevPageToken": "MA==",
                "totalSize": "1"
            }
        },
        "v1ListReconciliationSuggestionsResponse": {
            "description": "The response object used for listing reconciliation suggestions.",
            "type": "object",
            "properties": {
                "reconciliationSuggestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1ReconciliationSuggestion"
                    }
                }
            },
            "example": {
                "reconciliation_suggestions": [
                    {
                        "transaction_id": "3c8067f4d8084e9687f7f9722e7909eb"
                    }
                ]
            }
        },
        "v1ListSettlementAccountRefundsResponse": {
            "type": "object",
            "required": [
                "refunds"
            ],
            "properties": {
                "nextPageToken": {
                    "description": "Token to the next page.",
                    "type": "string"
                },
                "prevPageToken": {
                    "description": "Token to the previous page.",
                    "type": "string"
                },
                "refunds": {
                    "description": "A list of refunds tied to an account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1SettlementAccountRefund"
                    }
                },
                "totalSize": {
                    "description": "Total number of refunds.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "example": {
                "nextPageToken": "MA=",
                "prevPageToken": "MA==",
                "refunds": [
                    {
                        "accountId": "161ec210-721f-4df5-b21c-f78a9d4c1545",
                        "amount": {
                            "currencyCode": "EUR",
                            "value": {
                                "scale": "2",
                                "unscaledValue": "5000"
                            }
                        },
                        "createdTime": "2022-07-14T14:01:53Z",
                        "id": "b58d313a-b778-4639-8e31-c9ffc35e2d01",
                        "merchantId": "e06e47f1-8c88-47ee-9415-a4cde72ae598",
                        "metadata": {
                            "key1": "value1",
                            "key2": "value2"
                        },
                        "reference": "Refund7ad0feabb4ab",
                        "scheme": "SEPA_INSTANT_CREDIT_TRANSFER",
                        "status": "COMPLETED",
                        "transactionId": "7ad0feab-bd55-449d-aa7e-b3d3b9c62550",
                        "updatedTime": "2022-07-14T14:08:53Z"
                    }
                ],
                "totalSize": "1"
            }
        },
        "v1ListSettlementAccountTransactionsResponse": {
            "type": "object",
            "required": [
                "transactions"
            ],
            "properties": {
                "nextPageToken": {
                    "description": "Token to the next page.",
                    "type": "string"
                },
                "prevPageToken": {
                    "description": "Token to the previous page.",
                    "type": "string"
                },
                "totalSize": {
                    "description": "Total number of transactions.",
                    "type": "integer",
                    "format": "int32"
                },
                "transactions": {
                    "description": "A list of transactions tied to an account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1SettlementAccountTransaction"
                    }
                }
            },
            "example": {
                "nextPageToken": "MA=",
                "prevPageToken": "MA==",
                "totalSize": "1",
                "transactions": [
                    {
                        "accountBalance": {
                            "currencyCode": "GBP",
                            "value": {
                                "scale": "2",
                                "unscaledValue": "400"
                            }
                        },
                        "amount": {
                            "currencyCode": "GBP",
                            "value": {
                                "scale": "2",
                                "unscaledValue": "12300"
                            }
                        },
                        "id": "817465f1-adbf-493b-bf7e-d167c39289ba",
                        "merchantId": "bef35277-ec45-4445-a153-05dbb42390df",
                        "metadata": {
                            "key1": "value1",
                            "key2": "value2"
                        },
                        "originalTransactionId": "",
                        "payee": {
                            "account": {
                                "identifier": "00000070438943",
                                "type": "SORT_CODE"
                            },
                            "name": "John Smith"
                        },
                        "payer": {
                            "account": {
                                "identifier": "00000070438943",
                                "type": "SORT_CODE"
                            },
                            "name": "John Smith"
                        },
                        "paymentRequestId": "a4d82dd0901411ed9f8787175ad2c3e2",
                        "reference": "Wdr7ad0feabb4ab",
                        "timestamp": "2021-07-14T14:01:53Z",
                        "type": "PAYIN"
                    }
                ]
            }
        },
        "v1ListSettlementAccountWithdrawalsResponse": {
            "type": "object",
            "required": [
                "withdrawals"
            ],
            "properties": {
                "nextPageToken": {
                    "description": "Token to the next page.",
                    "type": "string"
                },
                "prevPageToken": {
                    "description": "Token to the previous page.",
                    "type": "string"
                },
                "totalSize": {
                    "description": "Total number of withdrawals.",
                    "type": "integer",
                    "format": "int32"
                },
                "withdrawals": {
                    "description": "A list of withdrawals tied to an account.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1SettlementAccountWithdrawal"
                    }
                }
            },
            "example": {
                "nextPageToken": "MA=",
                "prevPageToken": "MA==",
                "totalSize": "1",
                "withdrawals": [
                    {
                        "accountId": "161ec210-721f-4df5-b21c-f78a9d4c1545",
                        "amount": {
                            "currencyCode": "EUR",
                            "value": {
                                "scale": "2",
                                "unscaledValue": "5000"
                            }
                        },
                        "createdTime": "2022-07-14T14:01:53Z",
                        "id": "b58d313a-b778-4639-8e31-c9ffc35e2d01",
                        "merchantId": "e06e47f1-8c88-47ee-9415-a4cde72ae598",
                        "metadata": {
                            "key1": "value1",
                            "key2": "value2"
                        },
                        "reference": "Wdr7ad0feabb4ab",
                        "scheme": "SEPA_INSTANT_CREDIT_TRANSFER",
                        "status": "COMPLETED",
                        "transactionId": "7ad0feab-bd55-449d-aa7e-b3d3b9c62550",
                        "updatedTime": "2022-07-14T14:09:53Z"
                    }
                ]
            }
        },
        "v1ListSettlementAccountsResponse": {
            "type": "object",
            "required": [
                "accounts"
            ],
            "properties": {
                "accounts": {
                    "description": "List of accounts owned by the merchant.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1SettlementAccount"
                    }
                },
                "nextPageToken": {
                    "description": "Token to the next page.",
                    "type": "string"
                },
                "prevPageToken": {
                    "description": "Token to the previous page.",
                    "type": "string"
                },
                "totalSize": {
                    "description": "Total number of accounts.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "example": {
                "accounts": [
                    {
                        "accountIdentifier": {
                            "identifier": "00000012345678",
                            "type": "SORT_CODE"
                        },
                        "availableBalance": {
                            "currencyCode": "GBP",
                            "value": {
                                "scale": "2",
                                "unscaledValue": "271100"
                            }
                        },
                        "balance": {
                            "currencyCode": "GBP",
                            "value": {
                                "scale": "2",
                                "unscaledValue": "276400"
                            }
                        },
                        "countryCode": "GB",
                        "currencyCode": "GBP",
                        "id": "744cf927-29cd-475e-9ef2-2b11951d3cc9",
                        "merchantId": "2c9ba5fd-cbdb-4ed5-84a4-01db5698f0d9",
                        "name": "Account name",
                        "payoutAccount": {
                            "currencyCode": "GBP",
                            "frequency": "MONTHLY",
                            "identifier": {
                                "identifier": "00000070438943",
                                "type": "SORT_CODE"
                            }
                        },
                        "reservedAmount": {
                            "scale": "1",
                            "unscaledValue": "100"
                        },
                        "status": "ENABLED",
                        "type": "APP_ACCOUNT"
                    }
                ],
                "nextPageToken": "MA=",
                "prevPageToken": "MA==",
                "totalSize": "1"
            }
        },
        "v1Loans": {
            "type": "object",
            "required": [
                "sumLoansOneWeek",
                "sumLoansOneMonth",
                "sumLoansThreeMonths",
                "sumLoansSixMonths",
                "sumLoansNineMonths",
                "sumLoansTwelveMonths",
                "sumLoansTotal",
                "sumRepaymentsOneWeek",
                "sumRepaymentsOneMonth",
                "sumRepaymentsThreeMonths",
                "sumRepaymentsSixMonths",
                "sumRepaymentsNineMonths",
                "sumRepaymentsTwelveMonths",
                "sumRepaymentsTotal",
                "numLoansOneWeek",
                "numLoansOneMonth",
                "numLoansThreeMonths",
                "numLoansSixMonths",
                "numLoansNineMonths",
                "numLoansTwelveMonths",
                "numLoansTotal",
                "numRepaymentsOneWeek",
                "numRepaymentsOneMonth",
                "numRepaymentsThreeMonths",
                "numRepaymentsSixMonths",
                "numRepaymentsNineMonths",
                "numRepaymentsTwelveMonths",
                "numRepaymentsTotal"
            ],
            "properties": {
                "numLoansNineMonths": {
                    "description": "The number of loans within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numLoansOneMonth": {
                    "description": "The number of loans within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numLoansOneWeek": {
                    "description": "The number of loans within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numLoansSixMonths": {
                    "description": "The number of loans within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numLoansThreeMonths": {
                    "description": "The number of loans within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numLoansTotal": {
                    "description": "The number of loans within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numLoansTwelveMonths": {
                    "description": "The number of loans within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numRepaymentsNineMonths": {
                    "description": "The number of repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numRepaymentsOneMonth": {
                    "description": "The number of repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numRepaymentsOneWeek": {
                    "description": "The number of repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numRepaymentsSixMonths": {
                    "description": "The number of repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numRepaymentsThreeMonths": {
                    "description": "The number of repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numRepaymentsTotal": {
                    "description": "The number of repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numRepaymentsTwelveMonths": {
                    "description": "The number of repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "repaymentLoanRatioNineMonths": {
                    "description": "The ratio between the sum of all repayments and the sum of all loans within the defined time period, despite `dataAvailability` for that period. Omitted if no loans were found.",
                    "type": "number",
                    "format": "float"
                },
                "repaymentLoanRatioOneMonth": {
                    "description": "The ratio between the sum of all repayments and the sum of all loans within the defined time period, despite `dataAvailability` for that period. Omitted if no loans were found.",
                    "type": "number",
                    "format": "float"
                },
                "repaymentLoanRatioOneWeek": {
                    "description": "The ratio between the sum of all repayments and the sum of all loans within the defined time period, despite `dataAvailability` for that period. Omitted if no loans were found.",
                    "type": "number",
                    "format": "float"
                },
                "repaymentLoanRatioSixMonths": {
                    "description": "The ratio between the sum of all repayments and the sum of all loans within the defined time period, despite `dataAvailability` for that period. Omitted if no loans were found.",
                    "type": "number",
                    "format": "float"
                },
                "repaymentLoanRatioThreeMonths": {
                    "description": "The ratio between the sum of all repayments and the sum of all loans within the defined time period, despite `dataAvailability` for that period. Omitted if no loans were found.",
                    "type": "number",
                    "format": "float"
                },
                "repaymentLoanRatioTotal": {
                    "description": "The ratio between the sum of all repayments and the sum of all loans within the defined time period, despite `dataAvailability` for that period. Omitted if no loans were found.",
                    "type": "number",
                    "format": "float"
                },
                "repaymentLoanRatioTwelveMonths": {
                    "description": "The ratio between the sum of all repayments and the sum of all loans within the defined time period, despite `dataAvailability` for that period. Omitted if no loans were found.",
                    "type": "number",
                    "format": "float"
                },
                "sumLoansNineMonths": {
                    "description": "The sum of all loans taken within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumLoansOneMonth": {
                    "description": "The sum of all loans taken within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumLoansOneWeek": {
                    "description": "The sum of all loans taken within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumLoansSixMonths": {
                    "description": "The sum of all loans taken within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumLoansThreeMonths": {
                    "description": "The sum of all loans taken within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumLoansTotal": {
                    "description": "The sum of all loans taken within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumLoansTwelveMonths": {
                    "description": "The sum of all loans taken within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumRepaymentsNineMonths": {
                    "description": "The sum of all repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumRepaymentsOneMonth": {
                    "description": "The sum of all repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumRepaymentsOneWeek": {
                    "description": "The sum of all repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumRepaymentsSixMonths": {
                    "description": "The sum of all repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumRepaymentsThreeMonths": {
                    "description": "The sum of all repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumRepaymentsTotal": {
                    "description": "The sum of all repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumRepaymentsTwelveMonths": {
                    "description": "The sum of all repayments within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                }
            },
            "example": {
                "numLoansNineMonths": 8,
                "numLoansOneMonth": 0,
                "numLoansOneWeek": 0,
                "numLoansSixMonths": 5,
                "numLoansThreeMonths": 0,
                "numLoansTotal": 16,
                "numLoansTwelveMonths": 15,
                "numRepaymentsNineMonths": 2,
                "numRepaymentsOneMonth": 0,
                "numRepaymentsOneWeek": 0,
                "numRepaymentsSixMonths": 2,
                "numRepaymentsThreeMonths": 0,
                "numRepaymentsTotal": 3,
                "numRepaymentsTwelveMonths": 3,
                "repaymentLoanRatioNineMonths": 0.158520475,
                "repaymentLoanRatioSixMonths": 0.158520475,
                "repaymentLoanRatioTotal": 0.0479360856,
                "repaymentLoanRatioTwelveMonths": 0.0479808077,
                "sumLoansNineMonths": 15140,
                "sumLoansOneMonth": 0,
                "sumLoansOneWeek": 0,
                "sumLoansSixMonths": 15140,
                "sumLoansThreeMonths": 0,
                "sumLoansTotal": 75100,
                "sumLoansTwelveMonths": 75030,
                "sumRepaymentsNineMonths": 3000,
                "sumRepaymentsOneMonth": 0,
                "sumRepaymentsOneWeek": 0,
                "sumRepaymentsSixMonths": 2400,
                "sumRepaymentsThreeMonths": 0,
                "sumRepaymentsTotal": 3600,
                "sumRepaymentsTwelveMonths": 3600
            }
        },
        "v1Merchant": {
            "description": "Information needed to register a merchant.",
            "type": "object",
            "required": [
                "name",
                "categoryCode",
                "countryCode",
                "organizationNumber",
                "url"
            ],
            "properties": {
                "appId": {
                    "description": "The id of the application associated with the merchant. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "categoryCode": {
                    "description": "The merchant category code (MCC) of the merchant, as a four-digit code (ISO 18245).",
                    "type": "string"
                },
                "countryCode": {
                    "description": "The merchant's domicile, the country in which the merchant is legally registered, as a two-letter code (ISO 3166-1 alpha-2).",
                    "type": "string"
                },
                "externalId": {
                    "description": "The external id of the merchant.",
                    "type": "string"
                },
                "id": {
                    "description": "The id of the merchant. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "name": {
                    "description": "The name of the merchant. Can only have alphanumerics plus full stop, hyphen, forward slash or ampersand.",
                    "type": "string"
                },
                "organizationNumber": {
                    "description": "The organization/company/registration number of the merchant. The identification number given to a company when it is registered or incorporated.",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the merchant. Output only.",
                    "$ref": "#/definitions/MerchantStatus",
                    "readOnly": true
                },
                "url": {
                    "description": "The url to the merchant's website without a path, e.g. https://example.com.",
                    "type": "string"
                }
            },
            "example": {
                "appId": "125801f6-4657-436d-b317-8f0153705fb6",
                "categoryCode": "5816",
                "countryCode": "GB",
                "external_id": "12d5c553-1558-454d-8981-6c2810138abe",
                "id": "05d5c053-1558-454d-8981-6c2810138abe",
                "name": "Example Inc.",
                "organizationNumber": "12345",
                "status": "VERIFIED",
                "url": "https://endpoint.example.com"
            }
        },
        "v1Overdrafts": {
            "type": "object",
            "required": [
                "numDaysInOverdraftOneWeek",
                "numDaysInOverdraftOneMonth",
                "numDaysInOverdraftThreeMonths",
                "numDaysInOverdraftSixMonths",
                "numDaysInOverdraftNineMonths",
                "numDaysInOverdraftTwelveMonths",
                "numDaysInOverdraftTotal",
                "numOneWeek",
                "numOneMonth",
                "numThreeMonths",
                "numSixMonths",
                "numNineMonths",
                "numTwelveMonths",
                "numTotal"
            ],
            "properties": {
                "numDaysInOverdraftNineMonths": {
                    "description": "The number of days where the end of day balance was negative on any account within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numDaysInOverdraftOneMonth": {
                    "description": "The number of days where the end of day balance was negative on any account within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numDaysInOverdraftOneWeek": {
                    "description": "The number of days where the end of day balance was negative on any account within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numDaysInOverdraftSixMonths": {
                    "description": "The number of days where the end of day balance was negative on any account within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numDaysInOverdraftThreeMonths": {
                    "description": "The number of days where the end of day balance was negative on any account within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numDaysInOverdraftTotal": {
                    "description": "The number of days where the end of day balance was negative on any account within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numDaysInOverdraftTwelveMonths": {
                    "description": "The number of days where the end of day balance was negative on any account within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numNineMonths": {
                    "description": "The number of transactions resulting in a negative balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOneMonth": {
                    "description": "The number of transactions resulting in a negative balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOneWeek": {
                    "description": "The number of transactions resulting in a negative balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numSixMonths": {
                    "description": "The number of transactions resulting in a negative balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numThreeMonths": {
                    "description": "The number of transactions resulting in a negative balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTotal": {
                    "description": "The number of transactions resulting in a negative balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTwelveMonths": {
                    "description": "The number of transactions resulting in a negative balance within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "example": {
                "numDaysInOverdraftNineMonths": 270,
                "numDaysInOverdraftOneMonth": 30,
                "numDaysInOverdraftOneWeek": 7,
                "numDaysInOverdraftSixMonths": 180,
                "numDaysInOverdraftThreeMonths": 90,
                "numDaysInOverdraftTotal": 400,
                "numDaysInOverdraftTwelveMonths": 365,
                "numNineMonths": 834,
                "numOneMonth": 0,
                "numOneWeek": 0,
                "numSixMonths": 303,
                "numThreeMonths": 0,
                "numTotal": 1375,
                "numTwelveMonths": 1228
            }
        },
        "v1PaymentRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "The amount of the payment.",
                    "type": "number",
                    "format": "float"
                },
                "created": {
                    "description": "The timestamp of creation of a payment request.",
                    "type": "string",
                    "format": "int64"
                },
                "currency": {
                    "description": "The currency for the payment request.",
                    "$ref": "#/definitions/v1Currency"
                },
                "destinations": {
                    "description": "A list of account numbers that can receive the payment. If one of the accounts belong to the same bank as the source account, it will be selected. Otherwise the first one from the list will be selected.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1AccountIdentifier"
                    }
                },
                "executionDate": {
                    "description": "The date defining when the payment will be executed by the bank. If no execution date is given, it will be executed as soon as possible. The date follows the ISO 8601 with format yyyy-MM-dd.",
                    "type": "string"
                },
                "id": {
                    "description": "Payment request id.",
                    "type": "string"
                },
                "market": {
                    "description": "The country code (in ISO 3166-1 alpha-2 format) of the primary market of the payer. Values: SE.",
                    "type": "string"
                },
                "merchantId": {
                    "description": "The id of the merchant tied to the payment.",
                    "type": "string"
                },
                "paymentScheme": {
                    "description": "The desired payment scheme that the ASPSP supports. Not mandatory for SE market.",
                    "$ref": "#/definitions/v1PaymentScheme"
                },
                "providerName": {
                    "description": "The provider (financial institution) that the payer's account belongs to.",
                    "type": "string"
                },
                "recipientName": {
                    "description": "The recipient name shown to the payer on signing payments. Maximum character count of 30.",
                    "type": "string"
                },
                "remittanceInformation": {
                    "description": "The structured or unstructured remittance information for the payment request. Use for reconciliation purposes.",
                    "$ref": "#/definitions/v1RemittanceInformation"
                },
                "source": {
                    "title": "The source object. Only returned if available from the bank response.'",
                    "$ref": "#/definitions/v1PaymentSource"
                },
                "sourceMessage": {
                    "description": "The transaction description that only appears on the payer (debtor) account for the payment. Use for providing a short description about the payment transaction for the payer. Maximum character count of 50 (Note that some banks might have a more strict limit).",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the single payment.",
                    "$ref": "#/definitions/PaymentRequestPaymentStatusType"
                },
                "statusMessage": {
                    "description": "A message explaining the current status of the payment. This field is populated only if status is one of the terminal statuses.",
                    "type": "string"
                },
                "updated": {
                    "description": "The timestamp of update of a payment request.",
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "v1PaymentScheme": {
            "description": " - PAYMENT_SCHEME_UNSPECIFIED: Default value. It should not occur.\n - SEPA_CREDIT_TRANSFER: SEPA Credit Transfer scheme.\n - SEPA_INSTANT_CREDIT_TRANSFER: SEPA Instant Credit Transfer scheme.",
            "type": "string",
            "default": "PAYMENT_SCHEME_UNSPECIFIED",
            "enum": [
                "PAYMENT_SCHEME_UNSPECIFIED",
                "SEPA_CREDIT_TRANSFER",
                "SEPA_INSTANT_CREDIT_TRANSFER"
            ]
        },
        "v1PaymentSource": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "description": "The source account number.",
                    "type": "string"
                },
                "type": {
                    "description": "The source account type.",
                    "type": "string"
                },
                "uri": {
                    "description": "The source account URI.",
                    "type": "string"
                }
            }
        },
        "v1PayoutAccount": {
            "type": "object",
            "required": [
                "identifier",
                "currency_code",
                "frequency"
            ],
            "properties": {
                "currencyCode": {
                    "description": "The currency code for the payout account.",
                    "type": "string"
                },
                "frequency": {
                    "description": "The frequency indicating how often a payout should be performed.",
                    "$ref": "#/definitions/PayoutAccountFrequency"
                },
                "identifier": {
                    "description": "The account identifier for the payout account.\nNote that EUR accounts only support the use of IBAN and GBP accounts only support SORT_CODE.",
                    "$ref": "#/definitions/paymentAccountIdentifier"
                }
            },
            "example": {
                "currencyCode": "GBP",
                "frequency": "MONTHLY",
                "identifier": {
                    "account": {
                        "identifier": "00000070438943",
                        "type": "SORT_CODE"
                    },
                    "name": "John Smith"
                }
            }
        },
        "v1PercentageStats": {
            "type": "object",
            "required": [
                "transactionsPercentage",
                "amountPercentage"
            ],
            "properties": {
                "amountPercentage": {
                    "description": "Percentage of user's total spending for the given expense category.",
                    "type": "number",
                    "format": "float"
                },
                "transactionsPercentage": {
                    "description": "Percentage of user's total transactions for the given expense category.",
                    "type": "number",
                    "format": "float"
                }
            },
            "example": {
                "amountPercentage": "0.5",
                "transactionsPercentage": "0.5"
            }
        },
        "v1Period": {
            "type": "object",
            "title": "Object definition for Period",
            "properties": {
                "end": {
                    "type": "string",
                    "title": "Business Budget Period End date (inclusive). Accepted date format is `yyyy-mm-dd`"
                },
                "start": {
                    "type": "string",
                    "title": "Business Budget Period Start date (inclusive). Accepted date format is `yyyy-mm-dd`"
                }
            },
            "example": {
                "end": "2021-10-01",
                "start": "2021-09-01"
            }
        },
        "v1Periodicity": {
            "description": " - WEEKLY: Weekly.\n - EVERY_TWO_WEEKS: Every two weeks.\n - MONTHLY: Monthly.\n - EVERY_TWO_MONTHS: Every two months.\n - QUARTERLY: Quarterly.\n - EVERY_SIX_MONTHS: Every six months.\n - ANNUALLY: Annually.",
            "type": "string",
            "default": "WEEKLY",
            "enum": [
                "WEEKLY",
                "EVERY_TWO_WEEKS",
                "MONTHLY",
                "EVERY_TWO_MONTHS",
                "QUARTERLY",
                "EVERY_SIX_MONTHS",
                "ANNUALLY"
            ]
        },
        "v1Progress": {
            "type": "object",
            "title": "Object definition for Progress",
            "properties": {
                "currentAmount": {
                    "title": "Current Progress Amount towards Business Budget Target",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount",
                    "readOnly": true
                },
                "daysRemaining": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Remaining Days until the end of a Business Budget",
                    "readOnly": true
                },
                "status": {
                    "title": "Status Indicator that defines current Business Budget state",
                    "$ref": "#/definitions/v1StatusIndicator",
                    "readOnly": true
                }
            },
            "example": {
                "current_amount": {
                    "currency_code": "SEK",
                    "value": {
                        "scale": 0,
                        "unscaled_value": -500
                    }
                },
                "days_remaining": 15,
                "status": "ON_TRACK"
            }
        },
        "v1Propagation": {
            "description": "- SINGLE: Propagation mode: _SINGLE_. Requested change will be applied only to the specified Business Budget\n - AFTER: Propagation mode: _AFTER_. Requested change will be applied to the specified Business Budget\nand all Business Budgets in the Recurrence that occur __after__ the requested one\n - ALL: Propagation mode: _ALL_. Requested change will be applied to all Business Budgets in Recurrence",
            "type": "string",
            "title": "Enum definition of Propagation. Describes possible values",
            "default": "SINGLE",
            "enum": [
                "SINGLE",
                "AFTER",
                "ALL"
            ]
        },
        "v1Reconciliation": {
            "description": "The object that contains necessary fields to create reconciliations.",
            "type": "object",
            "required": [
                "transactionId"
            ],
            "properties": {
                "transactionId": {
                    "type": "string",
                    "title": "Transaction ID (UUID)"
                }
            },
            "example": {
                "transaction_id": "3c8067f4d8084e9687f7f9722e7909eb"
            }
        },
        "v1ReconciliationStatus": {
            "description": "Enum definition of Reconciliation Status. Describes possible values.\n\n - NONE: Default value, event not reconciled\n - PARTIALLY: Event reconciled partially\n - FULLY: Event fully reconciled\n - OVER: Event over-reconciled",
            "type": "string",
            "default": "NONE",
            "enum": [
                "NONE",
                "PARTIALLY",
                "FULLY",
                "OVER"
            ]
        },
        "v1ReconciliationSuggestion": {
            "description": "The object describing reconciliation suggestion.",
            "type": "object",
            "properties": {
                "transactionId": {
                    "type": "string",
                    "title": "Id (UUID) of transaction suggested to reconcile"
                }
            }
        },
        "v1RecurringExpenseStream": {
            "type": "object",
            "required": [
                "id",
                "name",
                "firstSeenTime",
                "lastSeenTime",
                "periodicity",
                "transactions"
            ],
            "properties": {
                "firstSeenTime": {
                    "description": "Date when the first transaction in the stream occurred.",
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "description": "The ID of the recurring expense stream.",
                    "type": "string"
                },
                "lastSeenTime": {
                    "description": "Date when the latest transaction in the stream occurred.",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Name of the recurring expense stream.",
                    "type": "string"
                },
                "periodicity": {
                    "description": "Stream's periodicity.",
                    "$ref": "#/definitions/v1Periodicity"
                },
                "transactions": {
                    "description": "The list of transactions in the stream.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1Transaction"
                    }
                }
            },
            "example": {
                "firstSeenTime": "2020-01-25T10:00:00Z",
                "id": "a8efc70a24a5e4aed0f8d3e5380b01fd74fc9cd1",
                "lastSeenTime": "2020-09-25T10:00:00Z",
                "name": "Spotify",
                "periodicity": "MONTHLY"
            }
        },
        "v1RecurringExpenses": {
            "type": "object",
            "required": [
                "active",
                "inactive"
            ],
            "properties": {
                "active": {
                    "description": "Ongoing (currently active) recurring expense streams.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1RecurringExpenseStream"
                    }
                },
                "inactive": {
                    "description": "Recurring expense streams which do not show any recent activity. This is decided by looking at the time interval between payments and allowing for them to be up to a month late.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1RecurringExpenseStream"
                    }
                }
            }
        },
        "v1RemittanceInformation": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The remittance information type for the bulk payment.",
                    "$ref": "#/definitions/RemittanceInformationRemittanceInformationType"
                },
                "value": {
                    "description": "The structured or unstructured remittance information value for the bulk payment.",
                    "type": "string"
                }
            }
        },
        "v1Resolution": {
            "description": "Enum definition of Resolution. Describes possible values.\n\n - RESOLUTION_UNSPECIFIED: Default value, defines unspecified resolution\n - DAILY: Daily resolution\n - WEEKLY: Weekly resolution\n - MONTHLY: Monthly resolution\n - YEARLY: Yearly resolution",
            "type": "string",
            "default": "RESOLUTION_UNSPECIFIED",
            "enum": [
                "RESOLUTION_UNSPECIFIED",
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "YEARLY"
            ]
        },
        "v1RiskInsights": {
            "type": "object",
            "required": [
                "id",
                "createdTime",
                "currencyCode",
                "dataAvailability",
                "identity",
                "atmWithdrawals",
                "cashFlow",
                "collections",
                "gamblingVsIncome",
                "loans",
                "lowBalances",
                "transactionStats",
                "balances",
                "accountOverview",
                "accountActivity",
                "overdrafts",
                "highBalances"
            ],
            "properties": {
                "accountActivity": {
                    "description": "These features capture the activity of the end-user’s accounts and frequency of transactions. It includes the absolute number of in- and outgoing transactions paired with days since the first and last transaction.",
                    "$ref": "#/definitions/v1AccountActivity"
                },
                "accountOverview": {
                    "description": "Features detailing the number of unique holders, currencies and accounts types discovered across an end-user’s accounts. Note that non-market currencies are filtered out during analysis, leaving the number of unique currencies to always be one.",
                    "$ref": "#/definitions/v1AccountOverview"
                },
                "accounts": {
                    "description": "Contains user accounts data.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1Account"
                    }
                },
                "atmWithdrawals": {
                    "description": "These features capture ATM withdrawal behaviour of the end-user, meaning the sum of ATM withdrawals across different periods as well as ATM withdrawals in relation to total outflow.",
                    "$ref": "#/definitions/v1AtmWithdrawals"
                },
                "balances": {
                    "description": "These features provide an overview of the end-user total end-of-day balance across all accounts. We also are presenting features capturing max, min, mean and standard deviation balances across different periods.",
                    "$ref": "#/definitions/v1BalanceStats"
                },
                "cashFlow": {
                    "description": "These features capture the incoming and outgoing flows on the end-user’s accounts, respectively, across different periods. Also presented as a ratio between in- and outgoing flows where a value above 1 indicates a higher inflow and a value between 0 and 1 indicates a higher outflow.",
                    "$ref": "#/definitions/v1CashFlowStats"
                },
                "collections": {
                    "description": "These features aim to measure the financial reliability of the end-user by looking at payments to collection agencies based on the transaction activity. The transactions, if any, are presented as “number of transactions” and “sum of given transactions” across different periods.",
                    "$ref": "#/definitions/v1Collections"
                },
                "createdTime": {
                    "description": "The creation time of the risk insights report triggered by the specific TinkLink session and the following creation of the report.",
                    "type": "string",
                    "format": "date-time"
                },
                "currencyCode": {
                    "description": "The currency code which follows ISO-4217 standard.",
                    "type": "string"
                },
                "dataAvailability": {
                    "description": "A list of DataAvailability periods that correspond to the transaction history of the end user. The presence of a period in DataAvailability suggests complete data, implying a 0 value indicates no transactions and the 0 can be computed. Absence from this list suggests the 0 is due to insufficient data and a 0 would represent a calculation of “n.a.“.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1DataAvailability"
                    }
                },
                "externalReference": {
                    "description": "An external reference given by the client when creating the risk insights report.",
                    "type": "string"
                },
                "gamblingVsIncome": {
                    "description": "Tink’s purpose-built categorisation allows us to detect transactions going to gambling institutions. These transactions, via the given features, capture the proportion of gambling expenditure out of total incoming transactions (and not income in terms of salary but rather total inflow) and present such as a ratio as well as the absolute number of gambling related transactions across different periods.",
                    "$ref": "#/definitions/v1GamblingVsIncome"
                },
                "highBalances": {
                    "description": "Features detailing how many days during a given period the end-user has had a balance (see balances for more information) above a certain threshold (different per market) in terms of the total end-of-day balance summed across all accounts.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "id": {
                    "description": "The reference identifier of the Risk Insights report.",
                    "type": "string"
                },
                "identity": {
                    "description": "The end-user's identity information. The availability of this data differs between markets and depends on the chosen provider/bank. Tink is interested in providing such but it cannot be relied upon being available.",
                    "$ref": "#/definitions/v1Identity"
                },
                "loans": {
                    "description": "Features related to previously taken loans that we can identify via an inflow (a disbursement) to the accounts and  repayments (an installment or bullet repayment) of loans that also are found on the accounts. I.e. loans/repayments not found on the transaction statement will not be included/covered. We present these features across different periods looking at the number of loans and repayments as a sum and the number of transactions found (for loans and loan repayments respectively). We also present a ratio of repayments over loans in terms of amount across the same periods.",
                    "$ref": "#/definitions/v1Loans"
                },
                "lowBalances": {
                    "description": "The number of days the end-user has transactions that results in a balance (see balances for more information)  lower than a set amount (market dependent) in terms of the total end-of-day balance summed across all accounts.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "overdrafts": {
                    "description": "These features capture any existing and previous overdraft usage of the end-user and across different periods. Overdrafts are designed to capture where and when balance was below 0 and examines individual accounts (and checks the balance after each transaction, i.e. not the end-of-day balance).",
                    "$ref": "#/definitions/v1Overdrafts"
                },
                "transactionStats": {
                    "description": "These features provide an overview of the transactions made by the end-user. We dissect the number of transactions occurring as well as the sums (as well as splitting this in terms of in- and outflow). We also present the same features for unique transactions (defined as unique transaction descriptions). In this feature group we also present max and mean summaries across the transaction behaviour (in- and outgoing flow).",
                    "$ref": "#/definitions/v1TransactionStats"
                },
                "userId": {
                    "description": "The internal identifier of the user linked to the request.",
                    "type": "string"
                }
            },
            "example": {
                "createdTime": "2022-01-24T14:39:42.814204Z",
                "currencyCode": "SEK",
                "dataAvailability": [
                    "ONE_WEEK",
                    "ONE_MONTH"
                ],
                "externalReference": "ext-abc-123",
                "highBalances": {
                    "daysBalanceAbove1000OneMonth": 30,
                    "daysBalanceAbove1000OneWeek": 7,
                    "daysBalanceAbove1000SixMonths": 180,
                    "daysBalanceAbove1000ThreeMonths": 90,
                    "daysBalanceAbove1000Total": 250,
                    "daysBalanceAbove1000TwelveMonths": 250
                },
                "id": "60078e3872624db6b3fc57a9c10f75d7",
                "lowBalances": {
                    "daysBalanceBelow0OneMonth": 0,
                    "daysBalanceBelow0OneWeek": 0,
                    "daysBalanceBelow0SixMonths": 0,
                    "daysBalanceBelow0ThreeMonths": 0,
                    "daysBalanceBelow0Total": 150,
                    "daysBalanceBelow0TwelveMonths": 115,
                    "daysBalanceBelow7OneMonth": 0,
                    "daysBalanceBelow7OneWeek": 0,
                    "daysBalanceBelow7SixMonths": 0,
                    "daysBalanceBelow7ThreeMonths": 0,
                    "daysBalanceBelow7Total": 150,
                    "daysBalanceBelow7TwelveMonths": 115
                },
                "userId": "8de8c352022e4dda94137ad7fb75e3d2"
            }
        },
        "v1SelectedAuthenticationOption": {
            "description": "Temporary workaround, for usage of this proto in InitiateBulkPaymentRequest.",
            "type": "object",
            "properties": {
                "authenticationOptionDefinition": {
                    "description": "The authentication option definition.",
                    "type": "string"
                },
                "authenticationOptionsGroup": {
                    "description": "The authentication options group.",
                    "type": "string"
                },
                "fields": {
                    "description": "The fields.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1SessionBody": {
            "description": "The object contains the configuration for the Tink Link session.",
            "type": "object",
            "properties": {
                "externalReference": {
                    "description": "The external reference identifier to be included in the report when using report based products. Maximum length of 50 characters.",
                    "type": "string"
                },
                "merchantId": {
                    "description": "Used when fetching themes/configuration for given merchant.",
                    "type": "string",
                    "title": "The merchant id identifier indicates that Tink Link should load theme for this merchant and not for an app"
                },
                "personalIdentifier": {
                    "description": "The personal identifier to be pre-filled in username or social security number forms.",
                    "type": "string"
                },
                "sourceAccountNumber": {
                    "description": "The source account to be used in the payment flow (applicable for specific PSD2 providers).",
                    "type": "string"
                },
                "user": {
                    "description": "The user information to be filled in the beginning of the Tink Link flow to be used for User-Match functionality.",
                    "$ref": "#/definitions/v1User"
                }
            }
        },
        "v1SettlementAccount": {
            "description": "Parameters for the settlement account to be created.",
            "type": "object",
            "required": [
                "merchantId",
                "name",
                "currencyCode"
            ],
            "properties": {
                "accountIdentifier": {
                    "description": "The account identifier for the settlement account. Output only.\nNote that EUR accounts only support the use of IBAN and GBP accounts only support SORT_CODE.",
                    "$ref": "#/definitions/paymentAccountIdentifier",
                    "readOnly": true
                },
                "availableBalance": {
                    "description": "The available balance of the account. Output only.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount",
                    "readOnly": true
                },
                "balance": {
                    "description": "The balance of the account. Output only.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount",
                    "readOnly": true
                },
                "countryCode": {
                    "description": "The country code (ISO 3166-1 alpha-2) of the desired location for the account. Optional.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code of the account.",
                    "type": "string"
                },
                "id": {
                    "description": "The id of the account. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "merchantId": {
                    "description": "The merchant id tied to the account.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the account. It should be the name of the company/shop of which the transaction is intended to.",
                    "type": "string"
                },
                "payoutAccount": {
                    "description": "The payout account affiliated with the account.",
                    "$ref": "#/definitions/v1PayoutAccount"
                },
                "reservedAmount": {
                    "description": "The amount that will be reserved on the account for refunds and withdrawals.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "status": {
                    "description": "The status of the account. Output only.",
                    "$ref": "#/definitions/v1SettlementAccountStatus",
                    "readOnly": true
                },
                "type": {
                    "description": "The account type. Output only.",
                    "$ref": "#/definitions/v1SettlementAccountType",
                    "readOnly": true
                }
            },
            "example": {
                "accountIdentifier": {
                    "identifier": "00000012345678",
                    "type": "SORT_CODE"
                },
                "availableBalance": {
                    "currencyCode": "GBP",
                    "value": {
                        "scale": "2",
                        "unscaledValue": "271100"
                    }
                },
                "balance": {
                    "currencyCode": "GBP",
                    "value": {
                        "scale": "2",
                        "unscaledValue": "276400"
                    }
                },
                "countryCode": "GB",
                "currencyCode": "GBP",
                "id": "744cf927-29cd-475e-9ef2-2b11951d3cc9",
                "merchantId": "2c9ba5fd-cbdb-4ed5-84a4-01db5698f0d9",
                "name": "Account name",
                "payoutAccount": {
                    "currencyCode": "GBP",
                    "frequency": "MONTHLY",
                    "identifier": {
                        "identifier": "00000070438943",
                        "type": "SORT_CODE"
                    }
                },
                "reservedAmount": {
                    "scale": "1",
                    "unscaledValue": "100"
                },
                "status": "ENABLED",
                "type": "APP_ACCOUNT"
            }
        },
        "v1SettlementAccountPaymentRequest": {
            "description": "Parameters for the settlement account payment request to be created.",
            "type": "object",
            "required": [
                "merchantId",
                "amount",
                "market",
                "accountId"
            ],
            "properties": {
                "accountId": {
                    "description": "The id of the account to be used for this payment request.",
                    "type": "string"
                },
                "amount": {
                    "description": "The amount of the payment.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "id": {
                    "description": "The id of the settlement account payment request. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "market": {
                    "description": "The country code (ISO 3166-1 alpha-2) of the market for the payer.",
                    "type": "string"
                },
                "merchantId": {
                    "description": "The id of the merchant to affiliate the payment with.",
                    "type": "string"
                },
                "metadata": {
                    "description": "A key-value dictionary with custom metadata for the settlement account payment request. All keys and values must be strings. For privacy protection, it is not allowed to use this dictionary for storing personal data (e.g. names and addresses).",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "payeeName": {
                    "description": "Payee name to be used for payment.",
                    "type": "string"
                },
                "reference": {
                    "description": "Reference of the payment. Optional. The input in the request is up to 10-character long and will be added at the end to Tink generated 8-character long reference to be used as a payment reference. In the response full reference is returned.",
                    "type": "string"
                },
                "scheme": {
                    "description": "Scheme to be used for payment. Supported values are `SEPA_CREDIT_TRANSFER`, `SEPA_INSTANT_CREDIT_TRANSFER` for EURO countries and `FASTER_PAYMENTS`, `BACS`, `CHAPS` for UK (GBP).",
                    "$ref": "#/definitions/SettlementAccountPaymentRequestScheme"
                }
            },
            "example": {
                "accountId": "744cf927-29cd-475e-9ef2-2b11951d3cc9",
                "amount": {
                    "currencyCode": "GBP",
                    "value": {
                        "scale": "0",
                        "unscaledValue": "100"
                    }
                },
                "id": "b0223349-65b3-4c8b-b500-74e33f2f643b",
                "market": "GB",
                "merchantId": "2c9ba5fd-cbdb-4ed5-84a4-01db5698f0d9",
                "metadata": {
                    "key1": "value1",
                    "key2": "value2"
                },
                "payeeName": "Test AB"
            }
        },
        "v1SettlementAccountRefund": {
            "description": "Parameters for the settlement account refund to be created.\nUse of an `Idempotency-Key` header is required when making this request. The header value must be a non empty string.",
            "type": "object",
            "required": [
                "merchantId",
                "accountId",
                "transactionId",
                "amount",
                "reference"
            ],
            "properties": {
                "accountId": {
                    "description": "Id of the settlement account. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "amount": {
                    "description": "Amount to refund. Amount needs to be greater than or equal to 0.01 and less than or equal to transaction amount.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "createdTime": {
                    "description": "The date and time when the refund was initiated. Output only.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "id": {
                    "description": "Id of the refund. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "merchantId": {
                    "description": "Id of the merchant. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "metadata": {
                    "description": "A key-value dictionary with custom metadata for the refund. All keys and values must be strings. For privacy protection, it is not allowed to use this dictionary for storing personal data (e.g. names and addresses).",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "reference": {
                    "description": "External reference set by the merchant, must be between 6-18 characters long.",
                    "type": "string"
                },
                "scheme": {
                    "description": "Scheme to be used for the refund. Supported values are `SEPA_CREDIT_TRANSFER`, `SEPA_INSTANT_CREDIT_TRANSFER` for EURO countries and `FASTER_PAYMENTS`, `BACS`, `CHAPS` for UK (GBP).",
                    "$ref": "#/definitions/v1SettlementAccountRefundScheme"
                },
                "status": {
                    "description": "Status of the refund. Output only.",
                    "$ref": "#/definitions/v1SettlementAccountRefundStatus",
                    "readOnly": true
                },
                "transactionId": {
                    "description": "Id of the transaction to refund.",
                    "type": "string"
                },
                "updatedTime": {
                    "description": "The date and time when the refund was updated. Output only.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                }
            },
            "example": {
                "accountId": "161ec210-721f-4df5-b21c-f78a9d4c1545",
                "amount": {
                    "currencyCode": "EUR",
                    "value": {
                        "scale": "2",
                        "unscaledValue": "5000"
                    }
                },
                "createdTime": "2022-07-14T14:01:53Z",
                "id": "b58d313a-b778-4639-8e31-c9ffc35e2d01",
                "merchantId": "e06e47f1-8c88-47ee-9415-a4cde72ae598",
                "metadata": {
                    "key1": "value1",
                    "key2": "value2"
                },
                "reference": "Refund7ad0feabb4ab",
                "scheme": "SEPA_INSTANT_CREDIT_TRANSFER",
                "status": "COMPLETED",
                "transactionId": "7ad0feab-bd55-449d-aa7e-b3d3b9c62550",
                "updatedTime": "2022-07-14T14:08:53Z"
            }
        },
        "v1SettlementAccountRefundScheme": {
            "description": "Payment scheme.\n\n - SCHEME_UNSPECIFIED: Default unspecified scheme.\n - FASTER_PAYMENTS: Faster payments scheme.\n - SEPA_INSTANT_CREDIT_TRANSFER: SEPA Instant Credit Transfer scheme.\n - SEPA_CREDIT_TRANSFER: SEPA Credit Transfer scheme.\n - BACS: BACS scheme.\n - CHAPS: CHAPS scheme.",
            "type": "string",
            "default": "SCHEME_UNSPECIFIED",
            "enum": [
                "SCHEME_UNSPECIFIED",
                "FASTER_PAYMENTS",
                "SEPA_INSTANT_CREDIT_TRANSFER",
                "SEPA_CREDIT_TRANSFER",
                "BACS",
                "CHAPS"
            ]
        },
        "v1SettlementAccountRefundStatus": {
            "description": "Status of the refund.\n\n - PENDING: Default value.\n - COMPLETED: Refund was successful.\n - FAILED: Refund failed to complete.",
            "type": "string",
            "default": "PENDING",
            "enum": [
                "PENDING",
                "COMPLETED",
                "FAILED"
            ]
        },
        "v1SettlementAccountStatus": {
            "description": "- STATUS_UNSPECIFIED: Default unspecified status.\n - ENABLED: Indicating that the account is operating.\n - SUSPENDED: Indicating that the account was suspended.\n - TERMINATED: Indicating that the account was terminated.",
            "type": "string",
            "title": "Account status",
            "default": "STATUS_UNSPECIFIED",
            "enum": [
                "STATUS_UNSPECIFIED",
                "ENABLED",
                "SUSPENDED",
                "TERMINATED"
            ]
        },
        "v1SettlementAccountTransaction": {
            "type": "object",
            "properties": {
                "accountBalance": {
                    "description": "The balance of the account after the transaction was made.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "amount": {
                    "description": "The amount of the transaction.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "id": {
                    "description": "The id of the transaction.",
                    "type": "string"
                },
                "merchantId": {
                    "description": "The id of the merchant.",
                    "type": "string"
                },
                "metadata": {
                    "description": "A key-value dictionary with custom metadata for the transaction.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "originalTransactionId": {
                    "description": "The id of the original transaction.",
                    "type": "string"
                },
                "payee": {
                    "description": "Information about the payee.",
                    "$ref": "#/definitions/v1AccountDetails"
                },
                "payer": {
                    "description": "Information about the payer.",
                    "$ref": "#/definitions/v1AccountDetails"
                },
                "paymentRequestId": {
                    "description": "The id of the payment request which is affiliated with this transaction.",
                    "type": "string"
                },
                "reference": {
                    "description": "The transaction reference.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "The date and time the transaction was processed.",
                    "type": "string",
                    "format": "date-time"
                },
                "type": {
                    "description": "The type of the transaction.",
                    "$ref": "#/definitions/SettlementAccountTransactionTransactionType"
                }
            },
            "example": {
                "accountBalance": {
                    "currencyCode": "GBP",
                    "value": {
                        "scale": "2",
                        "unscaledValue": "400"
                    }
                },
                "amount": {
                    "currencyCode": "GBP",
                    "value": {
                        "scale": "2",
                        "unscaledValue": "12300"
                    }
                },
                "id": "817465f1-adbf-493b-bf7e-d167c39289ba",
                "merchantId": "bef35277-ec45-4445-a153-05dbb42390df",
                "metadata": {
                    "key1": "value1",
                    "key2": "value2"
                },
                "originalTransactionId": "",
                "payee": {
                    "account": {
                        "identifier": "00000070438943",
                        "type": "SORT_CODE"
                    },
                    "name": "John Smith"
                },
                "payer": {
                    "account": {
                        "identifier": "00000070438943",
                        "type": "SORT_CODE"
                    },
                    "name": "John Smith"
                },
                "paymentRequestId": "a4d82dd0901411ed9f8787175ad2c3e2",
                "reference": "Wdr7ad0feabb4ab",
                "timestamp": "2021-07-14T14:01:53Z",
                "type": "PAYIN"
            }
        },
        "v1SettlementAccountType": {
            "description": " - TYPE_UNSPECIFIED: Default unspecified account type.\n - APP_ACCOUNT: An individual account owned solely by a single merchant.\n - ACQUIRER_ACCOUNT: A managed account with a primary owner and additional merchants.",
            "type": "string",
            "default": "TYPE_UNSPECIFIED",
            "enum": [
                "TYPE_UNSPECIFIED",
                "APP_ACCOUNT",
                "ACQUIRER_ACCOUNT"
            ]
        },
        "v1SettlementAccountWithdrawal": {
            "description": "Parameters for the settlement account withdrawal to be created.\nUse of an `Idempotency-Key` header is required when making this request. The header value must be a non empty string.",
            "type": "object",
            "required": [
                "merchantId",
                "accountId",
                "transactionId",
                "amount",
                "reference"
            ],
            "properties": {
                "accountId": {
                    "description": "Id of the settlement account. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "amount": {
                    "description": "Amount to withdraw. Amount needs to be greater than or equal to 0.01 and less than or equal to available balance.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "createdTime": {
                    "description": "The date and time when the withdrawal was initiated. Output only.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "id": {
                    "description": "Id of the withdrawal. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "merchantId": {
                    "description": "Id of the merchant. Output only.",
                    "type": "string",
                    "readOnly": true
                },
                "metadata": {
                    "description": "A key-value dictionary with custom metadata for the withdrawal. All keys and values must be strings. For privacy protection, it is not allowed to use this dictionary for storing personal data (e.g. names and addresses).",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "reference": {
                    "description": "External reference set by the merchant, must be between 6-18 characters long.",
                    "type": "string"
                },
                "scheme": {
                    "description": "Scheme to be used for the withdrawal. Supported values are `SEPA_CREDIT_TRANSFER`, `SEPA_INSTANT_CREDIT_TRANSFER` for EURO countries and `FASTER_PAYMENTS`, `BACS`, `CHAPS` for UK (GBP).",
                    "$ref": "#/definitions/v1SettlementAccountWithdrawalScheme"
                },
                "status": {
                    "description": "Status of the withdrawal. Output only.",
                    "$ref": "#/definitions/v1SettlementAccountWithdrawalStatus",
                    "readOnly": true
                },
                "transactionId": {
                    "description": "Id of the transaction to determine payee.",
                    "type": "string"
                },
                "updatedTime": {
                    "description": "The date and time when the withdrawal was updated. Output only.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                }
            },
            "example": {
                "accountId": "161ec210-721f-4df5-b21c-f78a9d4c1545",
                "amount": {
                    "currencyCode": "EUR",
                    "value": {
                        "scale": "2",
                        "unscaledValue": "5000"
                    }
                },
                "createdTime": "2022-07-14T14:01:53Z",
                "id": "b58d313a-b778-4639-8e31-c9ffc35e2d01",
                "merchantId": "e06e47f1-8c88-47ee-9415-a4cde72ae598",
                "metadata": {
                    "key1": "value1",
                    "key2": "value2"
                },
                "reference": "Eup7ad0feabb4ab",
                "scheme": "SEPA_INSTANT_CREDIT_TRANSFER",
                "status": "COMPLETED",
                "transactionId": "7ad0feab-bd55-449d-aa7e-b3d3b9c62550",
                "updatedTime": "2022-07-14T14:09:53Z"
            }
        },
        "v1SettlementAccountWithdrawalScheme": {
            "description": "Payment scheme.\n\n - SCHEME_UNSPECIFIED: Default unspecified scheme.\n - FASTER_PAYMENTS: Faster payments scheme.\n - SEPA_INSTANT_CREDIT_TRANSFER: SEPA Instant Credit Transfer scheme.\n - SEPA_CREDIT_TRANSFER: SEPA Credit Transfer scheme.\n - BACS: BACS scheme.\n - CHAPS: CHAPS scheme.",
            "type": "string",
            "default": "SCHEME_UNSPECIFIED",
            "enum": [
                "SCHEME_UNSPECIFIED",
                "FASTER_PAYMENTS",
                "SEPA_INSTANT_CREDIT_TRANSFER",
                "SEPA_CREDIT_TRANSFER",
                "BACS",
                "CHAPS"
            ]
        },
        "v1SettlementAccountWithdrawalStatus": {
            "description": "Status of the withdrawal.\n\n - PENDING: Default value.\n - COMPLETED: Withdrawal was successful.\n - FAILED: Withdrawal failed to complete.",
            "type": "string",
            "default": "PENDING",
            "enum": [
                "PENDING",
                "COMPLETED",
                "FAILED"
            ]
        },
        "v1StatusIndicator": {
            "description": "- UNKNOWN_STATUS_INDICATOR: Default value for Business Budget Status Indicator\n - ACHIEVED: Achieved Business Budget Status Indicator states that Business Budget Target is already achieved\n - FAILED: Failed Business Budget Status Indicator states that Business Budget Target was not achieved in a given period\n - ON_TRACK: On Track Business Budget Status Indicator states that current progress pace towards\nBusiness Budget Target will most likely result in __Achieved__ status\n - BEHIND: Behind Business Budget Status Indicator states that current progress pace towards\nBusiness Budget Target will most likely result in __Failed__ status\n - NOT_STARTED: Not Started Business Budget Status Indicator states that specified Business Budget is not yet started",
            "type": "string",
            "title": "Enum definition of Status Indicator. Describes possible values",
            "default": "UNKNOWN_STATUS_INDICATOR",
            "enum": [
                "UNKNOWN_STATUS_INDICATOR",
                "ACHIEVED",
                "FAILED",
                "ON_TRACK",
                "BEHIND",
                "NOT_STARTED"
            ]
        },
        "v1Summaries": {
            "type": "object",
            "required": [
                "percentageStatistics",
                "summariesByMonth"
            ],
            "properties": {
                "percentageStatistics": {
                    "description": "Percentage breakdowns for transaction counts and transaction amount.",
                    "$ref": "#/definitions/v1PercentageStats"
                },
                "summariesByMonth": {
                    "description": "Summaries for three, six and twelve month periods.",
                    "$ref": "#/definitions/v1SummariesByMonth"
                }
            }
        },
        "v1SummariesByMonth": {
            "type": "object",
            "required": [
                "lastThreeMonths",
                "lastSixMonths",
                "lastTwelveMonths"
            ],
            "properties": {
                "lastSixMonths": {
                    "description": "Six month expense summary.",
                    "$ref": "#/definitions/v1AmountSummary"
                },
                "lastThreeMonths": {
                    "description": "Three month expense summary.",
                    "$ref": "#/definitions/v1AmountSummary"
                },
                "lastTwelveMonths": {
                    "description": "Twelve month expense summary.",
                    "$ref": "#/definitions/v1AmountSummary"
                }
            }
        },
        "v1TagFilter": {
            "type": "object",
            "title": "Object definition for Tag Filter",
            "properties": {
                "tag": {
                    "type": "string",
                    "title": "Tag that will be used as a filter for transactions\nwhich should be included as a progress towards a Business Budget goal"
                }
            },
            "example": {
                "tag": "ticket"
            }
        },
        "v1Transaction": {
            "type": "object",
            "required": [
                "id",
                "description",
                "time",
                "amount"
            ],
            "properties": {
                "amount": {
                    "description": "Transaction's amount.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "description": {
                    "description": "Transaction's description.",
                    "type": "string"
                },
                "id": {
                    "description": "Transaction's internal identifier.",
                    "type": "string"
                },
                "time": {
                    "description": "Transaction's timestamp.",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "example": {
                "amount": {
                    "currencyCode": "SEK",
                    "value": {
                        "scale": "1",
                        "unscaledValue": "-250000"
                    }
                },
                "description": "Example expense description",
                "id": "5db19043943a2032de8d15417f26ddc1b420b91f",
                "time": "2020-09-25T10:00:00Z"
            }
        },
        "v1TransactionStats": {
            "description": "Transaction stats.",
            "type": "object",
            "required": [
                "numTransactionsOneWeek",
                "numTransactionsOneMonth",
                "numTransactionsThreeMonths",
                "numTransactionsSixMonths",
                "numTransactionsNineMonths",
                "numTransactionsTwelveMonths",
                "numTransactionsTotal",
                "numIncTransactionsOneWeek",
                "numIncTransactionsOneMonth",
                "numIncTransactionsThreeMonths",
                "numIncTransactionsSixMonths",
                "numIncTransactionsNineMonths",
                "numIncTransactionsTwelveMonths",
                "numIncTransactionsTotal",
                "numOutTransactionsOneWeek",
                "numOutTransactionsOneMonth",
                "numOutTransactionsThreeMonths",
                "numOutTransactionsSixMonths",
                "numOutTransactionsNineMonths",
                "numOutTransactionsTwelveMonths",
                "numOutTransactionsTotal",
                "numUniqueTransactionsOneWeek",
                "numUniqueTransactionsOneMonth",
                "numUniqueTransactionsThreeMonths",
                "numUniqueTransactionsSixMonths",
                "numUniqueTransactionsNineMonths",
                "numUniqueTransactionsTwelveMonths",
                "numUniqueTransactionsTotal",
                "numUniqueIncTransactionsOneWeek",
                "numUniqueIncTransactionsOneMonth",
                "numUniqueIncTransactionsThreeMonths",
                "numUniqueIncTransactionsSixMonths",
                "numUniqueIncTransactionsNineMonths",
                "numUniqueIncTransactionsTwelveMonths",
                "numUniqueIncTransactionsTotal",
                "numUniqueOutTransactionsOneWeek",
                "numUniqueOutTransactionsOneMonth",
                "numUniqueOutTransactionsThreeMonths",
                "numUniqueOutTransactionsSixMonths",
                "numUniqueOutTransactionsNineMonths",
                "numUniqueOutTransactionsTwelveMonths",
                "numUniqueOutTransactionsTotal",
                "sumAmountsOneWeek",
                "sumAmountsOneMonth",
                "sumAmountsThreeMonths",
                "sumAmountsSixMonths",
                "sumAmountsNineMonths",
                "sumAmountsTwelveMonths",
                "sumAmountsTotal",
                "sumIncAmountsOneWeek",
                "sumIncAmountsOneMonth",
                "sumIncAmountsThreeMonths",
                "sumIncAmountsSixMonths",
                "sumIncAmountsNineMonths",
                "sumIncAmountsTwelveMonths",
                "sumIncAmountsTotal",
                "sumOutAmountsOneWeek",
                "sumOutAmountsOneMonth",
                "sumOutAmountsThreeMonths",
                "sumOutAmountsSixMonths",
                "sumOutAmountsNineMonths",
                "sumOutAmountsTwelveMonths",
                "sumOutAmountsTotal",
                "maxIncAmountOneWeek",
                "maxIncAmountOneMonth",
                "maxIncAmountThreeMonths",
                "maxIncAmountSixMonths",
                "maxIncAmountNineMonths",
                "maxIncAmountTwelveMonths",
                "maxIncAmountTotal",
                "maxOutAmountOneWeek",
                "maxOutAmountOneMonth",
                "maxOutAmountThreeMonths",
                "maxOutAmountSixMonths",
                "maxOutAmountNineMonths",
                "maxOutAmountTwelveMonths",
                "maxOutAmountTotal",
                "meanAmountOneWeek",
                "meanAmountOneMonth",
                "meanAmountThreeMonths",
                "meanAmountSixMonths",
                "meanAmountNineMonths",
                "meanAmountTwelveMonths",
                "meanAmountTotal",
                "meanIncAmountOneWeek",
                "meanIncAmountOneMonth",
                "meanIncAmountThreeMonths",
                "meanIncAmountSixMonths",
                "meanIncAmountNineMonths",
                "meanIncAmountTwelveMonths",
                "meanIncAmountTotal",
                "meanOutAmountOneWeek",
                "meanOutAmountOneMonth",
                "meanOutAmountThreeMonths",
                "meanOutAmountSixMonths",
                "meanOutAmountNineMonths",
                "meanOutAmountTwelveMonths",
                "meanOutAmountTotal"
            ],
            "properties": {
                "maxIncAmountNineMonths": {
                    "description": "The largest incoming transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxIncAmountOneMonth": {
                    "description": "The largest incoming transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxIncAmountOneWeek": {
                    "description": "The largest incoming transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxIncAmountSixMonths": {
                    "description": "The largest incoming transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxIncAmountThreeMonths": {
                    "description": "The largest incoming transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxIncAmountTotal": {
                    "description": "The largest incoming transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxIncAmountTwelveMonths": {
                    "description": "The largest incoming transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxOutAmountNineMonths": {
                    "description": "The largest outgoing transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxOutAmountOneMonth": {
                    "description": "The largest outgoing transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxOutAmountOneWeek": {
                    "description": "The largest outgoing transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxOutAmountSixMonths": {
                    "description": "The largest outgoing transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxOutAmountThreeMonths": {
                    "description": "The largest outgoing transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "maxOutAmountTotal": {
                    "description": "The largest outgoing transaction of all transactions.",
                    "type": "number",
                    "format": "float"
                },
                "maxOutAmountTwelveMonths": {
                    "description": "The largest outgoing transaction within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanAmountNineMonths": {
                    "description": "Mean transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanAmountOneMonth": {
                    "description": "Mean transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanAmountOneWeek": {
                    "description": "Mean transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanAmountSixMonths": {
                    "description": "Mean transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanAmountThreeMonths": {
                    "description": "Mean transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanAmountTotal": {
                    "description": "Mean transaction amount for all transactions.",
                    "type": "number",
                    "format": "float"
                },
                "meanAmountTwelveMonths": {
                    "description": "Mean transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanIncAmountNineMonths": {
                    "description": "Mean incoming transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanIncAmountOneMonth": {
                    "description": "Mean incoming transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanIncAmountOneWeek": {
                    "description": "Mean incoming transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanIncAmountSixMonths": {
                    "description": "Mean incoming transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanIncAmountThreeMonths": {
                    "description": "Mean incoming transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanIncAmountTotal": {
                    "description": "Mean incoming transaction amount for all transactions.",
                    "type": "number",
                    "format": "float"
                },
                "meanIncAmountTwelveMonths": {
                    "description": "Mean incoming transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanOutAmountNineMonths": {
                    "description": "Mean outgoing transaction amount within the defined time period, regardless of transaction history length.",
                    "type": "number",
                    "format": "float"
                },
                "meanOutAmountOneMonth": {
                    "description": "Mean outgoing transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanOutAmountOneWeek": {
                    "description": "Mean outgoing transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanOutAmountSixMonths": {
                    "description": "Mean outgoing transaction amount within the defined time period, regardless of transaction history length.",
                    "type": "number",
                    "format": "float"
                },
                "meanOutAmountThreeMonths": {
                    "description": "Mean outgoing transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "meanOutAmountTotal": {
                    "description": "Mean outgoing transaction amount for all transactions.",
                    "type": "number",
                    "format": "float"
                },
                "meanOutAmountTwelveMonths": {
                    "description": "Mean outgoing transaction amount within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "numIncTransactionsNineMonths": {
                    "description": "The number of incoming transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numIncTransactionsOneMonth": {
                    "description": "The number of incoming transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numIncTransactionsOneWeek": {
                    "description": "The number of incoming transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numIncTransactionsSixMonths": {
                    "description": "The number of incoming transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numIncTransactionsThreeMonths": {
                    "description": "The number of incoming transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numIncTransactionsTotal": {
                    "description": "The total number of incoming transactions.",
                    "type": "integer",
                    "format": "int32"
                },
                "numIncTransactionsTwelveMonths": {
                    "description": "The number of incoming transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOutTransactionsNineMonths": {
                    "description": "The number of outgoing transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOutTransactionsOneMonth": {
                    "description": "The number of outgoing transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOutTransactionsOneWeek": {
                    "description": "The number of outgoing transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOutTransactionsSixMonths": {
                    "description": "The number of outgoing transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOutTransactionsThreeMonths": {
                    "description": "The number of outgoing transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOutTransactionsTotal": {
                    "description": "The total number of outgoing transactions.",
                    "type": "integer",
                    "format": "int32"
                },
                "numOutTransactionsTwelveMonths": {
                    "description": "The number of outgoing transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTransactionsNineMonths": {
                    "description": "The number of transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTransactionsOneMonth": {
                    "description": "The number of transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTransactionsOneWeek": {
                    "description": "The number of transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTransactionsSixMonths": {
                    "description": "The number of transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTransactionsThreeMonths": {
                    "description": "The number of transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTransactionsTotal": {
                    "description": "The total number of transactions.",
                    "type": "integer",
                    "format": "int32"
                },
                "numTransactionsTwelveMonths": {
                    "description": "The number of transactions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueIncTransactionsNineMonths": {
                    "description": "The number of incoming transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueIncTransactionsOneMonth": {
                    "description": "The number of incoming transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueIncTransactionsOneWeek": {
                    "description": "The number of incoming transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueIncTransactionsSixMonths": {
                    "description": "The number of incoming transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueIncTransactionsThreeMonths": {
                    "description": "The number of incoming transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueIncTransactionsTotal": {
                    "description": "The total number of incoming transactions with unique descriptions.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueIncTransactionsTwelveMonths": {
                    "description": "The number of incoming transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueOutTransactionsNineMonths": {
                    "description": "The number of outgoing transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueOutTransactionsOneMonth": {
                    "description": "The number of outgoing transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueOutTransactionsOneWeek": {
                    "description": "The number of outgoing transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueOutTransactionsSixMonths": {
                    "description": "The number of outgoing transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueOutTransactionsThreeMonths": {
                    "description": "The number of outgoing transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueOutTransactionsTotal": {
                    "description": "The total number of outgoing transactions with unique descriptions.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueOutTransactionsTwelveMonths": {
                    "description": "The number of outgoing transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueTransactionsNineMonths": {
                    "description": "The number of transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueTransactionsOneMonth": {
                    "description": "The number of transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueTransactionsOneWeek": {
                    "description": "The number of transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueTransactionsSixMonths": {
                    "description": "The number of transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueTransactionsThreeMonths": {
                    "description": "The number of transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueTransactionsTotal": {
                    "description": "The total number of transactions with unique descriptions.",
                    "type": "integer",
                    "format": "int32"
                },
                "numUniqueTransactionsTwelveMonths": {
                    "description": "The number of transactions with unique descriptions within the defined time period, despite `dataAvailability` for that period.",
                    "type": "integer",
                    "format": "int32"
                },
                "sumAmountsNineMonths": {
                    "description": "The sum of all transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumAmountsOneMonth": {
                    "description": "The sum of all transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumAmountsOneWeek": {
                    "description": "The sum of all transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumAmountsSixMonths": {
                    "description": "The sum of all transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumAmountsThreeMonths": {
                    "description": "The sum of all transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumAmountsTotal": {
                    "description": "The sum of all transaction amounts.",
                    "type": "number",
                    "format": "float"
                },
                "sumAmountsTwelveMonths": {
                    "description": "The sum of all transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumIncAmountsNineMonths": {
                    "description": "The sum of all incoming transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumIncAmountsOneMonth": {
                    "description": "The sum of all incoming transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumIncAmountsOneWeek": {
                    "description": "The sum of all incoming transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumIncAmountsSixMonths": {
                    "description": "The sum of all incoming transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumIncAmountsThreeMonths": {
                    "description": "The sum of all incoming transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumIncAmountsTotal": {
                    "description": "The sum of all incoming transaction amounts.",
                    "type": "number",
                    "format": "float"
                },
                "sumIncAmountsTwelveMonths": {
                    "description": "The sum of all incoming transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOutAmountsNineMonths": {
                    "description": "The sum of all outgoing transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOutAmountsOneMonth": {
                    "description": "The sum of all outgoing transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOutAmountsOneWeek": {
                    "description": "The sum of all outgoing transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOutAmountsSixMonths": {
                    "description": "The sum of all outgoing transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOutAmountsThreeMonths": {
                    "description": "The sum of all outgoing transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                },
                "sumOutAmountsTotal": {
                    "description": "The sum of all outgoing transaction amounts.",
                    "type": "number",
                    "format": "float"
                },
                "sumOutAmountsTwelveMonths": {
                    "description": "The sum of all outgoing transaction amounts within the defined time period, despite `dataAvailability` for that period.",
                    "type": "number",
                    "format": "float"
                }
            },
            "example": {
                "maxIncAmountNineMonths": 12400,
                "maxIncAmountSixMonths": 12400,
                "maxIncAmountTotal": 34600,
                "maxIncAmountTwelveMonths": 34600,
                "maxOutAmountNineMonths": 1200,
                "maxOutAmountSixMonths": 1200,
                "maxOutAmountTotal": 1200,
                "maxOutAmountTwelveMonths": 1200,
                "meanAmountNineMonths": 16.7595,
                "meanAmountSixMonths": 12.7306595,
                "meanAmountTotal": 22.7125168,
                "meanAmountTwelveMonths": 25.6365814,
                "meanIncAmountNineMonths": 2014.27,
                "meanIncAmountSixMonths": 1854,
                "meanIncAmountTotal": 2405.55566,
                "meanIncAmountTwelveMonths": 2512.64697,
                "meanOutAmountNineMonths": 26.6672,
                "meanOutAmountSixMonths": 28.6461792,
                "meanOutAmountTotal": 24.4465523,
                "meanOutAmountTwelveMonths": 24.9668636,
                "numIncTransactionsNineMonths": 20,
                "numIncTransactionsOneMonth": 0,
                "numIncTransactionsOneWeek": 0,
                "numIncTransactionsSixMonths": 10,
                "numIncTransactionsThreeMonths": 0,
                "numIncTransactionsTotal": 36,
                "numIncTransactionsTwelveMonths": 34,
                "numOutTransactionsNineMonths": 945,
                "numOutTransactionsOneMonth": 0,
                "numOutTransactionsOneWeek": 0,
                "numOutTransactionsSixMonths": 445,
                "numOutTransactionsThreeMonths": 0,
                "numOutTransactionsTotal": 1819,
                "numOutTransactionsTwelveMonths": 1671,
                "numTransactionsNineMonths": 755,
                "numTransactionsOneMonth": 0,
                "numTransactionsOneWeek": 0,
                "numTransactionsSixMonths": 455,
                "numTransactionsThreeMonths": 0,
                "numTransactionsTotal": 1855,
                "numTransactionsTwelveMonths": 1705,
                "numUniqueIncTransactionsNineMonths": 3,
                "numUniqueIncTransactionsOneMonth": 0,
                "numUniqueIncTransactionsOneWeek": 0,
                "numUniqueIncTransactionsSixMonths": 3,
                "numUniqueIncTransactionsThreeMonths": 0,
                "numUniqueIncTransactionsTotal": 3,
                "numUniqueIncTransactionsTwelveMonths": 3,
                "numUniqueOutTransactionsNineMonths": 14,
                "numUniqueOutTransactionsOneMonth": 0,
                "numUniqueOutTransactionsOneWeek": 0,
                "numUniqueOutTransactionsSixMonths": 14,
                "numUniqueOutTransactionsThreeMonths": 0,
                "numUniqueOutTransactionsTotal": 14,
                "numUniqueOutTransactionsTwelveMonths": 14,
                "numUniqueTransactionsNineMonths": 15,
                "numUniqueTransactionsOneMonth": 0,
                "numUniqueTransactionsOneWeek": 0,
                "numUniqueTransactionsSixMonths": 15,
                "numUniqueTransactionsThreeMonths": 0,
                "numUniqueTransactionsTotal": 15,
                "numUniqueTransactionsTwelveMonths": 15,
                "sumAmountsNineMonths": 15762.45,
                "sumAmountsSixMonths": 5792.45,
                "sumAmountsTotal": 42131.7188,
                "sumAmountsTwelveMonths": 43710.3711,
                "sumIncAmountsNineMonths": 32740,
                "sumIncAmountsSixMonths": 18540,
                "sumIncAmountsTotal": 86600,
                "sumIncAmountsTwelveMonths": 85430,
                "sumOutAmountsNineMonths": 22147.58,
                "sumOutAmountsSixMonths": 12747.5498,
                "sumOutAmountsTotal": 44468.2812,
                "sumOutAmountsTwelveMonths": 41719.6289
            }
        },
        "v1UpdateBusinessBudgetBody": {
            "type": "object",
            "title": "Body definition of Update Business Budget request",
            "properties": {
                "allocationFilters": {
                    "title": "Update value for Business Budget Allocation Filters",
                    "$ref": "#/definitions/v1AllocationFilters"
                },
                "description": {
                    "type": "string",
                    "title": "Update value for Business Budget Description"
                },
                "recurrence": {
                    "title": "Update value for Business Budget Recurrence",
                    "$ref": "#/definitions/v1BudgetRecurrence"
                },
                "targetAmount": {
                    "description": "Update value for Business Budget Target Amount. Only transactions with currency matching target amount will be counted towards progress.\nIn case of an account having different currency, no progress will be calculated.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "title": {
                    "type": "string",
                    "title": "Update value for Business Budget Title"
                }
            }
        },
        "v1User": {
            "type": "object",
            "properties": {
                "firstName": {
                    "description": "The first name of the user to be used for User Match functionality",
                    "type": "string"
                },
                "lastName": {
                    "description": "The last name of the user to be used for User Match functionality",
                    "type": "string"
                }
            }
        },
        "v2Account": {
            "type": "object",
            "required": [
                "id",
                "account_number",
                "name",
                "financial_institution_name",
                "holder_names",
                "users"
            ],
            "properties": {
                "accountNumber": {
                    "description": "Account's unique identifier number.",
                    "type": "string"
                },
                "financialInstitutionName": {
                    "description": "The name of a bank or other financial service providers.",
                    "type": "string"
                },
                "holderNames": {
                    "description": "Names of account holders. Availability of this data depends on the chosen provider.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "iban": {
                    "description": "Account's IBAN identifier.",
                    "type": "string"
                },
                "id": {
                    "description": "Account's internal identifier.",
                    "type": "string"
                },
                "name": {
                    "description": "Account's display name.",
                    "type": "string"
                },
                "users": {
                    "description": "Account users and their associated roles. Availability of this data depends on the chosen provider.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2User"
                    }
                }
            },
            "example": {
                "accountNumber": "1234-123456789",
                "financialInstitutionName": "Demo Bank",
                "holderNames": [
                    "John Doe",
                    "Lisa Doe"
                ],
                "iban": "SE8730000000010123456789",
                "id": "a6bb87e57a8c4dd4874b241471a2b9e8",
                "name": "John’s account"
            }
        },
        "v2AmountSummary": {
            "type": "object",
            "required": [
                "total",
                "mean",
                "median",
                "min",
                "max"
            ],
            "properties": {
                "max": {
                    "description": "The maximum of the amount.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "mean": {
                    "description": "The average of the amount.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "median": {
                    "description": "The median of the amount.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "min": {
                    "description": "The minimum of the amount.",
                    "$ref": "#/definitions/typeExactNumber"
                },
                "total": {
                    "description": "The total of the amount.",
                    "$ref": "#/definitions/typeExactNumber"
                }
            },
            "example": {
                "max": {
                    "scale": "1",
                    "unscaledValue": "260000"
                },
                "mean": {
                    "scale": "1",
                    "unscaledValue": "250000"
                },
                "median": {
                    "scale": "1",
                    "unscaledValue": "250000"
                },
                "min": {
                    "scale": "1",
                    "unscaledValue": "240000"
                },
                "total": {
                    "scale": "1",
                    "unscaledValue": "1000000"
                }
            }
        },
        "v2CreateIncomeCheckRequest": {
            "description": "The object to be sent for creating an income check.",
            "type": "object",
            "properties": {
                "engineVersion": {
                    "description": "Optional version of the engine that generates the income check. If omitted, the latest engine version will be used. See [Changelog](https://docs.tink.com/changelog) for more details.",
                    "type": "string"
                },
                "externalReference": {
                    "description": "Optional reference given by the customer to add information, such as UID, to the generated report. (Validation: allowed lowercase and uppercase letters, numbers and dashes. Max 50 characters in length).",
                    "type": "string"
                }
            },
            "example": {
                "engineVersion": "1.0.0",
                "externalReference": "ln-123456789"
            }
        },
        "v2GetReportDataForUserResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "Accounts used to compute report.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2Account"
                    }
                },
                "reportId": {
                    "description": "ID for report that corresponds to underlying user data.",
                    "type": "string"
                },
                "transactions": {
                    "description": "Transactions used to compute report.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2Transaction"
                    }
                }
            }
        },
        "v2Income": {
            "type": "object",
            "required": [
                "primary_income_stream_id",
                "streams",
                "summary"
            ],
            "properties": {
                "primaryIncomeStreamId": {
                    "description": "The id of the primary income stream.",
                    "type": "string"
                },
                "streams": {
                    "description": "User's income streams.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2IncomeStream"
                    }
                },
                "summary": {
                    "description": "The summary of each income stream.",
                    "$ref": "#/definitions/v2IncomeSummary"
                }
            },
            "example": {
                "primaryIncomeStreamId": "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
            }
        },
        "v2IncomeCheck": {
            "type": "object",
            "required": [
                "id",
                "user_id",
                "app_id",
                "external_reference",
                "enigne_version",
                "created_time",
                "accounts"
            ],
            "properties": {
                "accounts": {
                    "description": "Contains user accounts data.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2Account"
                    }
                },
                "appId": {
                    "description": "The identifier of the app that has been created by the client in console and linked to the income check product.",
                    "type": "string"
                },
                "createdTime": {
                    "description": "The creation time of the income check.",
                    "type": "string",
                    "format": "date-time"
                },
                "engineVersion": {
                    "description": "The version of the engine that generated the income check.",
                    "type": "string"
                },
                "externalReference": {
                    "description": "An external reference given by the client when creating the income check.",
                    "type": "string"
                },
                "id": {
                    "description": "The internal identifier of the income check.",
                    "type": "string"
                },
                "identity": {
                    "description": "User's identity information. Availability of this data depends on the chosen provider.",
                    "$ref": "#/definitions/incomechecksv2Identity"
                },
                "income": {
                    "description": "List of income streams for this user.",
                    "$ref": "#/definitions/v2Income"
                },
                "userId": {
                    "description": "The internal identifier of the user linked to the request.",
                    "type": "string"
                }
            },
            "example": {
                "appId": "56a33be25eb9443fbb696f7c61eabd94",
                "createdTime": "2021-04-22T09:59:56.966Z",
                "engineVersion": "1.0.0",
                "externalReference": "ext-abc-123",
                "id": "a8efc70a24a5e4aed0f8d3e5380b01fd74fc9cd1",
                "userId": "9e0b1c0d74967147744f0d076e805dfb2df7b4b3"
            }
        },
        "v2IncomeCheckSummary": {
            "type": "object",
            "required": [
                "id",
                "user_id",
                "app_id",
                "external_reference",
                "enigne_version",
                "created_time"
            ],
            "properties": {
                "appId": {
                    "description": "The identifier of the app that has been created by the client in console and linked to the income check product.",
                    "type": "string"
                },
                "createdTime": {
                    "description": "The creation time of the income check.",
                    "type": "string",
                    "format": "date-time"
                },
                "engineVersion": {
                    "description": "The version of the engine that generated the income check.",
                    "type": "string"
                },
                "externalReference": {
                    "description": "An external reference given by the client when creating the income check.",
                    "type": "string"
                },
                "id": {
                    "description": "The internal identifier of the income check.",
                    "type": "string"
                },
                "identity": {
                    "description": "User's identity information. Availability of this data depends on the chosen provider.",
                    "$ref": "#/definitions/incomechecksv2Identity"
                },
                "userId": {
                    "description": "The internal identifier of the user linked to the request.",
                    "type": "string"
                }
            },
            "example": {
                "appId": "56a33be25eb9443fbb696f7c61eabd94",
                "createdTime": "2021-04-22T09:59:56.966Z",
                "engineVersion": "1.0.0",
                "externalReference": "ext-abc-123",
                "id": "a8efc70a24a5e4aed0f8d3e5380b01fd74fc9cd1",
                "userId": "9e0b1c0d74967147744f0d076e805dfb2df7b4b3"
            }
        },
        "v2IncomeStream": {
            "type": "object",
            "required": [
                "id",
                "account_id",
                "type",
                "currency_code",
                "summary_by_months",
                "summary_by_transactions",
                "occurences",
                "transactions",
                "sub_type"
            ],
            "properties": {
                "accountId": {
                    "description": "The account number connected to the income stream.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code according to ISO-4217 standard.",
                    "type": "string"
                },
                "id": {
                    "description": "Income stream's (helper) identifier used only in the response.",
                    "type": "string"
                },
                "occurrences": {
                    "description": "The occurrence summary of the stream.",
                    "$ref": "#/definitions/v2OccurrenceSummary"
                },
                "subType": {
                    "description": "BETA The income sub-type of the income stream.",
                    "$ref": "#/definitions/v2IncomeSubType"
                },
                "summaryByMonths": {
                    "description": "The summary of the income stream calculated by month.",
                    "$ref": "#/definitions/v2SummaryByMonths"
                },
                "summaryByTransactions": {
                    "description": "The summary of the income stream calculated by transactions.",
                    "$ref": "#/definitions/v2SummaryByTransactions"
                },
                "transactions": {
                    "description": "The list of transactions in the stream.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2Transaction"
                    }
                },
                "type": {
                    "description": "The type of the income stream.",
                    "$ref": "#/definitions/v2IncomeType"
                }
            },
            "example": {
                "accountId": "a6bb87e57a8c4dd4874b241471a2b9e8",
                "currencyCode": "SEK",
                "id": "d0257f733e5e1c54fcf496857e2b4f0e4148c017",
                "type": "SALARY"
            }
        },
        "v2IncomeSubType": {
            "description": " - SUB_TYPE_UNDETERMINED: Income sub-type was undetermined.\n - SALARY_SUB_TYPE_SALARY: Income sub-type identified as a salary, regular salary from an employer.\n - SALARY_SUB_TYPE_GIG: Income sub-type identified as a gig, irregular salary from gig employment. Often smaller amounts.\n - SALARY_SUB_TYPE_BONUS: Income sub-type identified as a bonus, bonus payments that are often larger and less frequent.\n - SALARY_SUB_TYPE_OTHER_SALARY: Income sub-type identified as other, for example salary payments such as expense reimbursements.\n - BENEFITS_SUB_TYPE_ALIMONY: Income sub-type identified as alimony, financial support paid to previous spouse.\n - BENEFITS_SUB_TYPE_CHILD_SUPPORT: Income sub-type identified as a child support, different types of child benefits.\n - BENEFITS_SUB_TYPE_UNEMPLOYMENT: Income sub-type identified as unemployment, unable to work benefits.\n - BENEFITS_SUB_TYPE_OTHER_BENEFIT: Income sub-type identified as other, any other benefit not included in the previous sub-types.\n - PENSION_SUB_TYPE_PRIVATE: Income sub-type identified as a pension that is paid from the employer.\n - PENSION_SUB_TYPE_STATE: Income sub-type identified as a pension that is paid from the state.\n - PENSION_SUB_TYPE_OTHER_PENSION: Income sub-type identified as other, any other pension not included in the previous sub-types.\n - CASH_DEPOSITS_SUB_TYPE_CASH: Income sub-type identified as cash deposits.\n - CASH_DEPOSITS_SUB_TYPE_CHEQUE: Income sub-type identified as a cheque deposits.\n - CASH_DEPOSITS_SUB_TYPE_OTHER_CASH_DEPOSITS: Income sub-type identified as a other, any other cash deposits not included in the previous sub-types.\n - OTHER_SUB_TYPE_INSURANCE: Income sub-type identified as insurance.\n - OTHER_SUB_TYPE_RENTAL: Income sub-type identified as a rental income.\n - OTHER_SUB_TYPE_EDUCATIONAL_GRANT: Income sub-type identified as educational grants.\n - OTHER_SUB_TYPE_SECOND_HAND_SALES: Income sub-type identified as a second hand sale, external transfers related to 2nd hand sales.\n - OTHER_SUB_TYPE_FINANCIAL: Income sub-type identified as a financial, different types of dividends, savings or investment income that meet regulatory rules.\n - OTHER_SUB_TYPE_EXTERNAL_TRANSFER: Income sub-type identified as a external transfer, regular third party transfers and standing orders that are not 1st party transfers.\n - OTHER_SUB_TYPE_OTHER: Income sub-type identified as other, any other type of regular income that does not fall into the other categories.",
            "type": "string",
            "default": "SUB_TYPE_UNDETERMINED",
            "enum": [
                "SUB_TYPE_UNDETERMINED",
                "SALARY_SUB_TYPE_SALARY",
                "SALARY_SUB_TYPE_GIG",
                "SALARY_SUB_TYPE_BONUS",
                "SALARY_SUB_TYPE_OTHER_SALARY",
                "BENEFITS_SUB_TYPE_ALIMONY",
                "BENEFITS_SUB_TYPE_CHILD_SUPPORT",
                "BENEFITS_SUB_TYPE_UNEMPLOYMENT",
                "BENEFITS_SUB_TYPE_OTHER_BENEFIT",
                "PENSION_SUB_TYPE_PRIVATE",
                "PENSION_SUB_TYPE_STATE",
                "PENSION_SUB_TYPE_OTHER_PENSION",
                "CASH_DEPOSITS_SUB_TYPE_CASH",
                "CASH_DEPOSITS_SUB_TYPE_CHEQUE",
                "CASH_DEPOSITS_SUB_TYPE_OTHER_CASH_DEPOSITS",
                "OTHER_SUB_TYPE_INSURANCE",
                "OTHER_SUB_TYPE_RENTAL",
                "OTHER_SUB_TYPE_EDUCATIONAL_GRANT",
                "OTHER_SUB_TYPE_SECOND_HAND_SALES",
                "OTHER_SUB_TYPE_FINANCIAL",
                "OTHER_SUB_TYPE_EXTERNAL_TRANSFER",
                "OTHER_SUB_TYPE_OTHER"
            ]
        },
        "v2IncomeSummary": {
            "type": "object",
            "required": [
                "summary_by_months",
                "summary_by_transactions",
                "summary_by_types"
            ],
            "properties": {
                "summaryByMonths": {
                    "description": "The summary of all the income streams calculated by month.",
                    "$ref": "#/definitions/v2SummaryByMonths"
                },
                "summaryByTransactions": {
                    "description": "The summary of all the income streams calculated by transactions.",
                    "$ref": "#/definitions/v2SummaryByTransactions"
                },
                "summaryByTypes": {
                    "description": "The summary of all the income streams grouped by type.",
                    "$ref": "#/definitions/v2SummaryByTypes"
                }
            }
        },
        "v2IncomeType": {
            "description": " - OTHER: Income that does not fall into any specific type.\n - SALARY: Income identified as a salary.\n - PENSION: Income identified as a pension.\n - BENEFITS: Income identified as a benefit.\n - CASH_DEPOSITS: Income identified as a cash deposit.",
            "type": "string",
            "default": "OTHER",
            "enum": [
                "OTHER",
                "SALARY",
                "PENSION",
                "BENEFITS",
                "CASH_DEPOSITS"
            ]
        },
        "v2ListIncomeChecksRequestIdentity": {
            "type": "object",
            "properties": {
                "ssnEq": {
                    "description": "Social security number to filter on.",
                    "type": "string"
                }
            }
        },
        "v2ListIncomeChecksResponse": {
            "type": "object",
            "required": [
                "income_checks",
                "next_page_token",
                "prev_page_token"
            ],
            "properties": {
                "incomeChecks": {
                    "description": "List of instances.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2IncomeCheckSummary"
                    }
                },
                "nextPageToken": {
                    "description": "Pointer to the next page.",
                    "type": "string"
                },
                "prevPageToken": {
                    "description": "Pointer to the previous page.",
                    "type": "string"
                }
            },
            "example": {
                "nextPageToken": "MA=",
                "prevPageToken": "MA=="
            }
        },
        "v2OccurrenceSummary": {
            "type": "object",
            "required": [
                "count",
                "first",
                "last"
            ],
            "properties": {
                "count": {
                    "description": "The number of occurrences.",
                    "type": "integer",
                    "format": "int32"
                },
                "first": {
                    "description": "The date of the first occurrence.",
                    "type": "string"
                },
                "last": {
                    "description": "The date of the last occurrence.",
                    "type": "string"
                }
            },
            "example": {
                "count": 7,
                "first": "2020-09-25",
                "last": "2021-03-25"
            }
        },
        "v2SubTypeSummary": {
            "type": "object",
            "required": [
                "account_ids",
                "currency_code",
                "summary_by_months",
                "summary_by_transactions",
                "occurrences",
                "stream_ids"
            ],
            "properties": {
                "accountIds": {
                    "description": "The internal account IDs of the user that an income stream was detected for.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "currencyCode": {
                    "description": "Currency code.",
                    "type": "string"
                },
                "occurrences": {
                    "description": "The occurrence summary of the sub-type. This is the number of instances that a transaction was identified as an income for this sub-type.",
                    "$ref": "#/definitions/v2OccurrenceSummary"
                },
                "streamIds": {
                    "description": "The IDs of the identified income streams for this sub-type.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "summaryByMonths": {
                    "description": "The summary of the income stream calculated by month.",
                    "$ref": "#/definitions/v2SummaryByMonths"
                },
                "summaryByTransactions": {
                    "description": "The summary of transactions belonging to income streams of this sub-type.",
                    "$ref": "#/definitions/v2SummaryByTransactions"
                }
            },
            "example": {
                "accountIds": [
                    "a6bb87e57a8c4dd4874b241471a2b9e8"
                ],
                "currencyCode": "SEK",
                "streamIds": [
                    "d0257f733e5e1c54fcf496857e2b4f0e4148c017"
                ]
            }
        },
        "v2SummaryByMonths": {
            "type": "object",
            "properties": {
                "lastSixMonths": {
                    "description": "The monthly amount summary of the last six months.",
                    "$ref": "#/definitions/v2AmountSummary"
                },
                "lastThreeMonths": {
                    "description": "The monthly amount summary of the last three months.",
                    "$ref": "#/definitions/v2AmountSummary"
                },
                "lastTwelveMonths": {
                    "description": "The monthly amount summary of the last twelve months.",
                    "$ref": "#/definitions/v2AmountSummary"
                }
            }
        },
        "v2SummaryBySubTypes": {
            "type": "object",
            "properties": {
                "benefitsSubTypeAlimony": {
                    "description": "The summary for all income streams with sub-type BENEFITS_SUB_TYPE_ALIMONY.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "benefitsSubTypeChildSupport": {
                    "description": "The summary for all income streams with sub-type BENEFITS_SUB_TYPE_CHILD_SUPPORT.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "benefitsSubTypeOtherBenefit": {
                    "description": "The summary for all income streams with sub-type BENEFITS_SUB_TYPE_OTHER_BENEFIT.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "benefitsSubTypeUnemployment": {
                    "description": "The summary for all income streams with sub-type BENEFITS_SUB_TYPE_UNEMPLOYMENT.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "cashDepositsSubTypeCash": {
                    "description": "The summary for all income streams with sub-type CASH_DEPOSITS_SUB_TYPE_CASH.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "cashDepositsSubTypeCheque": {
                    "description": "The summary for all income streams with sub-type CASH_DEPOSITS_SUB_TYPE_CHEQUE.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "cashDepositsSubTypeOtherCashDeposits": {
                    "description": "The summary for all income streams with sub-type CASH_DEPOSITS_SUB_TYPE_OTHER_CASH_DEPOSITS.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "otherSubTypeEducationalGrant": {
                    "description": "The summary for all income streams with sub-type OTHER_SUB_TYPE_EDUCATIONAL_GRANT.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "otherSubTypeExternalTransfer": {
                    "description": "The summary for all income streams with sub-type OTHER_SUB_TYPE_EXTERNAL_TRANSFER.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "otherSubTypeFinancial": {
                    "description": "The summary for all income streams with sub-type OTHER_SUB_TYPE_FINANCIAL.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "otherSubTypeInsurance": {
                    "description": "The summary for all income streams with sub-type OTHER_SUB_TYPE_INSURANCE.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "otherSubTypeOther": {
                    "description": "The summary for all income streams with sub-type OTHER_SUB_TYPE_OTHER.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "otherSubTypeRental": {
                    "description": "The summary for all income streams with sub-type OTHER_SUB_TYPE_RENTAL.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "otherSubTypeSecondHandSales": {
                    "description": "The summary for all income streams with sub-type OTHER_SUB_TYPE_SECOND_HAND_SALES.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "pensionSubTypeOtherPension": {
                    "description": "The summary for all income streams with sub-type PENSION_SUB_TYPE_OTHER_PENSION.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "pensionSubTypePrivate": {
                    "description": "The summary for all income streams with sub-type PENSION_SUB_TYPE_PRIVATE.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "pensionSubTypeState": {
                    "description": "The summary for all income streams with sub-type PENSION_SUB_TYPE_STATE.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "salarySubTypeBonus": {
                    "description": "The summary for all income streams with sub-type SALARY_SUB_TYPE_BONUS.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "salarySubTypeGig": {
                    "description": "The summary for all income streams with sub-type SALARY_SUB_TYPE_GIG.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "salarySubTypeOtherSalary": {
                    "description": "The summary for all income streams with sub-type SALARY_SUB_TYPE_OTHER_SALARY.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "salarySubTypeSalary": {
                    "description": "The summary for all income streams with sub-type SALARY_SUB_TYPE_SALARY.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                },
                "subTypeUndetermined": {
                    "description": "The summary for all income streams with sub-type SUB_TYPE_UNDETERMINED.",
                    "$ref": "#/definitions/v2SubTypeSummary"
                }
            }
        },
        "v2SummaryByTransactions": {
            "type": "object",
            "properties": {
                "lastSixMonths": {
                    "description": "The monthly amount summary of the last six months.",
                    "$ref": "#/definitions/v2AmountSummary"
                },
                "lastThreeMonths": {
                    "description": "The monthly amount summary of the last three months.",
                    "$ref": "#/definitions/v2AmountSummary"
                },
                "lastTwelveMonths": {
                    "description": "The monthly amount summary of the last twelve months.",
                    "$ref": "#/definitions/v2AmountSummary"
                }
            }
        },
        "v2SummaryByTypes": {
            "type": "object",
            "properties": {
                "benefits": {
                    "description": "The summary for all income streams with type benefits.",
                    "$ref": "#/definitions/v2TypeSummary"
                },
                "cashDeposits": {
                    "description": "The summary for all income streams with type cash deposits.",
                    "$ref": "#/definitions/v2TypeSummary"
                },
                "other": {
                    "description": "The summary for all income streams with type other.",
                    "$ref": "#/definitions/v2TypeSummary"
                },
                "pension": {
                    "description": "The summary for all income streams with type pension.",
                    "$ref": "#/definitions/v2TypeSummary"
                },
                "salary": {
                    "description": "The summary for all income streams with type salary.",
                    "$ref": "#/definitions/v2TypeSummary"
                }
            }
        },
        "v2Transaction": {
            "type": "object",
            "required": [
                "id",
                "description",
                "time",
                "amount",
                "account_id"
            ],
            "properties": {
                "accountId": {
                    "description": "Account's internal identifier.",
                    "type": "string"
                },
                "amount": {
                    "description": "Transaction's amount.",
                    "$ref": "#/definitions/typeCurrencyDenominatedAmount"
                },
                "description": {
                    "description": "Transaction's description.",
                    "type": "string"
                },
                "id": {
                    "description": "Transaction's internal identifier.",
                    "type": "string"
                },
                "time": {
                    "description": "Transaction's timestamp.",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "example": {
                "account_id": "a6bb87e57a8c4dd22344b241471a2b9e8",
                "amount": {
                    "currencyCode": "SEK",
                    "value": {
                        "scale": "1",
                        "unscaledValue": "250000"
                    }
                },
                "description": "Lön",
                "id": "5db19043943a2032de8d15417f26ddc1b420b91f",
                "time": "2020-09-25T10:00:00Z"
            }
        },
        "v2TypeSummary": {
            "type": "object",
            "required": [
                "account_ids",
                "currency_code",
                "summary_by_months",
                "summary_by_transactions",
                "occurrences",
                "stream_ids",
                "summary_by_sub_types"
            ],
            "properties": {
                "accountIds": {
                    "description": "The internal account IDs of the user that an income stream was detected for.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "currencyCode": {
                    "description": "Currency code.",
                    "type": "string"
                },
                "occurrences": {
                    "description": "The occurrence summary of the type. This is the number of instances that a transaction was identified as an income for this type.",
                    "$ref": "#/definitions/v2OccurrenceSummary"
                },
                "streamIds": {
                    "description": "The IDs of the identified income streams for this type.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "summaryByMonths": {
                    "description": "The summary of the income stream calculated by month.",
                    "$ref": "#/definitions/v2SummaryByMonths"
                },
                "summaryBySubTypes": {
                    "description": "BETA The summary by sub-types.",
                    "$ref": "#/definitions/v2SummaryBySubTypes"
                },
                "summaryByTransactions": {
                    "description": "The summary of transactions belonging to income streams of this type.",
                    "$ref": "#/definitions/v2SummaryByTransactions"
                }
            },
            "example": {
                "accountIds": [
                    "a6bb87e57a8c4dd4874b241471a2b9e8"
                ],
                "currencyCode": "SEK",
                "streamIds": [
                    "d0257f733e5e1c54fcf496857e2b4f0e4148c017"
                ]
            }
        },
        "v2User": {
            "type": "object",
            "required": [
                "name",
                "role"
            ],
            "properties": {
                "name": {
                    "description": "Account user's name.",
                    "type": "string"
                },
                "role": {
                    "description": "Account user's role.",
                    "type": "string"
                }
            },
            "example": {
                "name": "John Doe",
                "role": "HOLDER"
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
          "type": "apiKey",
          "name": "Authorization",
          "in": "header",
          "description": "Enter your bearer token in the format Bearer {token}"
        },
        "OAuth2": {
            "type": "oauth2",
            "in": "header",
            "flow": "accessCode",
            "authorizationUrl": "https://api.tink.com/api/v1/oauth/authorization-grant",
            "tokenUrl": "https://api.tink.com/api/v1/oauth/token",
            "scopes": {
                "budgets:read": "budgets:read",
                "budgets:write": "budgets:write",
                "calendar:read": "calendar:read",
                "cost-of-living:read": "cost-of-living:read",
                "credentials:read": "credentials:read",
                "credentials:refresh": "credentials:refresh",
                "credentials:write": "credentials:write",
                "provider-consents:read": "provider-consents:read",
                "provider-consents:write": "provider-consents:write",
                "savings-goals:read": "savings-goals:read",
                "savings-goals:write": "savings-goals:write",
                "statistics:read": "statistics:read",
                "subscriptions:read": "subscriptions:read",
                "transactions:read": "transactions:read",
                "user:web_hooks": "user:web_hooks"
            }
        },
        "OAuth2Client": {
            "type": "oauth2",
            "in": "header",
            "flow": "application",
            "tokenUrl": "https://api.tink.com/api/v1/oauth/token",
            "scopes": {
                "account-verification-reports:read": "account-verification-reports:read",
                "accounts.balances:readonly": "accounts.balances:readonly",
                "accounts:read": "accounts:read",
                "accounts:write": "accounts:write",
                "authorization:grant": "authorization:grant",
                "authorization:revoke": "authorization:revoke",
                "bulk-payment:read": "bulk-payment:read",
                "bulk-payment:write": "bulk-payment:write",
                "business-account-verification-reports:read": "business-account-verification-reports:read",
                "consents": "consents",
                "consents:readonly": "consents:readonly",
                "enrichment.on-demand": "enrichment.on-demand",
                "enrichment.transactions": "enrichment.transactions",
                "enrichment.transactions:readonly": "enrichment.transactions:readonly",
                "expense-checks:delete": "expense-checks:delete",
                "expense-checks:readonly": "expense-checks:readonly",
                "income-checks:delete": "income-checks:delete",
                "income-checks:readonly": "income-checks:readonly",
                "link-session:write": "link-session:write",
                "mandate-payments": "mandate-payments",
                "mandate-payments:readonly": "mandate-payments:readonly",
                "merchants": "merchants",
                "merchants:readonly": "merchants:readonly",
                "payment:read": "payment:read",
                "payment:write": "payment:write",
                "providers:read": "providers:read",
                "reports-generation-jobs:readonly": "reports-generation-jobs:readonly",
                "risk-insights:delete": "risk-insights:delete",
                "risk-insights:readonly": "risk-insights:readonly",
                "settlement-accounts": "settlement-accounts",
                "settlement-accounts:readonly": "settlement-accounts:readonly",
                "transaction-reports:readonly": "transaction-reports:readonly",
                "transactions:write": "transactions:write",
                "user:create": "user:create",
                "user:read": "user:read",
                "webhook-endpoints": "webhook-endpoints"
            }
        },
        "OAuth2User": {
            "type": "oauth2",
            "in": "header",
            "flow": "accessCode",
            "authorizationUrl": "https://api.tink.com/api/v1/oauth/authorization-grant",
            "tokenUrl": "https://api.tink.com/api/v1/oauth/token",
            "scopes": {
                "account-verification-reports:read": "account-verification-reports:read",
                "accounts.balances:readonly": "accounts.balances:readonly",
                "accounts.parties:readonly": "accounts.parties:readonly",
                "accounts:read": "accounts:read",
                "accounts:write": "accounts:write",
                "balance-refresh": "balance-refresh",
                "balance-refresh:readonly": "balance-refresh:readonly",
                "balances:read": "balances:read",
                "budgets-bfm": "budgets-bfm",
                "bulk-payment:read": "bulk-payment:read",
                "bulk-payment:write": "bulk-payment:write",
                "business-account-verification-reports:read": "business-account-verification-reports:read",
                "cash-flow": "cash-flow",
                "consents": "consents",
                "consents:readonly": "consents:readonly",
                "credentials:read": "credentials:read",
                "credentials:write": "credentials:write",
                "enrichment.merchant": "enrichment.merchant",
                "enrichment.sustainability": "enrichment.sustainability",
                "enrichment.transactions": "enrichment.transactions",
                "enrichment.transactions:readonly": "enrichment.transactions:readonly",
                "expense-checks:create": "expense-checks:create",
                "financial-calendar": "financial-calendar",
                "financial-calendar:readonly": "financial-calendar:readonly",
                "identities:readonly": "identities:readonly",
                "identity:read": "identity:read",
                "income-checks:create": "income-checks:create",
                "income-checks:readonly": "income-checks:readonly",
                "insights:read": "insights:read",
                "insights:write": "insights:write",
                "investment-accounts:readonly": "investment-accounts:readonly",
                "investments:read": "investments:read",
                "link-session:read": "link-session:read",
                "loan-accounts:readonly": "loan-accounts:readonly",
                "payment:read": "payment:read",
                "providers:read": "providers:read",
                "risk-insights:create": "risk-insights:create",
                "risk-insights:readonly": "risk-insights:readonly",
                "transactions.recurring:read": "transactions.recurring:read",
                "transactions:categorize": "transactions:categorize",
                "transactions:read": "transactions:read",
                "transactions:write": "transactions:write",
                "user:delete": "user:delete",
                "user:read": "user:read",
                "user:write": "user:write"
            }
        }
    },
    "tags": [
        {
            "name": "BETA"
        },
        {
            "name": "Connectivity v1.Balance Refresh"
        },
        {
            "name": "Connectivity v1.Credentials"
        },
        {
            "name": "Connectivity v1.Provider"
        },
        {
            "name": "Connectivity v1.Provider Consent"
        },
        {
            "name": "Connectivity v2.Authorization"
        },
        {
            "name": "Connectivity v2.Consent"
        },
        {
            "name": "Connectivity v2.Consent Templates"
        },
        {
            "name": "Connector.Account"
        },
        {
            "name": "Connector.Transaction"
        },
        {
            "name": "Data v1.Account"
        },
        {
            "name": "Data v1.Account Verification"
        },
        {
            "name": "Data v1.Business Account Verification"
        },
        {
            "name": "Data v1.Identity"
        },
        {
            "name": "Data v1.Investment"
        },
        {
            "name": "Data v1.Loan"
        },
        {
            "name": "Data v1.Search"
        },
        {
            "name": "Data v1.Transaction"
        },
        {
            "name": "Data v2.Account"
        },
        {
            "name": "Data v2.Identity"
        },
        {
            "name": "Data v2.Investment"
        },
        {
            "name": "Data v2.Loan"
        },
        {
            "name": "Data v2.Transaction"
        },
        {
            "name": "Data v2.Transaction Report"
        },
        {
            "name": "ENTERPRISE"
        },
        {
            "name": "Enrichment.As a Service"
        },
        {
            "name": "Enrichment.Category"
        },
        {
            "name": "Enrichment.Enriched Transactions"
        },
        {
            "name": "Enrichment.Merchant Information.Brand"
        },
        {
            "name": "Enrichment.Merchant Information.Merchant"
        },
        {
            "name": "Enrichment.Recurring Transactions"
        },
        {
            "name": "Enrichment.Sustainability.Account Profiling"
        },
        {
            "name": "Enrichment.Sustainability.Insights"
        },
        {
            "name": "Enrichment.Sustainability.Market Average"
        },
        {
            "name": "Enrichment.Sustainability.Transactions"
        },
        {
            "name": "Events v1.Webhook"
        },
        {
            "name": "Events v2.Webhook"
        },
        {
            "name": "Finance Management.Actionable Insight"
        },
        {
            "name": "Finance Management.Budgets"
        },
        {
            "name": "Finance Management.Business Budgets"
        },
        {
            "name": "Finance Management.Cash flow"
        },
        {
            "name": "Finance Management.Cost of Living"
        },
        {
            "name": "Finance Management.Financial calendar"
        },
        {
            "name": "Finance Management.Notification"
        },
        {
            "name": "Finance Management.Savings Goals"
        },
        {
            "name": "Finance Management.Statistic"
        },
        {
            "name": "Finance Management.Subscriptions"
        },
        {
            "name": "General.Calendar"
        },
        {
            "name": "General.Category"
        },
        {
            "name": "General.OAuth"
        },
        {
            "name": "General.Reports Generation Jobs"
        },
        {
            "name": "General.Tink Link.Session"
        },
        {
            "name": "General.User"
        },
        {
            "name": "MULTI_TENANT"
        },
        {
            "name": "Partner Integration.Merchants"
        },
        {
            "name": "Payment.Bulk Payment"
        },
        {
            "name": "Payment.Cancellation"
        },
        {
            "name": "Payment.Mandate Payment"
        },
        {
            "name": "Payment.Payment Request"
        },
        {
            "name": "Payment.Settlement Accounts"
        },
        {
            "name": "REGION.US"
        },
        {
            "name": "Risk.Expense Check"
        },
        {
            "name": "Risk.Income Check"
        },
        {
            "name": "Risk.Risk Insights"
        },
        {
            "name": "SessionService"
        }
    ]
}